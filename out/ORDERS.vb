Imports system
Imports system.IO
Imports system.xml
Imports System.Net
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Newtonsoft.Json

Namespace OData
    
    <QueryTitle("Sales Orders")>  _
    Public Class QUERY_ORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERS)
            _Parent = nothing
            _Name = "ORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Items")
            .add(1, "List of Styles")
            .add(2, "To Do Item")
            .add(3, "Product Bundles")
            .add(4, "Price Quotes for Order")
            .add(5, "Tasks for Document")
            .add(6, "Shipping Address")
            .add(7, "Calendar (All Users)")
            .add(8, "Payments for Project Order")
            .add(9, "Assemblies for the Order")
            .add(10, "Projects/Accounts")
            .add(11, "Order Status (Financial)")
            .add(12, "Invoices and Receipts for Order")
            .add(13, "Invoice Items for Order")
            .add(14, "Active Price Quotations")
            .add(15, "Linkage Details")
            .add(16, "Customer Distribution List")
            .add(17, "Attachments")
            .add(18, "Sales Rep Commission for Order")
            .add(19, "Sales Order - Customer Details")
            .add(20, "History of Statuses")
            .add(21, "History of Changes")
            .add(22, "Customer Credit")
            .add(23, "Credit Card to Charge")
            .add(24, "Pick and DCH Tasks")
            .add(25, "Split Among Profit/Cost Centers")
            .add(26, "Sales Orders - Remarks")
            .add(27, "Internal Dialogue")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERS)
            _Parent = Parent
            _name = "ORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Items")
            .add(1, "List of Styles")
            .add(2, "To Do Item")
            .add(3, "Product Bundles")
            .add(4, "Price Quotes for Order")
            .add(5, "Tasks for Document")
            .add(6, "Shipping Address")
            .add(7, "Calendar (All Users)")
            .add(8, "Payments for Project Order")
            .add(9, "Assemblies for the Order")
            .add(10, "Projects/Accounts")
            .add(11, "Order Status (Financial)")
            .add(12, "Invoices and Receipts for Order")
            .add(13, "Invoice Items for Order")
            .add(14, "Active Price Quotations")
            .add(15, "Linkage Details")
            .add(16, "Customer Distribution List")
            .add(17, "Attachments")
            .add(18, "Sales Rep Commission for Order")
            .add(19, "Sales Order - Customer Details")
            .add(20, "History of Statuses")
            .add(21, "History of Changes")
            .add(22, "Customer Credit")
            .add(23, "Credit Card to Charge")
            .add(24, "Pick and DCH Tasks")
            .add(25, "Split Among Profit/Cost Centers")
            .add(26, "Sales Orders - Remarks")
            .add(27, "Internal Dialogue")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERS As ORDERS In JsonConvert.DeserializeObject(Of QUERY_ORDERS)(stream.ReadToEnd).Value
              With _ORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERS = JsonConvert.DeserializeObject(Of ORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERS)
                  .CUSTNAME = obj.CUSTNAME
                  .CDES = obj.CDES
                  .NAME = obj.NAME
                  .POSITIONDES = obj.POSITIONDES
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .BOOKNUM = obj.BOOKNUM
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ORDSTATUSDES = obj.ORDSTATUSDES
                  .BOOLCLOSED = obj.BOOLCLOSED
                  .BOOLPCLOSED = obj.BOOLPCLOSED
                  .FORECASTFLAG = obj.FORECASTFLAG
                  .CPROFNUM = obj.CPROFNUM
                  .PLNAME = obj.PLNAME
                  .DEALNAME = obj.DEALNAME
                  .YOURDEALNAME = obj.YOURDEALNAME
                  .DETAILS = obj.DETAILS
                  .STATUSDATE = obj.STATUSDATE
                  .RMADOCNUM = obj.RMADOCNUM
                  .DUEDATE = obj.DUEDATE
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .BRANCHNAME = obj.BRANCHNAME
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .STCODE = obj.STCODE
                  .STDES = obj.STDES
                  .TYPECODE = obj.TYPECODE
                  .TYPEDES = obj.TYPEDES
                  .REFERENCE = obj.REFERENCE
                  .MODELNAME = obj.MODELNAME
                  .QUANT = obj.QUANT
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TAXCODE = obj.TAXCODE
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TOTPURCHASEPRICE = obj.TOTPURCHASEPRICE
                  .QPROFIT = obj.QPROFIT
                  .PROFITPERCENT = obj.PROFITPERCENT
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .LEXCHTOL = obj.LEXCHTOL
                  .LEXCHNEG = obj.LEXCHNEG
                  .ADJPRICEFLAG = obj.ADJPRICEFLAG
                  .ADJPRICEDES = obj.ADJPRICEDES
                  .LINKOPTIONS = obj.LINKOPTIONS
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .OBFLAG = obj.OBFLAG
                  .ADVBAL = obj.ADVBAL
                  .ADVPERCENT = obj.ADVPERCENT
                  .ORDREFA = obj.ORDREFA
                  .DOERNAME = obj.DOERNAME
                  .DOERNAME2 = obj.DOERNAME2
                  .DOERNAME3 = obj.DOERNAME3
                  .SDATE = obj.SDATE
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .EDATE = obj.EDATE
                  .EDAY = obj.EDAY
                  .ETIME = obj.ETIME
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .WARHSDES = obj.WARHSDES
                  .TOWARHSNAME = obj.TOWARHSNAME
                  .TOLOCNAME = obj.TOLOCNAME
                  .TOWARHSDES = obj.TOWARHSDES
                  .EXTFILEFLAG = obj.EXTFILEFLAG
                  .BONUSFLAG = obj.BONUSFLAG
                  .CCNUM = obj.CCNUM
                  .TERRITORYCODE = obj.TERRITORYCODE
                  .TERRITORYDES = obj.TERRITORYDES
                  .TOTQUANT = obj.TOTQUANT
                  .PIKALONEFLAG = obj.PIKALONEFLAG
                  .STZONECODE = obj.STZONECODE
                  .DISTRLINECODE = obj.DISTRLINECODE
                  .DISTRLINEDES = obj.DISTRLINEDES
                  .STZONEDES = obj.STZONEDES
                  .WTASKDOCCODE = obj.WTASKDOCCODE
                  .WTASKDOCDES = obj.WTASKDOCDES
                  .IVDCODE = obj.IVDCODE
                  .IVDCODEDES = obj.IVDCODEDES
                  .LFROMDATE = obj.LFROMDATE
                  .LBASEDATE = obj.LBASEDATE
                  .LPERCENT = obj.LPERCENT
                  .SHIPREMARK = obj.SHIPREMARK
                  .GPSX = obj.GPSX
                  .GPSY = obj.GPSY
                  .PIKORDER = obj.PIKORDER
                  .FOLLOWUPIV = obj.FOLLOWUPIV
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERS as ORDERS in value
              If _ORDERS.Equals(trycast(obj,ORDERS)) Then
                  value.remove(_ORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetCDES As Boolean = Boolean.FalseString
        
        Private _CDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _POSITIONDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetORDSTATUSDES As Boolean = Boolean.FalseString
        
        Private _ORDSTATUSDES As String
        
        Private _IsSetBOOLCLOSED As Boolean = Boolean.FalseString
        
        Private _BOOLCLOSED As String
        
        Private _BOOLPCLOSED As String
        
        Private _IsSetFORECASTFLAG As Boolean = Boolean.FalseString
        
        Private _FORECASTFLAG As String
        
        Private _IsSetCPROFNUM As Boolean = Boolean.FalseString
        
        Private _CPROFNUM As String
        
        Private _IsSetPLNAME As Boolean = Boolean.FalseString
        
        Private _PLNAME As String
        
        Private _IsSetDEALNAME As Boolean = Boolean.FalseString
        
        Private _DEALNAME As String
        
        Private _YOURDEALNAME As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _STATUSDATE As System.DateTimeOffset
        
        Private _IsSetRMADOCNUM As Boolean = Boolean.FalseString
        
        Private _RMADOCNUM As String
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetSTCODE As Boolean = Boolean.FalseString
        
        Private _STCODE As String
        
        Private _STDES As String
        
        Private _IsSetTYPECODE As Boolean = Boolean.FalseString
        
        Private _TYPECODE As String
        
        Private _TYPEDES As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _IsSetMODELNAME As Boolean = Boolean.FalseString
        
        Private _MODELNAME As String
        
        Private _IsSetQUANT As Boolean = Boolean.FalseString
        
        Private _QUANT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _TOTPURCHASEPRICE As Decimal
        
        Private _QPROFIT As Decimal
        
        Private _PROFITPERCENT As Decimal
        
        Private _IsSetLCODE As Boolean = Boolean.FalseString
        
        Private _LCODE As String
        
        Private _IsSetLEXCH As Boolean = Boolean.FalseString
        
        Private _LEXCH As Decimal
        
        Private _IsSetLEXCHTOL As Boolean = Boolean.FalseString
        
        Private _LEXCHTOL As Decimal
        
        Private _IsSetLEXCHNEG As Boolean = Boolean.FalseString
        
        Private _LEXCHNEG As String
        
        Private _IsSetADJPRICEFLAG As Boolean = Boolean.FalseString
        
        Private _ADJPRICEFLAG As String
        
        Private _ADJPRICEDES As String
        
        Private _IsSetLINKOPTIONS As Boolean = Boolean.FalseString
        
        Private _LINKOPTIONS As String
        
        Private _IsSetPAYCODE As Boolean = Boolean.FalseString
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _IsSetOBFLAG As Boolean = Boolean.FalseString
        
        Private _OBFLAG As String
        
        Private _ADVBAL As Decimal
        
        Private _IsSetADVPERCENT As Boolean = Boolean.FalseString
        
        Private _ADVPERCENT As Decimal
        
        Private _IsSetORDREFA As Boolean = Boolean.FalseString
        
        Private _ORDREFA As String
        
        Private _IsSetDOERNAME As Boolean = Boolean.FalseString
        
        Private _DOERNAME As String
        
        Private _IsSetDOERNAME2 As Boolean = Boolean.FalseString
        
        Private _DOERNAME2 As String
        
        Private _IsSetDOERNAME3 As Boolean = Boolean.FalseString
        
        Private _DOERNAME3 As String
        
        Private _IsSetSDATE As Boolean = Boolean.FalseString
        
        Private _SDATE As System.DateTimeOffset
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetEDATE As Boolean = Boolean.FalseString
        
        Private _EDATE As System.DateTimeOffset
        
        Private _EDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _WARHSDES As String
        
        Private _IsSetTOWARHSNAME As Boolean = Boolean.FalseString
        
        Private _TOWARHSNAME As String
        
        Private _IsSetTOLOCNAME As Boolean = Boolean.FalseString
        
        Private _TOLOCNAME As String
        
        Private _TOWARHSDES As String
        
        Private _EXTFILEFLAG As String
        
        Private _IsSetBONUSFLAG As Boolean = Boolean.FalseString
        
        Private _BONUSFLAG As String
        
        Private _IsSetCCNUM As Boolean = Boolean.FalseString
        
        Private _CCNUM As String
        
        Private _TERRITORYCODE As String
        
        Private _TERRITORYDES As String
        
        Private _TOTQUANT As Decimal
        
        Private _IsSetPIKALONEFLAG As Boolean = Boolean.FalseString
        
        Private _PIKALONEFLAG As String
        
        Private _IsSetSTZONECODE As Boolean = Boolean.FalseString
        
        Private _STZONECODE As String
        
        Private _IsSetDISTRLINECODE As Boolean = Boolean.FalseString
        
        Private _DISTRLINECODE As String
        
        Private _DISTRLINEDES As String
        
        Private _STZONEDES As String
        
        Private _IsSetWTASKDOCCODE As Boolean = Boolean.FalseString
        
        Private _WTASKDOCCODE As String
        
        Private _WTASKDOCDES As String
        
        Private _IsSetIVDCODE As Boolean = Boolean.FalseString
        
        Private _IVDCODE As String
        
        Private _IVDCODEDES As String
        
        Private _IsSetLFROMDATE As Boolean = Boolean.FalseString
        
        Private _LFROMDATE As System.DateTimeOffset
        
        Private _IsSetLBASEDATE As Boolean = Boolean.FalseString
        
        Private _LBASEDATE As System.DateTimeOffset
        
        Private _IsSetLPERCENT As Boolean = Boolean.FalseString
        
        Private _LPERCENT As Decimal
        
        Private _IsSetSHIPREMARK As Boolean = Boolean.FalseString
        
        Private _SHIPREMARK As String
        
        Private _IsSetGPSX As Boolean = Boolean.FalseString
        
        Private _GPSX As String
        
        Private _IsSetGPSY As Boolean = Boolean.FalseString
        
        Private _GPSY As String
        
        Private _IsSetPIKORDER As Boolean = Boolean.FalseString
        
        Private _PIKORDER As Long
        
        Private _IsSetFOLLOWUPIV As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPIV As Long
        
        Private _ORDERITEMS_SUBFORM As QUERY_ORDERITEMS
        
        Private _MATRIXSUM_SUBFORM As QUERY_MATRIXSUM
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _CPROFMODEL_SUBFORM As QUERY_CPROFMODEL
        
        Private _ORDERCPROF_SUBFORM As QUERY_ORDERCPROF
        
        Private _GENCUSTNOTES_SUBFORM As QUERY_GENCUSTNOTES
        
        Private _SHIPTO2_SUBFORM As QUERY_SHIPTO2
        
        Private _FUTUREGENDIARY_SUBFORM As QUERY_FUTUREGENDIARY
        
        Private _TRANSORDER_po_SUBFORM As QUERY_TRANSORDER_po
        
        Private _ORDDOC_H_SUBFORM As QUERY_ORDDOC_H
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _ORDFNCBAL_SUBFORM As QUERY_ORDFNCBAL
        
        Private _ORDINVOICES_SUBFORM As QUERY_ORDINVOICES
        
        Private _ORDINVOICEITEMS_SUBFORM As QUERY_ORDINVOICEITEMS
        
        Private _ORDCPROF_SUBFORM As QUERY_ORDCPROF
        
        Private _LINKING_SUBFORM As QUERY_LINKING
        
        Private _ORDCUSTDISTR_SUBFORM As QUERY_ORDCUSTDISTR
        
        Private _EXTFILES_SUBFORM As QUERY_EXTFILES
        
        Private _ORDCOMITEMS_SUBFORM As QUERY_ORDCOMITEMS
        
        Private _ORDERSCONT_SUBFORM As QUERY_ORDERSCONT
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _ORD_CHANGES_LOG_SUBFORM As QUERY_ORD_CHANGES_LOG
        
        Private _CUSTOBLIGO_SUBFORM As QUERY_CUSTOBLIGO
        
        Private _PAYMENTDEF_SUBFORM As QUERY_PAYMENTDEF
        
        Private _ORDWTASKS_SUBFORM As QUERY_ORDWTASKS
        
        Private _SPLITCOSTCENTERS_SUBFORM As QUERY_SPLITCOSTCENTERS
        
        Private _ORDERSTEXT_SUBFORM As QUERY_ORDERSTEXT
        
        Private _INTERNALDIALOGTEXT_SUBFORM As QUERY_INTERNALDIALOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Order Items"))
            ChildQuery.add(1, new oNavigation("List of Styles"))
            ChildQuery.add(2, new oNavigation("To Do Item"))
            ChildQuery.add(3, new oNavigation("Product Bundles"))
            ChildQuery.add(4, new oNavigation("Price Quotes for Order"))
            ChildQuery.add(5, new oNavigation("Tasks for Document"))
            ChildQuery.add(6, new oNavigation("Shipping Address"))
            ChildQuery.add(7, new oNavigation("Calendar (All Users)"))
            ChildQuery.add(8, new oNavigation("Payments for Project Order"))
            ChildQuery.add(9, new oNavigation("Assemblies for the Order"))
            ChildQuery.add(10, new oNavigation("Projects/Accounts"))
            ChildQuery.add(11, new oNavigation("Order Status (Financial)"))
            ChildQuery.add(12, new oNavigation("Invoices and Receipts for Order"))
            ChildQuery.add(13, new oNavigation("Invoice Items for Order"))
            ChildQuery.add(14, new oNavigation("Active Price Quotations"))
            ChildQuery.add(15, new oNavigation("Linkage Details"))
            ChildQuery.add(16, new oNavigation("Customer Distribution List"))
            ChildQuery.add(17, new oNavigation("Attachments"))
            ChildQuery.add(18, new oNavigation("Sales Rep Commission for Order"))
            ChildQuery.add(19, new oNavigation("Sales Order - Customer Details"))
            ChildQuery.add(20, new oNavigation("History of Statuses"))
            ChildQuery.add(21, new oNavigation("History of Changes"))
            ChildQuery.add(22, new oNavigation("Customer Credit"))
            ChildQuery.add(23, new oNavigation("Credit Card to Charge"))
            ChildQuery.add(24, new oNavigation("Pick and DCH Tasks"))
            ChildQuery.add(25, new oNavigation("Split Among Profit/Cost Centers"))
            ChildQuery.add(26, new oNavigation("Sales Orders - Remarks"))
            ChildQuery.add(27, new oNavigation("Internal Dialogue"))
            _ORDERITEMS_SUBFORM = new QUERY_ORDERITEMS(me)
            _MATRIXSUM_SUBFORM = new QUERY_MATRIXSUM(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _CPROFMODEL_SUBFORM = new QUERY_CPROFMODEL(me)
            _ORDERCPROF_SUBFORM = new QUERY_ORDERCPROF(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _FUTUREGENDIARY_SUBFORM = new QUERY_FUTUREGENDIARY(me)
            _TRANSORDER_po_SUBFORM = new QUERY_TRANSORDER_po(me)
            _ORDDOC_H_SUBFORM = new QUERY_ORDDOC_H(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _ORDFNCBAL_SUBFORM = new QUERY_ORDFNCBAL(me)
            _ORDINVOICES_SUBFORM = new QUERY_ORDINVOICES(me)
            _ORDINVOICEITEMS_SUBFORM = new QUERY_ORDINVOICEITEMS(me)
            _ORDCPROF_SUBFORM = new QUERY_ORDCPROF(me)
            _LINKING_SUBFORM = new QUERY_LINKING(me)
            _ORDCUSTDISTR_SUBFORM = new QUERY_ORDCUSTDISTR(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _ORDCOMITEMS_SUBFORM = new QUERY_ORDCOMITEMS(me)
            _ORDERSCONT_SUBFORM = new QUERY_ORDERSCONT(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _ORD_CHANGES_LOG_SUBFORM = new QUERY_ORD_CHANGES_LOG(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _PAYMENTDEF_SUBFORM = new QUERY_PAYMENTDEF(me)
            _ORDWTASKS_SUBFORM = new QUERY_ORDWTASKS(me)
            _SPLITCOSTCENTERS_SUBFORM = new QUERY_SPLITCOSTCENTERS(me)
            _ORDERSTEXT_SUBFORM = new QUERY_ORDERSTEXT(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_ORDERITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CPROFMODEL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_ORDERCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_FUTUREGENDIARY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_TRANSORDER_po_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_ORDDOC_H_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_ORDFNCBAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_ORDINVOICES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_ORDINVOICEITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_ORDCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_LINKING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_ORDCUSTDISTR_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_ORDCOMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_ORDERSCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_ORD_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(22)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(23)
               .setoDataQuery(_PAYMENTDEF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(24)
               .setoDataQuery(_ORDWTASKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(25)
               .setoDataQuery(_SPLITCOSTCENTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(26)
               .setoDataQuery(_ORDERSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(27)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Order Items"))
            ChildQuery.add(1, new oNavigation("List of Styles"))
            ChildQuery.add(2, new oNavigation("To Do Item"))
            ChildQuery.add(3, new oNavigation("Product Bundles"))
            ChildQuery.add(4, new oNavigation("Price Quotes for Order"))
            ChildQuery.add(5, new oNavigation("Tasks for Document"))
            ChildQuery.add(6, new oNavigation("Shipping Address"))
            ChildQuery.add(7, new oNavigation("Calendar (All Users)"))
            ChildQuery.add(8, new oNavigation("Payments for Project Order"))
            ChildQuery.add(9, new oNavigation("Assemblies for the Order"))
            ChildQuery.add(10, new oNavigation("Projects/Accounts"))
            ChildQuery.add(11, new oNavigation("Order Status (Financial)"))
            ChildQuery.add(12, new oNavigation("Invoices and Receipts for Order"))
            ChildQuery.add(13, new oNavigation("Invoice Items for Order"))
            ChildQuery.add(14, new oNavigation("Active Price Quotations"))
            ChildQuery.add(15, new oNavigation("Linkage Details"))
            ChildQuery.add(16, new oNavigation("Customer Distribution List"))
            ChildQuery.add(17, new oNavigation("Attachments"))
            ChildQuery.add(18, new oNavigation("Sales Rep Commission for Order"))
            ChildQuery.add(19, new oNavigation("Sales Order - Customer Details"))
            ChildQuery.add(20, new oNavigation("History of Statuses"))
            ChildQuery.add(21, new oNavigation("History of Changes"))
            ChildQuery.add(22, new oNavigation("Customer Credit"))
            ChildQuery.add(23, new oNavigation("Credit Card to Charge"))
            ChildQuery.add(24, new oNavigation("Pick and DCH Tasks"))
            ChildQuery.add(25, new oNavigation("Split Among Profit/Cost Centers"))
            ChildQuery.add(26, new oNavigation("Sales Orders - Remarks"))
            ChildQuery.add(27, new oNavigation("Internal Dialogue"))
            _ORDERITEMS_SUBFORM = new QUERY_ORDERITEMS(me)
            _MATRIXSUM_SUBFORM = new QUERY_MATRIXSUM(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _CPROFMODEL_SUBFORM = new QUERY_CPROFMODEL(me)
            _ORDERCPROF_SUBFORM = new QUERY_ORDERCPROF(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _FUTUREGENDIARY_SUBFORM = new QUERY_FUTUREGENDIARY(me)
            _TRANSORDER_po_SUBFORM = new QUERY_TRANSORDER_po(me)
            _ORDDOC_H_SUBFORM = new QUERY_ORDDOC_H(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _ORDFNCBAL_SUBFORM = new QUERY_ORDFNCBAL(me)
            _ORDINVOICES_SUBFORM = new QUERY_ORDINVOICES(me)
            _ORDINVOICEITEMS_SUBFORM = new QUERY_ORDINVOICEITEMS(me)
            _ORDCPROF_SUBFORM = new QUERY_ORDCPROF(me)
            _LINKING_SUBFORM = new QUERY_LINKING(me)
            _ORDCUSTDISTR_SUBFORM = new QUERY_ORDCUSTDISTR(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _ORDCOMITEMS_SUBFORM = new QUERY_ORDCOMITEMS(me)
            _ORDERSCONT_SUBFORM = new QUERY_ORDERSCONT(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _ORD_CHANGES_LOG_SUBFORM = new QUERY_ORD_CHANGES_LOG(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _PAYMENTDEF_SUBFORM = new QUERY_PAYMENTDEF(me)
            _ORDWTASKS_SUBFORM = new QUERY_ORDWTASKS(me)
            _SPLITCOSTCENTERS_SUBFORM = new QUERY_SPLITCOSTCENTERS(me)
            _ORDERSTEXT_SUBFORM = new QUERY_ORDERSTEXT(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_ORDERITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CPROFMODEL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_ORDERCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_FUTUREGENDIARY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_TRANSORDER_po_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_ORDDOC_H_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_ORDFNCBAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_ORDINVOICES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_ORDINVOICEITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_ORDCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_LINKING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_ORDCUSTDISTR_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_ORDCOMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_ORDERSCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_ORD_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(22)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(23)
               .setoDataQuery(_PAYMENTDEF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(24)
               .setoDataQuery(_ORDWTASKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(25)
               .setoDataQuery(_SPLITCOSTCENTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(26)
               .setoDataQuery(_ORDERSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(27)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _ORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(3, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(4, new oNavigation("Price Quotes for Order", _ORDERCPROF_SUBFORM))
                   .add(5, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(6, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(7, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(8, new oNavigation("Payments for Project Order", _TRANSORDER_po_SUBFORM))
                   .add(9, new oNavigation("Assemblies for the Order", _ORDDOC_H_SUBFORM))
                   .add(10, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(11, new oNavigation("Order Status (Financial)", _ORDFNCBAL_SUBFORM))
                   .add(12, new oNavigation("Invoices and Receipts for Order", _ORDINVOICES_SUBFORM))
                   .add(13, new oNavigation("Invoice Items for Order", _ORDINVOICEITEMS_SUBFORM))
                   .add(14, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(15, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(16, new oNavigation("Customer Distribution List", _ORDCUSTDISTR_SUBFORM))
                   .add(17, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(18, new oNavigation("Sales Rep Commission for Order", _ORDCOMITEMS_SUBFORM))
                   .add(19, new oNavigation("Sales Order - Customer Details", _ORDERSCONT_SUBFORM))
                   .add(20, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(21, new oNavigation("History of Changes", _ORD_CHANGES_LOG_SUBFORM))
                   .add(22, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(23, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(24, new oNavigation("Pick and DCH Tasks", _ORDWTASKS_SUBFORM))
                   .add(25, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(26, new oNavigation("Sales Orders - Remarks", _ORDERSTEXT_SUBFORM))
                   .add(27, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERS"
                else
                    return "ORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(12),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Name", value, "^.{0,48}$") then Exit Property
                _IsSetCDES = True
                If loading Then
                  _CDES = Value
                Else
                    if not _CDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(14),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Job Title"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("POSITIONDES")>  _
        Public Property POSITIONDES() As String
            Get
                return _POSITIONDES
            End Get
            Set
                if not(value is nothing) then
                  _POSITIONDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(16),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(20),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Order Num"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(22),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Order Num", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(24),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Status"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("ORDSTATUSDES")>  _
        Public Property ORDSTATUSDES() As String
            Get
                return _ORDSTATUSDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order Status", value, "^.{0,12}$") then Exit Property
                _IsSetORDSTATUSDES = True
                If loading Then
                  _ORDSTATUSDES = Value
                Else
                    if not _ORDSTATUSDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDSTATUSDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDSTATUSDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Closed"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(32),  _
         twodBarcode("BOOLCLOSED")>  _
        Public Property BOOLCLOSED() As String
            Get
                return _BOOLCLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Closed", value, "^.{0,1}$") then Exit Property
                _IsSetBOOLCLOSED = True
                If loading Then
                  _BOOLCLOSED = Value
                Else
                    if not _BOOLCLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOLCLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOLCLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Partially Closed"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("BOOLPCLOSED")>  _
        Public Property BOOLPCLOSED() As String
            Get
                return _BOOLPCLOSED
            End Get
            Set
                if not(value is nothing) then
                  _BOOLPCLOSED = Value
                end if
            End Set
        End Property
        
        <DisplayName("Forecast/Stock Order"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(36),  _
         twodBarcode("FORECASTFLAG")>  _
        Public Property FORECASTFLAG() As String
            Get
                return _FORECASTFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Forecast/Stock Order", value, "^.{0,1}$") then Exit Property
                _IsSetFORECASTFLAG = True
                If loading Then
                  _FORECASTFLAG = Value
                Else
                    if not _FORECASTFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FORECASTFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FORECASTFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(40),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Quotation", value, "^.{0,16}$") then Exit Property
                _IsSetCPROFNUM = True
                If loading Then
                  _CPROFNUM = Value
                Else
                    if not _CPROFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CPROFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CPROFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price List"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(42),  _
         twodBarcode("PLNAME")>  _
        Public Property PLNAME() As String
            Get
                return _PLNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price List", value, "^.{0,6}$") then Exit Property
                _IsSetPLNAME = True
                If loading Then
                  _PLNAME = Value
                Else
                    if not _PLNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Blanket Order"),  _
         nType("Edm.String"),  _
         tab("Project Description"),  _
         Pos(44),  _
         twodBarcode("DEALNAME")>  _
        Public Property DEALNAME() As String
            Get
                return _DEALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Blanket Order", value, "^.{0,16}$") then Exit Property
                _IsSetDEALNAME = True
                If loading Then
                  _DEALNAME = Value
                Else
                    if not _DEALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Blanket Order"),  _
         nType("Edm.String"),  _
         tab("Cust's Blanket Order"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("YOURDEALNAME")>  _
        Public Property YOURDEALNAME() As String
            Get
                return _YOURDEALNAME
            End Get
            Set
                if not(value is nothing) then
                  _YOURDEALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Cust's Blanket Order"),  _
         Pos(46),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status Update Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Cust's Blanket Order"),  _
         Pos(47),  _
         [ReadOnly](true),  _
         twodBarcode("STATUSDATE")>  _
        Public Property STATUSDATE() As nullable (of DateTimeOffset)
            Get
                return _STATUSDATE
            End Get
            Set
                if not(value is nothing) then
                  _STATUSDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("RMA Number"),  _
         nType("Edm.String"),  _
         tab("Cust's Blanket Order"),  _
         Pos(48),  _
         twodBarcode("RMADOCNUM")>  _
        Public Property RMADOCNUM() As String
            Get
                return _RMADOCNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("RMA Number", value, "^.{0,16}$") then Exit Property
                _IsSetRMADOCNUM = True
                If loading Then
                  _RMADOCNUM = Value
                Else
                    if not _RMADOCNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RMADOCNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RMADOCNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Cust's Blanket Order"),  _
         Pos(49),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Cust's Blanket Order"),  _
         Pos(50),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Cust's Blanket Order"),  _
         Pos(51),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch"),  _
         nType("Edm.String"),  _
         tab("Cust's Blanket Order"),  _
         Pos(52),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(54),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Code"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(56),  _
         twodBarcode("STCODE")>  _
        Public Property STCODE() As String
            Get
                return _STCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Code", value, "^.{0,2}$") then Exit Property
                _IsSetSTCODE = True
                If loading Then
                  _STCODE = Value
                Else
                    if not _STCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Method"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(58),  _
         [ReadOnly](true),  _
         twodBarcode("STDES")>  _
        Public Property STDES() As String
            Get
                return _STDES
            End Get
            Set
                if not(value is nothing) then
                  _STDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type of Sale"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(60),  _
         twodBarcode("TYPECODE")>  _
        Public Property TYPECODE() As String
            Get
                return _TYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type of Sale", value, "^.{0,3}$") then Exit Property
                _IsSetTYPECODE = True
                If loading Then
                  _TYPECODE = Value
                Else
                    if not _TYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type of Sale-Descrip"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("TYPEDES")>  _
        Public Property TYPEDES() As String
            Get
                return _TYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _TYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(64),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer's Purch Ord", value, "^.{0,15}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(66),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Product Bundle", value, "^.{0,6}$") then Exit Property
                _IsSetMODELNAME = True
                If loading Then
                  _MODELNAME = Value
                Else
                    if not _MODELNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODELNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODELNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Quantity"),  _
         Pos(68),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetQUANT = True
                If loading Then
                  _QUANT = Value
                Else
                    if not _QUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quantity"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Quantity"),  _
         Pos(72),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quantity"),  _
         Pos(74),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quantity"),  _
         Pos(76),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Quantity"),  _
         Pos(77),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quantity"),  _
         Pos(78),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Final Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Quantity"),  _
         Pos(79),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Cost"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPURCHASEPRICE")>  _
        Public Property TOTPURCHASEPRICE() As nullable(of decimal)
            Get
                return _TOTPURCHASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPURCHASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Cost"),  _
         Pos(81),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFIT")>  _
        Public Property QPROFIT() As nullable(of decimal)
            Get
                return _QPROFIT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Cost"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("PROFITPERCENT")>  _
        Public Property PROFITPERCENT() As nullable(of decimal)
            Get
                return _PROFITPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PROFITPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Cost"),  _
         Pos(83),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linked Currency", value, "^.{0,3}$") then Exit Property
                _IsSetLCODE = True
                If loading Then
                  _LCODE = Value
                Else
                    if not _LCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Cost"),  _
         Pos(84),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLEXCH = True
                If loading Then
                  _LEXCH = Value
                Else
                    if not _LEXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Minimum Linkage %"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Cost"),  _
         Pos(85),  _
         twodBarcode("LEXCHTOL")>  _
        Public Property LEXCHTOL() As nullable(of decimal)
            Get
                return _LEXCHTOL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Minimum Linkage %", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLEXCHTOL = True
                If loading Then
                  _LEXCHTOL = Value
                Else
                    if not _LEXCHTOL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCHTOL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCHTOL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Negative Linkage?"),  _
         nType("Edm.String"),  _
         tab("Cost"),  _
         Pos(86),  _
         twodBarcode("LEXCHNEG")>  _
        Public Property LEXCHNEG() As String
            Get
                return _LEXCHNEG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Negative Linkage?", value, "^.{0,1}$") then Exit Property
                _IsSetLEXCHNEG = True
                If loading Then
                  _LEXCHNEG = Value
                Else
                    if not _LEXCHNEG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCHNEG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCHNEG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Linkage"),  _
         nType("Edm.String"),  _
         tab("Cost"),  _
         Pos(87),  _
         twodBarcode("ADJPRICEFLAG")>  _
        Public Property ADJPRICEFLAG() As String
            Get
                return _ADJPRICEFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Linkage", value, "^.{0,1}$") then Exit Property
                _IsSetADJPRICEFLAG = True
                If loading Then
                  _ADJPRICEFLAG = Value
                Else
                    if not _ADJPRICEFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADJPRICEFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADJPRICEFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Linkage Method"),  _
         nType("Edm.String"),  _
         tab("Linkage Method"),  _
         Pos(88),  _
         [ReadOnly](true),  _
         twodBarcode("ADJPRICEDES")>  _
        Public Property ADJPRICEDES() As String
            Get
                return _ADJPRICEDES
            End Get
            Set
                if not(value is nothing) then
                  _ADJPRICEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linkage Options"),  _
         nType("Edm.String"),  _
         tab("Linkage Method"),  _
         Pos(89),  _
         twodBarcode("LINKOPTIONS")>  _
        Public Property LINKOPTIONS() As String
            Get
                return _LINKOPTIONS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linkage Options", value, "^.{0,1}$") then Exit Property
                _IsSetLINKOPTIONS = True
                If loading Then
                  _LINKOPTIONS = Value
                Else
                    if not _LINKOPTIONS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINKOPTIONS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINKOPTIONS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Linkage Method"),  _
         Pos(90),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Terms Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYCODE = True
                If loading Then
                  _PAYCODE = Value
                Else
                    if not _PAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Linkage Method"),  _
         Pos(92),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Consider Credit?"),  _
         nType("Edm.String"),  _
         tab("Linkage Method"),  _
         Pos(95),  _
         twodBarcode("OBFLAG")>  _
        Public Property OBFLAG() As String
            Get
                return _OBFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Consider Credit?", value, "^.{0,1}$") then Exit Property
                _IsSetOBFLAG = True
                If loading Then
                  _OBFLAG = Value
                Else
                    if not _OBFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OBFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OBFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("AdvancePaymt Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Linkage Method"),  _
         Pos(97),  _
         [ReadOnly](true),  _
         twodBarcode("ADVBAL")>  _
        Public Property ADVBAL() As nullable(of decimal)
            Get
                return _ADVBAL
            End Get
            Set
                if not(value is nothing) then
                  _ADVBAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Advance Pay Deduct"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Linkage Method"),  _
         Pos(98),  _
         twodBarcode("ADVPERCENT")>  _
        Public Property ADVPERCENT() As nullable(of decimal)
            Get
                return _ADVPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Advance Pay Deduct", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetADVPERCENT = True
                If loading Then
                  _ADVPERCENT = Value
                Else
                    if not _ADVPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADVPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADVPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("VAT Number-Cust."),  _
         nType("Edm.String"),  _
         tab("Linkage Method"),  _
         Pos(99),  _
         twodBarcode("ORDREFA")>  _
        Public Property ORDREFA() As String
            Get
                return _ORDREFA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("VAT Number-Cust.", value, "^.{0,16}$") then Exit Property
                _IsSetORDREFA = True
                If loading Then
                  _ORDREFA = Value
                Else
                    if not _ORDREFA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDREFA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDREFA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(100),  _
         Mandatory(true),  _
         twodBarcode("DOERNAME")>  _
        Public Property DOERNAME() As String
            Get
                return _DOERNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetDOERNAME = True
                If loading Then
                  _DOERNAME = Value
                Else
                    if not _DOERNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOERNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOERNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Employee 2"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(101),  _
         twodBarcode("DOERNAME2")>  _
        Public Property DOERNAME2() As String
            Get
                return _DOERNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Employee 2", value, "^.{0,20}$") then Exit Property
                _IsSetDOERNAME2 = True
                If loading Then
                  _DOERNAME2 = Value
                Else
                    if not _DOERNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOERNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOERNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Employee 3"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(102),  _
         twodBarcode("DOERNAME3")>  _
        Public Property DOERNAME3() As String
            Get
                return _DOERNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Employee 3", value, "^.{0,20}$") then Exit Property
                _IsSetDOERNAME3 = True
                If loading Then
                  _DOERNAME3 = Value
                Else
                    if not _DOERNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOERNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOERNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(104),  _
         twodBarcode("SDATE")>  _
        Public Property SDATE() As nullable (of DateTimeOffset)
            Get
                return _SDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetSDATE = True
                If loading Then
                  _SDATE = Value
                Else
                    if not _SDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(106),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(107),  _
         twodBarcode("EDATE")>  _
        Public Property EDATE() As nullable (of DateTimeOffset)
            Get
                return _EDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetEDATE = True
                If loading Then
                  _EDATE = Value
                Else
                    if not _EDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(108),  _
         [ReadOnly](true),  _
         twodBarcode("EDAY")>  _
        Public Property EDAY() As String
            Get
                return _EDAY
            End Get
            Set
                if not(value is nothing) then
                  _EDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(109),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sending Warehouse"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(110),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sending Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(111),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Descrip."),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSDES")>  _
        Public Property WARHSDES() As String
            Get
                return _WARHSDES
            End Get
            Set
                if not(value is nothing) then
                  _WARHSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("For Consignmt Warehs"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(113),  _
         twodBarcode("TOWARHSNAME")>  _
        Public Property TOWARHSNAME() As String
            Get
                return _TOWARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("For Consignmt Warehs", value, "^.{0,4}$") then Exit Property
                _IsSetTOWARHSNAME = True
                If loading Then
                  _TOWARHSNAME = Value
                Else
                    if not _TOWARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOWARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOWARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin (Consignment)"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(114),  _
         twodBarcode("TOLOCNAME")>  _
        Public Property TOLOCNAME() As String
            Get
                return _TOLOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin (Consignment)", value, "^.{0,14}$") then Exit Property
                _IsSetTOLOCNAME = True
                If loading Then
                  _TOLOCNAME = Value
                Else
                    if not _TOLOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOLOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOLOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Ware Desc-Consignmt"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(115),  _
         [ReadOnly](true),  _
         twodBarcode("TOWARHSDES")>  _
        Public Property TOWARHSDES() As String
            Get
                return _TOWARHSDES
            End Get
            Set
                if not(value is nothing) then
                  _TOWARHSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachments?"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEFLAG")>  _
        Public Property EXTFILEFLAG() As String
            Get
                return _EXTFILEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ignore Bonuses?"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(130),  _
         twodBarcode("BONUSFLAG")>  _
        Public Property BONUSFLAG() As String
            Get
                return _BONUSFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ignore Bonuses?", value, "^.{0,1}$") then Exit Property
                _IsSetBONUSFLAG = True
                If loading Then
                  _BONUSFLAG = Value
                Else
                    if not _BONUSFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BONUSFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BONUSFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Oppor. Number"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(135),  _
         twodBarcode("CCNUM")>  _
        Public Property CCNUM() As String
            Get
                return _CCNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Oppor. Number", value, "^.{0,24}$") then Exit Property
                _IsSetCCNUM = True
                If loading Then
                  _CCNUM = Value
                Else
                    if not _CCNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CCNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CCNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Territory Code"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("TERRITORYCODE")>  _
        Public Property TERRITORYCODE() As String
            Get
                return _TERRITORYCODE
            End Get
            Set
                if not(value is nothing) then
                  _TERRITORYCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Territory Name"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(141),  _
         [ReadOnly](true),  _
         twodBarcode("TERRITORYDES")>  _
        Public Property TERRITORYDES() As String
            Get
                return _TERRITORYDES
            End Get
            Set
                if not(value is nothing) then
                  _TERRITORYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty of Items"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Ignore Bonuses?"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Separate Pick?"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(220),  _
         twodBarcode("PIKALONEFLAG")>  _
        Public Property PIKALONEFLAG() As String
            Get
                return _PIKALONEFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Separate Pick?", value, "^.{0,1}$") then Exit Property
                _IsSetPIKALONEFLAG = True
                If loading Then
                  _PIKALONEFLAG = Value
                Else
                    if not _PIKALONEFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PIKALONEFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PIKALONEFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Storage Zone"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(230),  _
         twodBarcode("STZONECODE")>  _
        Public Property STZONECODE() As String
            Get
                return _STZONECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Storage Zone", value, "^.{0,2}$") then Exit Property
                _IsSetSTZONECODE = True
                If loading Then
                  _STZONECODE = Value
                Else
                    if not _STZONECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STZONECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STZONECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Route Code"),  _
         nType("Edm.String"),  _
         tab("Ignore Bonuses?"),  _
         Pos(235),  _
         twodBarcode("DISTRLINECODE")>  _
        Public Property DISTRLINECODE() As String
            Get
                return _DISTRLINECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distrib. Route Code", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRLINECODE = True
                If loading Then
                  _DISTRLINECODE = Value
                Else
                    if not _DISTRLINECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRLINECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRLINECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Route Desc."),  _
         nType("Edm.String"),  _
         tab("Distrib. Route Desc."),  _
         Pos(236),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRLINEDES")>  _
        Public Property DISTRLINEDES() As String
            Get
                return _DISTRLINEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRLINEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Zone Description"),  _
         nType("Edm.String"),  _
         tab("Distrib. Route Desc."),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("STZONEDES")>  _
        Public Property STZONEDES() As String
            Get
                return _STZONEDES
            End Get
            Set
                if not(value is nothing) then
                  _STZONEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Target Doc-WarhsTask"),  _
         nType("Edm.String"),  _
         tab("Distrib. Route Desc."),  _
         Pos(250),  _
         twodBarcode("WTASKDOCCODE")>  _
        Public Property WTASKDOCCODE() As String
            Get
                return _WTASKDOCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Target Doc-WarhsTask", value, "^.{0,4}$") then Exit Property
                _IsSetWTASKDOCCODE = True
                If loading Then
                  _WTASKDOCCODE = Value
                Else
                    if not _WTASKDOCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WTASKDOCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WTASKDOCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Target Doc. Desc."),  _
         nType("Edm.String"),  _
         tab("Distrib. Route Desc."),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKDOCDES")>  _
        Public Property WTASKDOCDES() As String
            Get
                return _WTASKDOCDES
            End Get
            Set
                if not(value is nothing) then
                  _WTASKDOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Address for Invoice"),  _
         nType("Edm.String"),  _
         tab("Distrib. Route Desc."),  _
         Pos(270),  _
         twodBarcode("IVDCODE")>  _
        Public Property IVDCODE() As String
            Get
                return _IVDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address for Invoice", value, "^.{0,4}$") then Exit Property
                _IsSetIVDCODE = True
                If loading Then
                  _IVDCODE = Value
                Else
                    if not _IVDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address for Inv-Desc"),  _
         nType("Edm.String"),  _
         tab("Distrib. Route Desc."),  _
         Pos(271),  _
         [ReadOnly](true),  _
         twodBarcode("IVDCODEDES")>  _
        Public Property IVDCODEDES() As String
            Get
                return _IVDCODEDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDCODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Link as of Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Distrib. Route Desc."),  _
         Pos(280),  _
         twodBarcode("LFROMDATE")>  _
        Public Property LFROMDATE() As nullable (of DateTimeOffset)
            Get
                return _LFROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Link as of Date", value, "^.*$") then Exit Property
                _IsSetLFROMDATE = True
                If loading Then
                  _LFROMDATE = Value
                Else
                    if not _LFROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LFROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LFROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date of Base Rate"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Distrib. Route Desc."),  _
         Pos(290),  _
         twodBarcode("LBASEDATE")>  _
        Public Property LBASEDATE() As nullable (of DateTimeOffset)
            Get
                return _LBASEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date of Base Rate", value, "^.*$") then Exit Property
                _IsSetLBASEDATE = True
                If loading Then
                  _LBASEDATE = Value
                Else
                    if not _LBASEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LBASEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LBASEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("% of Linkage"),  _
         nType("Edm.Decimal"),  _
         Scale(0),  _
         Precision(16),  _
         tab("% of Linkage"),  _
         Pos(300),  _
         twodBarcode("LPERCENT")>  _
        Public Property LPERCENT() As nullable(of decimal)
            Get
                return _LPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% of Linkage", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLPERCENT = True
                If loading Then
                  _LPERCENT = Value
                Else
                    if not _LPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipper Instructions"),  _
         nType("Edm.String"),  _
         tab("% of Linkage"),  _
         Pos(310),  _
         twodBarcode("SHIPREMARK")>  _
        Public Property SHIPREMARK() As String
            Get
                return _SHIPREMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipper Instructions", value, "^.{0,32}$") then Exit Property
                _IsSetSHIPREMARK = True
                If loading Then
                  _SHIPREMARK = Value
                Else
                    if not _SHIPREMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHIPREMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHIPREMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Latitude"),  _
         nType("Edm.String"),  _
         tab("% of Linkage"),  _
         Pos(315),  _
         twodBarcode("GPSX")>  _
        Public Property GPSX() As String
            Get
                return _GPSX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Latitude", value, "^.{0,20}$") then Exit Property
                _IsSetGPSX = True
                If loading Then
                  _GPSX = Value
                Else
                    if not _GPSX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GPSX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GPSX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Longitude"),  _
         nType("Edm.String"),  _
         tab("% of Linkage"),  _
         Pos(320),  _
         twodBarcode("GPSY")>  _
        Public Property GPSY() As String
            Get
                return _GPSY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Longitude", value, "^.{0,20}$") then Exit Property
                _IsSetGPSY = True
                If loading Then
                  _GPSY = Value
                Else
                    if not _GPSY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GPSY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GPSY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Pick Order"),  _
         nType("Edm.Int64"),  _
         tab("% of Linkage"),  _
         Pos(325),  _
         twodBarcode("PIKORDER")>  _
        Public Property PIKORDER() As nullable (of int64)
            Get
                return _PIKORDER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Pick Order", value, "^[0-9\-]+$") then Exit Property
                _IsSetPIKORDER = True
                If loading Then
                  _PIKORDER = Value
                Else
                    if not _PIKORDER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PIKORDER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PIKORDER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("% of Linkage"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("FOLLOWUPIV")>  _
        Public Property FOLLOWUPIV() As nullable (of int64)
            Get
                return _FOLLOWUPIV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPIV = True
                If loading Then
                  _FOLLOWUPIV = Value
                Else
                    if not _FOLLOWUPIV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPIV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPIV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERITEMS_SUBFORM() As QUERY_ORDERITEMS
            Get
                return _ORDERITEMS_SUBFORM
            End Get
            Set
                _ORDERITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIXSUM_SUBFORM() As QUERY_MATRIXSUM
            Get
                return _MATRIXSUM_SUBFORM
            End Get
            Set
                _MATRIXSUM_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFMODEL_SUBFORM() As QUERY_CPROFMODEL
            Get
                return _CPROFMODEL_SUBFORM
            End Get
            Set
                _CPROFMODEL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERCPROF_SUBFORM() As QUERY_ORDERCPROF
            Get
                return _ORDERCPROF_SUBFORM
            End Get
            Set
                _ORDERCPROF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property GENCUSTNOTES_SUBFORM() As QUERY_GENCUSTNOTES
            Get
                return _GENCUSTNOTES_SUBFORM
            End Get
            Set
                _GENCUSTNOTES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SHIPTO2_SUBFORM() As QUERY_SHIPTO2
            Get
                return _SHIPTO2_SUBFORM
            End Get
            Set
                _SHIPTO2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FUTUREGENDIARY_SUBFORM() As QUERY_FUTUREGENDIARY
            Get
                return _FUTUREGENDIARY_SUBFORM
            End Get
            Set
                _FUTUREGENDIARY_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDER_po_SUBFORM() As QUERY_TRANSORDER_po
            Get
                return _TRANSORDER_po_SUBFORM
            End Get
            Set
                _TRANSORDER_po_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDDOC_H_SUBFORM() As QUERY_ORDDOC_H
            Get
                return _ORDDOC_H_SUBFORM
            End Get
            Set
                _ORDDOC_H_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDFNCBAL_SUBFORM() As QUERY_ORDFNCBAL
            Get
                return _ORDFNCBAL_SUBFORM
            End Get
            Set
                _ORDFNCBAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDINVOICES_SUBFORM() As QUERY_ORDINVOICES
            Get
                return _ORDINVOICES_SUBFORM
            End Get
            Set
                _ORDINVOICES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDINVOICEITEMS_SUBFORM() As QUERY_ORDINVOICEITEMS
            Get
                return _ORDINVOICEITEMS_SUBFORM
            End Get
            Set
                _ORDINVOICEITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDCPROF_SUBFORM() As QUERY_ORDCPROF
            Get
                return _ORDCPROF_SUBFORM
            End Get
            Set
                _ORDCPROF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINKING_SUBFORM() As QUERY_LINKING
            Get
                return _LINKING_SUBFORM
            End Get
            Set
                _LINKING_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDCUSTDISTR_SUBFORM() As QUERY_ORDCUSTDISTR
            Get
                return _ORDCUSTDISTR_SUBFORM
            End Get
            Set
                _ORDCUSTDISTR_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILES_SUBFORM() As QUERY_EXTFILES
            Get
                return _EXTFILES_SUBFORM
            End Get
            Set
                _EXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDCOMITEMS_SUBFORM() As QUERY_ORDCOMITEMS
            Get
                return _ORDCOMITEMS_SUBFORM
            End Get
            Set
                _ORDCOMITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERSCONT_SUBFORM() As QUERY_ORDERSCONT
            Get
                return _ORDERSCONT_SUBFORM
            End Get
            Set
                _ORDERSCONT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORD_CHANGES_LOG_SUBFORM() As QUERY_ORD_CHANGES_LOG
            Get
                return _ORD_CHANGES_LOG_SUBFORM
            End Get
            Set
                _ORD_CHANGES_LOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGO_SUBFORM() As QUERY_CUSTOBLIGO
            Get
                return _CUSTOBLIGO_SUBFORM
            End Get
            Set
                _CUSTOBLIGO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PAYMENTDEF_SUBFORM() As QUERY_PAYMENTDEF
            Get
                return _PAYMENTDEF_SUBFORM
            End Get
            Set
                _PAYMENTDEF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDWTASKS_SUBFORM() As QUERY_ORDWTASKS
            Get
                return _ORDWTASKS_SUBFORM
            End Get
            Set
                _ORDWTASKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SPLITCOSTCENTERS_SUBFORM() As QUERY_SPLITCOSTCENTERS
            Get
                return _SPLITCOSTCENTERS_SUBFORM
            End Get
            Set
                _SPLITCOSTCENTERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERSTEXT_SUBFORM() As QUERY_ORDERSTEXT
            Get
                return _ORDERSTEXT_SUBFORM
            End Get
            Set
                _ORDERSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INTERNALDIALOGTEXT_SUBFORM() As QUERY_INTERNALDIALOGTEXT
            Get
                return _INTERNALDIALOGTEXT_SUBFORM
            End Get
            Set
                _INTERNALDIALOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetCDES then
              if f then
                  jw.WriteRaw(", ""CDES"": ")
              else
                  jw.WriteRaw("""CDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetORDSTATUSDES then
              if f then
                  jw.WriteRaw(", ""ORDSTATUSDES"": ")
              else
                  jw.WriteRaw("""ORDSTATUSDES"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDSTATUSDES)
            end if
            if _IsSetBOOLCLOSED then
              if f then
                  jw.WriteRaw(", ""BOOLCLOSED"": ")
              else
                  jw.WriteRaw("""BOOLCLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOLCLOSED)
            end if
            if _IsSetFORECASTFLAG then
              if f then
                  jw.WriteRaw(", ""FORECASTFLAG"": ")
              else
                  jw.WriteRaw("""FORECASTFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FORECASTFLAG)
            end if
            if _IsSetCPROFNUM then
              if f then
                  jw.WriteRaw(", ""CPROFNUM"": ")
              else
                  jw.WriteRaw("""CPROFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CPROFNUM)
            end if
            if _IsSetPLNAME then
              if f then
                  jw.WriteRaw(", ""PLNAME"": ")
              else
                  jw.WriteRaw("""PLNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLNAME)
            end if
            if _IsSetDEALNAME then
              if f then
                  jw.WriteRaw(", ""DEALNAME"": ")
              else
                  jw.WriteRaw("""DEALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DEALNAME)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetRMADOCNUM then
              if f then
                  jw.WriteRaw(", ""RMADOCNUM"": ")
              else
                  jw.WriteRaw("""RMADOCNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.RMADOCNUM)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetSTCODE then
              if f then
                  jw.WriteRaw(", ""STCODE"": ")
              else
                  jw.WriteRaw("""STCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STCODE)
            end if
            if _IsSetTYPECODE then
              if f then
                  jw.WriteRaw(", ""TYPECODE"": ")
              else
                  jw.WriteRaw("""TYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPECODE)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetMODELNAME then
              if f then
                  jw.WriteRaw(", ""MODELNAME"": ")
              else
                  jw.WriteRaw("""MODELNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MODELNAME)
            end if
            if _IsSetQUANT then
              if f then
                  jw.WriteRaw(", ""QUANT"": ")
              else
                  jw.WriteRaw("""QUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.QUANT)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetLCODE then
              if f then
                  jw.WriteRaw(", ""LCODE"": ")
              else
                  jw.WriteRaw("""LCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.LCODE)
            end if
            if _IsSetLEXCH then
              if f then
                  jw.WriteRaw(", ""LEXCH"": ")
              else
                  jw.WriteRaw("""LEXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCH)
            end if
            if _IsSetLEXCHTOL then
              if f then
                  jw.WriteRaw(", ""LEXCHTOL"": ")
              else
                  jw.WriteRaw("""LEXCHTOL"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCHTOL)
            end if
            if _IsSetLEXCHNEG then
              if f then
                  jw.WriteRaw(", ""LEXCHNEG"": ")
              else
                  jw.WriteRaw("""LEXCHNEG"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCHNEG)
            end if
            if _IsSetADJPRICEFLAG then
              if f then
                  jw.WriteRaw(", ""ADJPRICEFLAG"": ")
              else
                  jw.WriteRaw("""ADJPRICEFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ADJPRICEFLAG)
            end if
            if _IsSetLINKOPTIONS then
              if f then
                  jw.WriteRaw(", ""LINKOPTIONS"": ")
              else
                  jw.WriteRaw("""LINKOPTIONS"": ")
                  f = true
              end if
              jw.WriteValue(me.LINKOPTIONS)
            end if
            if _IsSetPAYCODE then
              if f then
                  jw.WriteRaw(", ""PAYCODE"": ")
              else
                  jw.WriteRaw("""PAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCODE)
            end if
            if _IsSetOBFLAG then
              if f then
                  jw.WriteRaw(", ""OBFLAG"": ")
              else
                  jw.WriteRaw("""OBFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.OBFLAG)
            end if
            if _IsSetADVPERCENT then
              if f then
                  jw.WriteRaw(", ""ADVPERCENT"": ")
              else
                  jw.WriteRaw("""ADVPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.ADVPERCENT)
            end if
            if _IsSetORDREFA then
              if f then
                  jw.WriteRaw(", ""ORDREFA"": ")
              else
                  jw.WriteRaw("""ORDREFA"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDREFA)
            end if
            if _IsSetDOERNAME then
              if f then
                  jw.WriteRaw(", ""DOERNAME"": ")
              else
                  jw.WriteRaw("""DOERNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DOERNAME)
            end if
            if _IsSetDOERNAME2 then
              if f then
                  jw.WriteRaw(", ""DOERNAME2"": ")
              else
                  jw.WriteRaw("""DOERNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.DOERNAME2)
            end if
            if _IsSetDOERNAME3 then
              if f then
                  jw.WriteRaw(", ""DOERNAME3"": ")
              else
                  jw.WriteRaw("""DOERNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.DOERNAME3)
            end if
            if _IsSetSDATE then
              if f then
                  jw.WriteRaw(", ""SDATE"": ")
              else
                  jw.WriteRaw("""SDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.SDATE)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetEDATE then
              if f then
                  jw.WriteRaw(", ""EDATE"": ")
              else
                  jw.WriteRaw("""EDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.EDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetTOWARHSNAME then
              if f then
                  jw.WriteRaw(", ""TOWARHSNAME"": ")
              else
                  jw.WriteRaw("""TOWARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOWARHSNAME)
            end if
            if _IsSetTOLOCNAME then
              if f then
                  jw.WriteRaw(", ""TOLOCNAME"": ")
              else
                  jw.WriteRaw("""TOLOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOLOCNAME)
            end if
            if _IsSetBONUSFLAG then
              if f then
                  jw.WriteRaw(", ""BONUSFLAG"": ")
              else
                  jw.WriteRaw("""BONUSFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.BONUSFLAG)
            end if
            if _IsSetCCNUM then
              if f then
                  jw.WriteRaw(", ""CCNUM"": ")
              else
                  jw.WriteRaw("""CCNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CCNUM)
            end if
            if _IsSetPIKALONEFLAG then
              if f then
                  jw.WriteRaw(", ""PIKALONEFLAG"": ")
              else
                  jw.WriteRaw("""PIKALONEFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.PIKALONEFLAG)
            end if
            if _IsSetSTZONECODE then
              if f then
                  jw.WriteRaw(", ""STZONECODE"": ")
              else
                  jw.WriteRaw("""STZONECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STZONECODE)
            end if
            if _IsSetDISTRLINECODE then
              if f then
                  jw.WriteRaw(", ""DISTRLINECODE"": ")
              else
                  jw.WriteRaw("""DISTRLINECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRLINECODE)
            end if
            if _IsSetWTASKDOCCODE then
              if f then
                  jw.WriteRaw(", ""WTASKDOCCODE"": ")
              else
                  jw.WriteRaw("""WTASKDOCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.WTASKDOCCODE)
            end if
            if _IsSetIVDCODE then
              if f then
                  jw.WriteRaw(", ""IVDCODE"": ")
              else
                  jw.WriteRaw("""IVDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.IVDCODE)
            end if
            if _IsSetLFROMDATE then
              if f then
                  jw.WriteRaw(", ""LFROMDATE"": ")
              else
                  jw.WriteRaw("""LFROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.LFROMDATE)
            end if
            if _IsSetLBASEDATE then
              if f then
                  jw.WriteRaw(", ""LBASEDATE"": ")
              else
                  jw.WriteRaw("""LBASEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.LBASEDATE)
            end if
            if _IsSetLPERCENT then
              if f then
                  jw.WriteRaw(", ""LPERCENT"": ")
              else
                  jw.WriteRaw("""LPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.LPERCENT)
            end if
            if _IsSetSHIPREMARK then
              if f then
                  jw.WriteRaw(", ""SHIPREMARK"": ")
              else
                  jw.WriteRaw("""SHIPREMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.SHIPREMARK)
            end if
            if _IsSetGPSX then
              if f then
                  jw.WriteRaw(", ""GPSX"": ")
              else
                  jw.WriteRaw("""GPSX"": ")
                  f = true
              end if
              jw.WriteValue(me.GPSX)
            end if
            if _IsSetGPSY then
              if f then
                  jw.WriteRaw(", ""GPSY"": ")
              else
                  jw.WriteRaw("""GPSY"": ")
                  f = true
              end if
              jw.WriteValue(me.GPSY)
            end if
            if _IsSetPIKORDER then
              if f then
                  jw.WriteRaw(", ""PIKORDER"": ")
              else
                  jw.WriteRaw("""PIKORDER"": ")
                  f = true
              end if
              jw.WriteValue(me.PIKORDER)
            end if
            if _IsSetFOLLOWUPIV then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPIV"": ")
              else
                  jw.WriteRaw("""FOLLOWUPIV"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPIV)
            end if
            if _ORDERITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERITEMS in _ORDERITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MATRIXSUM_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIXSUM_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIXSUM in _MATRIXSUM_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIXSUM_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFMODEL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFMODEL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFMODEL in _CPROFMODEL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFMODEL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERCPROF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERCPROF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERCPROF in _ORDERCPROF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERCPROF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", GENCUSTNOTES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _GENCUSTNOTES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SHIPTO2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SHIPTO2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _FUTUREGENDIARY_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FUTUREGENDIARY_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FUTUREGENDIARY in _FUTUREGENDIARY_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FUTUREGENDIARY_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDER_po_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDER_po_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDER_po in _TRANSORDER_po_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDER_po_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDDOC_H_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDDOC_H_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDDOC_H in _ORDDOC_H_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDDOC_H_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDFNCBAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDFNCBAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDFNCBAL in _ORDFNCBAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDFNCBAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDINVOICES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDINVOICES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDINVOICES in _ORDINVOICES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDINVOICES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDINVOICEITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDINVOICEITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDINVOICEITEMS in _ORDINVOICEITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDINVOICEITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDCPROF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDCPROF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDCPROF in _ORDCPROF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDCPROF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINKING_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINKING_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINKING in _LINKING_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINKING_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDCUSTDISTR_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDCUSTDISTR_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDCUSTDISTR in _ORDCUSTDISTR_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDCUSTDISTR_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILES in _EXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDCOMITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDCOMITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDCOMITEMS in _ORDCOMITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDCOMITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERSCONT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERSCONT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERSCONT in _ORDERSCONT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERSCONT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORD_CHANGES_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORD_CHANGES_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORD_CHANGES_LOG in _ORD_CHANGES_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORD_CHANGES_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PAYMENTDEF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PAYMENTDEF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PAYMENTDEF in _PAYMENTDEF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PAYMENTDEF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDWTASKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDWTASKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDWTASKS in _ORDWTASKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDWTASKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SPLITCOSTCENTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SPLITCOSTCENTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SPLITCOSTCENTERS in _SPLITCOSTCENTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SPLITCOSTCENTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERSTEXT in _ORDERSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INTERNALDIALOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INTERNALDIALOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CDES")
              .WriteAttributeString("value", me.CDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetORDSTATUSDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDSTATUSDES")
              .WriteAttributeString("value", me.ORDSTATUSDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetBOOLCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOLCLOSED")
              .WriteAttributeString("value", me.BOOLCLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetFORECASTFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FORECASTFLAG")
              .WriteAttributeString("value", me.FORECASTFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCPROFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", me.CPROFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPLNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLNAME")
              .WriteAttributeString("value", me.PLNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetDEALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEALNAME")
              .WriteAttributeString("value", me.DEALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetRMADOCNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RMADOCNUM")
              .WriteAttributeString("value", me.RMADOCNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STCODE")
              .WriteAttributeString("value", me.STCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPECODE")
              .WriteAttributeString("value", me.TYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetMODELNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODELNAME")
              .WriteAttributeString("value", me.MODELNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUANT")
              .WriteAttributeString("value", me.QUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetLCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LCODE")
              .WriteAttributeString("value", me.LCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetLEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCH")
              .WriteAttributeString("value", me.LEXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetLEXCHTOL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCHTOL")
              .WriteAttributeString("value", me.LEXCHTOL)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetLEXCHNEG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCHNEG")
              .WriteAttributeString("value", me.LEXCHNEG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetADJPRICEFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADJPRICEFLAG")
              .WriteAttributeString("value", me.ADJPRICEFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetLINKOPTIONS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINKOPTIONS")
              .WriteAttributeString("value", me.LINKOPTIONS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCODE")
              .WriteAttributeString("value", me.PAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetOBFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OBFLAG")
              .WriteAttributeString("value", me.OBFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetADVPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADVPERCENT")
              .WriteAttributeString("value", me.ADVPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetORDREFA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDREFA")
              .WriteAttributeString("value", me.ORDREFA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOERNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOERNAME")
              .WriteAttributeString("value", me.DOERNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetDOERNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOERNAME2")
              .WriteAttributeString("value", me.DOERNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetDOERNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOERNAME3")
              .WriteAttributeString("value", me.DOERNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SDATE")
              .WriteAttributeString("value", me.SDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EDATE")
              .WriteAttributeString("value", me.EDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetTOWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOWARHSNAME")
              .WriteAttributeString("value", me.TOWARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetTOLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOLOCNAME")
              .WriteAttributeString("value", me.TOLOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetBONUSFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BONUSFLAG")
              .WriteAttributeString("value", me.BONUSFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCCNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CCNUM")
              .WriteAttributeString("value", me.CCNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPIKALONEFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PIKALONEFLAG")
              .WriteAttributeString("value", me.PIKALONEFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTZONECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STZONECODE")
              .WriteAttributeString("value", me.STZONECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetDISTRLINECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRLINECODE")
              .WriteAttributeString("value", me.DISTRLINECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetWTASKDOCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WTASKDOCCODE")
              .WriteAttributeString("value", me.WTASKDOCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetIVDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVDCODE")
              .WriteAttributeString("value", me.IVDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LFROMDATE")
              .WriteAttributeString("value", me.LFROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetLBASEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LBASEDATE")
              .WriteAttributeString("value", me.LBASEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetLPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LPERCENT")
              .WriteAttributeString("value", me.LPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "0")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetSHIPREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHIPREMARK")
              .WriteAttributeString("value", me.SHIPREMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetGPSX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GPSX")
              .WriteAttributeString("value", me.GPSX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGPSY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GPSY")
              .WriteAttributeString("value", me.GPSY)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPIKORDER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PIKORDER")
              .WriteAttributeString("value", me.PIKORDER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPIV")
              .WriteAttributeString("value", me.FOLLOWUPIV)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _ORDERITEMS_SUBFORM.value.count > 0 then
              for each itm as ORDERITEMS in _ORDERITEMS_SUBFORM.Value
                itm.toXML(xw,"ORDERITEMS_SUBFORM")
              next
            end if
            if _MATRIXSUM_SUBFORM.value.count > 0 then
              for each itm as MATRIXSUM in _MATRIXSUM_SUBFORM.Value
                itm.toXML(xw,"MATRIXSUM_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _CPROFMODEL_SUBFORM.value.count > 0 then
              for each itm as CPROFMODEL in _CPROFMODEL_SUBFORM.Value
                itm.toXML(xw,"CPROFMODEL_SUBFORM")
              next
            end if
            if _ORDERCPROF_SUBFORM.value.count > 0 then
              for each itm as ORDERCPROF in _ORDERCPROF_SUBFORM.Value
                itm.toXML(xw,"ORDERCPROF_SUBFORM")
              next
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.Value
                itm.toXML(xw,"GENCUSTNOTES_SUBFORM")
              next
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.Value
                itm.toXML(xw,"SHIPTO2_SUBFORM")
              next
            end if
            if _FUTUREGENDIARY_SUBFORM.value.count > 0 then
              for each itm as FUTUREGENDIARY in _FUTUREGENDIARY_SUBFORM.Value
                itm.toXML(xw,"FUTUREGENDIARY_SUBFORM")
              next
            end if
            if _TRANSORDER_po_SUBFORM.value.count > 0 then
              for each itm as TRANSORDER_po in _TRANSORDER_po_SUBFORM.Value
                itm.toXML(xw,"TRANSORDER_po_SUBFORM")
              next
            end if
            if _ORDDOC_H_SUBFORM.value.count > 0 then
              for each itm as ORDDOC_H in _ORDDOC_H_SUBFORM.Value
                itm.toXML(xw,"ORDDOC_H_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _ORDFNCBAL_SUBFORM.value.count > 0 then
              for each itm as ORDFNCBAL in _ORDFNCBAL_SUBFORM.Value
                itm.toXML(xw,"ORDFNCBAL_SUBFORM")
              next
            end if
            if _ORDINVOICES_SUBFORM.value.count > 0 then
              for each itm as ORDINVOICES in _ORDINVOICES_SUBFORM.Value
                itm.toXML(xw,"ORDINVOICES_SUBFORM")
              next
            end if
            if _ORDINVOICEITEMS_SUBFORM.value.count > 0 then
              for each itm as ORDINVOICEITEMS in _ORDINVOICEITEMS_SUBFORM.Value
                itm.toXML(xw,"ORDINVOICEITEMS_SUBFORM")
              next
            end if
            if _ORDCPROF_SUBFORM.value.count > 0 then
              for each itm as ORDCPROF in _ORDCPROF_SUBFORM.Value
                itm.toXML(xw,"ORDCPROF_SUBFORM")
              next
            end if
            if _LINKING_SUBFORM.value.count > 0 then
              for each itm as LINKING in _LINKING_SUBFORM.Value
                itm.toXML(xw,"LINKING_SUBFORM")
              next
            end if
            if _ORDCUSTDISTR_SUBFORM.value.count > 0 then
              for each itm as ORDCUSTDISTR in _ORDCUSTDISTR_SUBFORM.Value
                itm.toXML(xw,"ORDCUSTDISTR_SUBFORM")
              next
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              for each itm as EXTFILES in _EXTFILES_SUBFORM.Value
                itm.toXML(xw,"EXTFILES_SUBFORM")
              next
            end if
            if _ORDCOMITEMS_SUBFORM.value.count > 0 then
              for each itm as ORDCOMITEMS in _ORDCOMITEMS_SUBFORM.Value
                itm.toXML(xw,"ORDCOMITEMS_SUBFORM")
              next
            end if
            if _ORDERSCONT_SUBFORM.value.count > 0 then
              for each itm as ORDERSCONT in _ORDERSCONT_SUBFORM.Value
                itm.toXML(xw,"ORDERSCONT_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _ORD_CHANGES_LOG_SUBFORM.value.count > 0 then
              for each itm as ORD_CHANGES_LOG in _ORD_CHANGES_LOG_SUBFORM.Value
                itm.toXML(xw,"ORD_CHANGES_LOG_SUBFORM")
              next
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGO_SUBFORM")
              next
            end if
            if _PAYMENTDEF_SUBFORM.value.count > 0 then
              for each itm as PAYMENTDEF in _PAYMENTDEF_SUBFORM.Value
                itm.toXML(xw,"PAYMENTDEF_SUBFORM")
              next
            end if
            if _ORDWTASKS_SUBFORM.value.count > 0 then
              for each itm as ORDWTASKS in _ORDWTASKS_SUBFORM.Value
                itm.toXML(xw,"ORDWTASKS_SUBFORM")
              next
            end if
            if _SPLITCOSTCENTERS_SUBFORM.value.count > 0 then
              for each itm as SPLITCOSTCENTERS in _SPLITCOSTCENTERS_SUBFORM.Value
                itm.toXML(xw,"SPLITCOSTCENTERS_SUBFORM")
              next
            end if
            if _ORDERSTEXT_SUBFORM.value.count > 0 then
              for each itm as ORDERSTEXT in _ORDERSTEXT_SUBFORM.Value
                itm.toXML(xw,"ORDERSTEXT_SUBFORM")
              next
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.Value
                itm.toXML(xw,"INTERNALDIALOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERS = JsonConvert.DeserializeObject(Of ORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CDES = .CDES
                  _NAME = .NAME
                  _POSITIONDES = .POSITIONDES
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _BOOKNUM = .BOOKNUM
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ORDSTATUSDES = .ORDSTATUSDES
                  _BOOLCLOSED = .BOOLCLOSED
                  _BOOLPCLOSED = .BOOLPCLOSED
                  _FORECASTFLAG = .FORECASTFLAG
                  _CPROFNUM = .CPROFNUM
                  _PLNAME = .PLNAME
                  _DEALNAME = .DEALNAME
                  _YOURDEALNAME = .YOURDEALNAME
                  _DETAILS = .DETAILS
                  _STATUSDATE = .STATUSDATE
                  _RMADOCNUM = .RMADOCNUM
                  _DUEDATE = .DUEDATE
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _BRANCHNAME = .BRANCHNAME
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _STCODE = .STCODE
                  _STDES = .STDES
                  _TYPECODE = .TYPECODE
                  _TYPEDES = .TYPEDES
                  _REFERENCE = .REFERENCE
                  _MODELNAME = .MODELNAME
                  _QUANT = .QUANT
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TAXCODE = .TAXCODE
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TOTPURCHASEPRICE = .TOTPURCHASEPRICE
                  _QPROFIT = .QPROFIT
                  _PROFITPERCENT = .PROFITPERCENT
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _LEXCHTOL = .LEXCHTOL
                  _LEXCHNEG = .LEXCHNEG
                  _ADJPRICEFLAG = .ADJPRICEFLAG
                  _ADJPRICEDES = .ADJPRICEDES
                  _LINKOPTIONS = .LINKOPTIONS
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _OBFLAG = .OBFLAG
                  _ADVBAL = .ADVBAL
                  _ADVPERCENT = .ADVPERCENT
                  _ORDREFA = .ORDREFA
                  _DOERNAME = .DOERNAME
                  _DOERNAME2 = .DOERNAME2
                  _DOERNAME3 = .DOERNAME3
                  _SDATE = .SDATE
                  _DAY = .DAY
                  _STIME = .STIME
                  _EDATE = .EDATE
                  _EDAY = .EDAY
                  _ETIME = .ETIME
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _WARHSDES = .WARHSDES
                  _TOWARHSNAME = .TOWARHSNAME
                  _TOLOCNAME = .TOLOCNAME
                  _TOWARHSDES = .TOWARHSDES
                  _EXTFILEFLAG = .EXTFILEFLAG
                  _BONUSFLAG = .BONUSFLAG
                  _CCNUM = .CCNUM
                  _TERRITORYCODE = .TERRITORYCODE
                  _TERRITORYDES = .TERRITORYDES
                  _TOTQUANT = .TOTQUANT
                  _PIKALONEFLAG = .PIKALONEFLAG
                  _STZONECODE = .STZONECODE
                  _DISTRLINECODE = .DISTRLINECODE
                  _DISTRLINEDES = .DISTRLINEDES
                  _STZONEDES = .STZONEDES
                  _WTASKDOCCODE = .WTASKDOCCODE
                  _WTASKDOCDES = .WTASKDOCDES
                  _IVDCODE = .IVDCODE
                  _IVDCODEDES = .IVDCODEDES
                  _LFROMDATE = .LFROMDATE
                  _LBASEDATE = .LBASEDATE
                  _LPERCENT = .LPERCENT
                  _SHIPREMARK = .SHIPREMARK
                  _GPSX = .GPSX
                  _GPSY = .GPSY
                  _PIKORDER = .PIKORDER
                  _FOLLOWUPIV = .FOLLOWUPIV
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_ORDERS
        
        ORDERITEMS = 0
        
        MATRIXSUM = 1
        
        DOCTODOLIST = 2
        
        CPROFMODEL = 3
        
        ORDERCPROF = 4
        
        GENCUSTNOTES = 5
        
        SHIPTO2 = 6
        
        FUTUREGENDIARY = 7
        
        TRANSORDER_po = 8
        
        ORDDOC_H = 9
        
        PROJLINK = 10
        
        ORDFNCBAL = 11
        
        ORDINVOICES = 12
        
        ORDINVOICEITEMS = 13
        
        ORDCPROF = 14
        
        LINKING = 15
        
        ORDCUSTDISTR = 16
        
        EXTFILES = 17
        
        ORDCOMITEMS = 18
        
        ORDERSCONT = 19
        
        DOCTODOLISTLOG = 20
        
        ORD_CHANGES_LOG = 21
        
        CUSTOBLIGO = 22
        
        PAYMENTDEF = 23
        
        ORDWTASKS = 24
        
        SPLITCOSTCENTERS = 25
        
        ORDERSTEXT = 26
        
        INTERNALDIALOGTEXT = 27
    End Enum
    
    <QueryTitle("Order Items")>  _
    Public Class QUERY_ORDERITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERITEMS)
            _Parent = nothing
            _Name = "ORDERITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Total")
            .add(1, "Order Tracing")
            .add(2, "Inventory for Part")
            .add(3, "Part Availability")
            .add(4, "Base Product Availability")
            .add(5, "BOM for Order Item")
            .add(6, "Projects/Accounts")
            .add(7, "Invoices")
            .add(8, "Part Price Options")
            .add(9, "Latest Part Sales to Customer")
            .add(10, "Details of Quote for This Part")
            .add(11, "History of Order Item Status")
            .add(12, "Work Orders for Order Items")
            .add(13, "POs for Ordered Part (From PRs)")
            .add(14, "POs for Order Item (Manual Link)")
            .add(15, "PRs for Order Item")
            .add(16, "Planned Completion by Lot")
            .add(17, "Budgeted vs. Actual")
            .add(18, "Linkage Details")
            .add(19, "Order Items - Remarks")
            .add(20, "Electronic Signature")
            .add(21, "Attributes in Set")
            .add(22, "Parts Compatible w/Set Attribs")
            .add(23, "Parts With Same Attribute Set")
            .add(24, "Lines Awarding the Bonus")
            .add(25, "Bonus Items Awarded for Line")
            .add(26, "Inventory Available to Pick")
            .add(27, "Pick and Doublecheck Tasks")
            .add(28, "Delivery Details for Order Item")
            .add(29, "History of Changes")
            .add(30, "Sales Order Item Changes-OLD")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERITEMS)
            _Parent = Parent
            _name = "ORDERITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Total")
            .add(1, "Order Tracing")
            .add(2, "Inventory for Part")
            .add(3, "Part Availability")
            .add(4, "Base Product Availability")
            .add(5, "BOM for Order Item")
            .add(6, "Projects/Accounts")
            .add(7, "Invoices")
            .add(8, "Part Price Options")
            .add(9, "Latest Part Sales to Customer")
            .add(10, "Details of Quote for This Part")
            .add(11, "History of Order Item Status")
            .add(12, "Work Orders for Order Items")
            .add(13, "POs for Ordered Part (From PRs)")
            .add(14, "POs for Order Item (Manual Link)")
            .add(15, "PRs for Order Item")
            .add(16, "Planned Completion by Lot")
            .add(17, "Budgeted vs. Actual")
            .add(18, "Linkage Details")
            .add(19, "Order Items - Remarks")
            .add(20, "Electronic Signature")
            .add(21, "Attributes in Set")
            .add(22, "Parts Compatible w/Set Attribs")
            .add(23, "Parts With Same Attribute Set")
            .add(24, "Lines Awarding the Bonus")
            .add(25, "Bonus Items Awarded for Line")
            .add(26, "Inventory Available to Pick")
            .add(27, "Pick and Doublecheck Tasks")
            .add(28, "Delivery Details for Order Item")
            .add(29, "History of Changes")
            .add(30, "Sales Order Item Changes-OLD")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERITEMS As ORDERITEMS In JsonConvert.DeserializeObject(Of QUERY_ORDERITEMS)(stream.ReadToEnd).Value
              With _ORDERITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMS = JsonConvert.DeserializeObject(Of ORDERITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERITEMS)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .PURCHASEPRICE = obj.PURCHASEPRICE
                  .ICODE = obj.ICODE
                  .DUEDATE = obj.DUEDATE
                  .CLOSEDBOOL = obj.CLOSEDBOOL
                  .TBALANCE = obj.TBALANCE
                  .PACKBALANCE = obj.PACKBALANCE
                  .PACKED = obj.PACKED
                  .PACKPACKED = obj.PACKPACKED
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .QPRICE = obj.QPRICE
                  .VATPRICE = obj.VATPRICE
                  .QPROFIT = obj.QPROFIT
                  .QPROFITPERCENT = obj.QPROFITPERCENT
                  .PRICEBAL = obj.PRICEBAL
                  .CODE = obj.CODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PURSOURCENAME = obj.PURSOURCENAME
                  .NUMPACK = obj.NUMPACK
                  .PACKCODE = obj.PACKCODE
                  .MODELNAME = obj.MODELNAME
                  .PLANHOURSD = obj.PLANHOURSD
                  .PLANHOURSSUM = obj.PLANHOURSSUM
                  .REVNAME = obj.REVNAME
                  .VATFLAGA = obj.VATFLAGA
                  .COMMISSION = obj.COMMISSION
                  .BARCODE = obj.BARCODE
                  .SERIALNAME = obj.SERIALNAME
                  .CUSTPARTNAME = obj.CUSTPARTNAME
                  .CUSTPARTBARCODE = obj.CUSTPARTBARCODE
                  .YOURORDLINE = obj.YOURORDLINE
                  .QUANT = obj.QUANT
                  .ABALANCE = obj.ABALANCE
                  .PBALANCE = obj.PBALANCE
                  .UNITNAME = obj.UNITNAME
                  .UNSPSCCODE = obj.UNSPSCCODE
                  .UNSPSCDES = obj.UNSPSCDES
                  .CLUSTNAME = obj.CLUSTNAME
                  .MRP = obj.MRP
                  .PDATE = obj.PDATE
                  .PRDATE = obj.PRDATE
                  .CASHFLOWDATE = obj.CASHFLOWDATE
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .BUDCODE = obj.BUDCODE
                  .COSTCNAME = obj.COSTCNAME
                  .EXCH = obj.EXCH
                  .PBONUSFLAG = obj.PBONUSFLAG
                  .ORDISTATUSDES = obj.ORDISTATUSDES
                  .COPYFAVSUPFLAG = obj.COPYFAVSUPFLAG
                  .SUPNAME = obj.SUPNAME
                  .OBFLAG = obj.OBFLAG
                  .PREPAYED = obj.PREPAYED
                  .PAYCUSTNAME = obj.PAYCUSTNAME
                  .PARTTREEFLAG = obj.PARTTREEFLAG
                  .PAYCUSTDES = obj.PAYCUSTDES
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .PROJCOSTFLAG = obj.PROJCOSTFLAG
                  .MPARTNAME = obj.MPARTNAME
                  .MPARTDES = obj.MPARTDES
                  .MMPARTNAME = obj.MMPARTNAME
                  .REMARK1 = obj.REMARK1
                  .REMARK2 = obj.REMARK2
                  .KITNUM = obj.KITNUM
                  .QRANKCODE = obj.QRANKCODE
                  .QRANKDES = obj.QRANKDES
                  .DCMONTHS = obj.DCMONTHS
                  .MINEXPDAYS = obj.MINEXPDAYS
                  .WARHSREMARK = obj.WARHSREMARK
                  .DEALNAME = obj.DEALNAME
                  .DLINE = obj.DLINE
                  .ORDI = obj.ORDI
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERITEMS as ORDERITEMS in value
              If _ORDERITEMS.Equals(trycast(obj,ORDERITEMS)) Then
                  value.remove(_ORDERITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetPURCHASEPRICE As Boolean = Boolean.FalseString
        
        Private _PURCHASEPRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetCLOSEDBOOL As Boolean = Boolean.FalseString
        
        Private _CLOSEDBOOL As String
        
        Private _TBALANCE As Decimal
        
        Private _PACKBALANCE As Long
        
        Private _PACKED As Decimal
        
        Private _PACKPACKED As Long
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetVATPRICE As Boolean = Boolean.FalseString
        
        Private _VATPRICE As Decimal
        
        Private _QPROFIT As Decimal
        
        Private _QPROFITPERCENT As Decimal
        
        Private _PRICEBAL As Decimal
        
        Private _CODE As String
        
        Private _PRSOURCENAME As String
        
        Private _PURSOURCENAME As String
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _IsSetPACKCODE As Boolean = Boolean.FalseString
        
        Private _PACKCODE As String
        
        Private _MODELNAME As String
        
        Private _IsSetPLANHOURSD As Boolean = Boolean.FalseString
        
        Private _PLANHOURSD As Decimal
        
        Private _PLANHOURSSUM As Decimal
        
        Private _IsSetREVNAME As Boolean = Boolean.FalseString
        
        Private _REVNAME As String
        
        Private _IsSetVATFLAGA As Boolean = Boolean.FalseString
        
        Private _VATFLAGA As String
        
        Private _IsSetCOMMISSION As Boolean = Boolean.FalseString
        
        Private _COMMISSION As Decimal
        
        Private _IsSetBARCODE As Boolean = Boolean.FalseString
        
        Private _BARCODE As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetCUSTPARTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTPARTNAME As String
        
        Private _IsSetCUSTPARTBARCODE As Boolean = Boolean.FalseString
        
        Private _CUSTPARTBARCODE As String
        
        Private _IsSetYOURORDLINE As Boolean = Boolean.FalseString
        
        Private _YOURORDLINE As Long
        
        Private _QUANT As Decimal
        
        Private _ABALANCE As Decimal
        
        Private _PBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetUNSPSCCODE As Boolean = Boolean.FalseString
        
        Private _UNSPSCCODE As String
        
        Private _UNSPSCDES As String
        
        Private _IsSetCLUSTNAME As Boolean = Boolean.FalseString
        
        Private _CLUSTNAME As String
        
        Private _IsSetMRP As Boolean = Boolean.FalseString
        
        Private _MRP As String
        
        Private _PDATE As System.DateTimeOffset
        
        Private _IsSetPRDATE As Boolean = Boolean.FalseString
        
        Private _PRDATE As System.DateTimeOffset
        
        Private _IsSetCASHFLOWDATE As Boolean = Boolean.FalseString
        
        Private _CASHFLOWDATE As System.DateTimeOffset
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _PBONUSFLAG As String
        
        Private _IsSetORDISTATUSDES As Boolean = Boolean.FalseString
        
        Private _ORDISTATUSDES As String
        
        Private _IsSetCOPYFAVSUPFLAG As Boolean = Boolean.FalseString
        
        Private _COPYFAVSUPFLAG As String
        
        Private _IsSetSUPNAME As Boolean = Boolean.FalseString
        
        Private _SUPNAME As String
        
        Private _IsSetOBFLAG As Boolean = Boolean.FalseString
        
        Private _OBFLAG As String
        
        Private _IsSetPREPAYED As Boolean = Boolean.FalseString
        
        Private _PREPAYED As String
        
        Private _IsSetPAYCUSTNAME As Boolean = Boolean.FalseString
        
        Private _PAYCUSTNAME As String
        
        Private _IsSetPARTTREEFLAG As Boolean = Boolean.FalseString
        
        Private _PARTTREEFLAG As String
        
        Private _PAYCUSTDES As String
        
        Private _IsSetLCODE As Boolean = Boolean.FalseString
        
        Private _LCODE As String
        
        Private _IsSetLEXCH As Boolean = Boolean.FalseString
        
        Private _LEXCH As Decimal
        
        Private _IsSetPROJCOSTFLAG As Boolean = Boolean.FalseString
        
        Private _PROJCOSTFLAG As String
        
        Private _IsSetMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MPARTNAME As String
        
        Private _MPARTDES As String
        
        Private _IsSetMMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MMPARTNAME As String
        
        Private _IsSetREMARK1 As Boolean = Boolean.FalseString
        
        Private _REMARK1 As String
        
        Private _IsSetREMARK2 As Boolean = Boolean.FalseString
        
        Private _REMARK2 As String
        
        Private _IsSetKITNUM As Boolean = Boolean.FalseString
        
        Private _KITNUM As Long
        
        Private _IsSetQRANKCODE As Boolean = Boolean.FalseString
        
        Private _QRANKCODE As String
        
        Private _QRANKDES As String
        
        Private _IsSetDCMONTHS As Boolean = Boolean.FalseString
        
        Private _DCMONTHS As Long
        
        Private _IsSetMINEXPDAYS As Boolean = Boolean.FalseString
        
        Private _MINEXPDAYS As Long
        
        Private _IsSetWARHSREMARK As Boolean = Boolean.FalseString
        
        Private _WARHSREMARK As String
        
        Private _IsSetDEALNAME As Boolean = Boolean.FalseString
        
        Private _DEALNAME As String
        
        Private _IsSetDLINE As Boolean = Boolean.FalseString
        
        Private _DLINE As Long
        
        Private _IsSetORDI As Boolean = Boolean.FalseString
        
        Private _ORDI As Long
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _ORDERSTOTAL_SUBFORM As QUERY_ORDERSTOTAL
        
        Private _ORDERITEMSTRANS_SUBFORM As QUERY_ORDERITEMSTRANS
        
        Private _PARTBALANCE_SUBFORM As QUERY_PARTBALANCE
        
        Private _LOGCOUNTERS_SUBFORM As QUERY_LOGCOUNTERS
        
        Private _LOGCOUNTERSMPART_SUBFORM As QUERY_LOGCOUNTERSMPART
        
        Private _ORDITREE_SUBFORM As QUERY_ORDITREE
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _ORDERITEMSIV_SUBFORM As QUERY_ORDERITEMSIV
        
        Private _CORDPRICEOPTIONS_SUBFORM As QUERY_CORDPRICEOPTIONS
        
        Private _LASTCUSTPARTSALES_SUBFORM As QUERY_LASTCUSTPARTSALES
        
        Private _ORDICPROF_SUBFORM As QUERY_ORDICPROF
        
        Private _ORDISTATUSLOG_SUBFORM As QUERY_ORDISTATUSLOG
        
        Private _ORDSERIALORDI_SUBFORM As QUERY_ORDSERIALORDI
        
        Private _PRDIORDIORDI_SUBFORM As QUERY_PRDIORDIORDI
        
        Private _PORDIORDI_SUBFORM As QUERY_PORDIORDI
        
        Private _ORDIPRDI_SUBFORM As QUERY_ORDIPRDI
        
        Private _ORDERITEMSLOT_SUBFORM As QUERY_ORDERITEMSLOT
        
        Private _BUDGETREP_SUBFORM As QUERY_BUDGETREP
        
        Private _LINKING_SUBFORM As QUERY_LINKING
        
        Private _ORDERITEMSTEXT_SUBFORM As QUERY_ORDERITEMSTEXT
        
        Private _ORDERITEMSSIGN_SUBFORM As QUERY_ORDERITEMSSIGN
        
        Private _LINEUNSPECS_SUBFORM As QUERY_LINEUNSPECS
        
        Private _LINEUNPARTS_SUBFORM As QUERY_LINEUNPARTS
        
        Private _LINEUNSPSCPARTS_SUBFORM As QUERY_LINEUNSPSCPARTS
        
        Private _ORDIBONUSES_SUBFORM As QUERY_ORDIBONUSES
        
        Private _BONUSESORDI_SUBFORM As QUERY_BONUSESORDI
        
        Private _PICKBAL2_SUBFORM As QUERY_PICKBAL2
        
        Private _ORDIWTASKS_SUBFORM As QUERY_ORDIWTASKS
        
        Private _ORDIDISTR_SUBFORM As QUERY_ORDIDISTR
        
        Private _CHANGESITEMS_LOG_SUBFORM As QUERY_CHANGESITEMS_LOG
        
        Private _ORDI_CHANGE_LOG_SUBFORM As QUERY_ORDI_CHANGE_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Order Total"))
            ChildQuery.add(1, new oNavigation("Order Tracing"))
            ChildQuery.add(2, new oNavigation("Inventory for Part"))
            ChildQuery.add(3, new oNavigation("Part Availability"))
            ChildQuery.add(4, new oNavigation("Base Product Availability"))
            ChildQuery.add(5, new oNavigation("BOM for Order Item"))
            ChildQuery.add(6, new oNavigation("Projects/Accounts"))
            ChildQuery.add(7, new oNavigation("Invoices"))
            ChildQuery.add(8, new oNavigation("Part Price Options"))
            ChildQuery.add(9, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(10, new oNavigation("Details of Quote for This Part"))
            ChildQuery.add(11, new oNavigation("History of Order Item Status"))
            ChildQuery.add(12, new oNavigation("Work Orders for Order Items"))
            ChildQuery.add(13, new oNavigation("POs for Ordered Part (From PRs)"))
            ChildQuery.add(14, new oNavigation("POs for Order Item (Manual Link)"))
            ChildQuery.add(15, new oNavigation("PRs for Order Item"))
            ChildQuery.add(16, new oNavigation("Planned Completion by Lot"))
            ChildQuery.add(17, new oNavigation("Budgeted vs. Actual"))
            ChildQuery.add(18, new oNavigation("Linkage Details"))
            ChildQuery.add(19, new oNavigation("Order Items - Remarks"))
            ChildQuery.add(20, new oNavigation("Electronic Signature"))
            ChildQuery.add(21, new oNavigation("Attributes in Set"))
            ChildQuery.add(22, new oNavigation("Parts Compatible w/Set Attribs"))
            ChildQuery.add(23, new oNavigation("Parts With Same Attribute Set"))
            ChildQuery.add(24, new oNavigation("Lines Awarding the Bonus"))
            ChildQuery.add(25, new oNavigation("Bonus Items Awarded for Line"))
            ChildQuery.add(26, new oNavigation("Inventory Available to Pick"))
            ChildQuery.add(27, new oNavigation("Pick and Doublecheck Tasks"))
            ChildQuery.add(28, new oNavigation("Delivery Details for Order Item"))
            ChildQuery.add(29, new oNavigation("History of Changes"))
            ChildQuery.add(30, new oNavigation("Sales Order Item Changes-OLD"))
            _ORDERSTOTAL_SUBFORM = new QUERY_ORDERSTOTAL(me)
            _ORDERITEMSTRANS_SUBFORM = new QUERY_ORDERITEMSTRANS(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            _LOGCOUNTERSMPART_SUBFORM = new QUERY_LOGCOUNTERSMPART(me)
            _ORDITREE_SUBFORM = new QUERY_ORDITREE(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _ORDERITEMSIV_SUBFORM = new QUERY_ORDERITEMSIV(me)
            _CORDPRICEOPTIONS_SUBFORM = new QUERY_CORDPRICEOPTIONS(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _ORDICPROF_SUBFORM = new QUERY_ORDICPROF(me)
            _ORDISTATUSLOG_SUBFORM = new QUERY_ORDISTATUSLOG(me)
            _ORDSERIALORDI_SUBFORM = new QUERY_ORDSERIALORDI(me)
            _PRDIORDIORDI_SUBFORM = new QUERY_PRDIORDIORDI(me)
            _PORDIORDI_SUBFORM = new QUERY_PORDIORDI(me)
            _ORDIPRDI_SUBFORM = new QUERY_ORDIPRDI(me)
            _ORDERITEMSLOT_SUBFORM = new QUERY_ORDERITEMSLOT(me)
            _BUDGETREP_SUBFORM = new QUERY_BUDGETREP(me)
            _LINKING_SUBFORM = new QUERY_LINKING(me)
            _ORDERITEMSTEXT_SUBFORM = new QUERY_ORDERITEMSTEXT(me)
            _ORDERITEMSSIGN_SUBFORM = new QUERY_ORDERITEMSSIGN(me)
            _LINEUNSPECS_SUBFORM = new QUERY_LINEUNSPECS(me)
            _LINEUNPARTS_SUBFORM = new QUERY_LINEUNPARTS(me)
            _LINEUNSPSCPARTS_SUBFORM = new QUERY_LINEUNSPSCPARTS(me)
            _ORDIBONUSES_SUBFORM = new QUERY_ORDIBONUSES(me)
            _BONUSESORDI_SUBFORM = new QUERY_BONUSESORDI(me)
            _PICKBAL2_SUBFORM = new QUERY_PICKBAL2(me)
            _ORDIWTASKS_SUBFORM = new QUERY_ORDIWTASKS(me)
            _ORDIDISTR_SUBFORM = new QUERY_ORDIDISTR(me)
            _CHANGESITEMS_LOG_SUBFORM = new QUERY_CHANGESITEMS_LOG(me)
            _ORDI_CHANGE_LOG_SUBFORM = new QUERY_ORDI_CHANGE_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_ORDERSTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_ORDERITEMSTRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_LOGCOUNTERSMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_ORDITREE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_ORDERITEMSIV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_CORDPRICEOPTIONS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_ORDICPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_ORDISTATUSLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_ORDSERIALORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_PRDIORDIORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_PORDIORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_ORDIPRDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_ORDERITEMSLOT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_BUDGETREP_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_LINKING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_ORDERITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_ORDERITEMSSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_LINEUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(22)
               .setoDataQuery(_LINEUNPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(23)
               .setoDataQuery(_LINEUNSPSCPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(24)
               .setoDataQuery(_ORDIBONUSES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(25)
               .setoDataQuery(_BONUSESORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(26)
               .setoDataQuery(_PICKBAL2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(27)
               .setoDataQuery(_ORDIWTASKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(28)
               .setoDataQuery(_ORDIDISTR_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(29)
               .setoDataQuery(_CHANGESITEMS_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(30)
               .setoDataQuery(_ORDI_CHANGE_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Order Total"))
            ChildQuery.add(1, new oNavigation("Order Tracing"))
            ChildQuery.add(2, new oNavigation("Inventory for Part"))
            ChildQuery.add(3, new oNavigation("Part Availability"))
            ChildQuery.add(4, new oNavigation("Base Product Availability"))
            ChildQuery.add(5, new oNavigation("BOM for Order Item"))
            ChildQuery.add(6, new oNavigation("Projects/Accounts"))
            ChildQuery.add(7, new oNavigation("Invoices"))
            ChildQuery.add(8, new oNavigation("Part Price Options"))
            ChildQuery.add(9, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(10, new oNavigation("Details of Quote for This Part"))
            ChildQuery.add(11, new oNavigation("History of Order Item Status"))
            ChildQuery.add(12, new oNavigation("Work Orders for Order Items"))
            ChildQuery.add(13, new oNavigation("POs for Ordered Part (From PRs)"))
            ChildQuery.add(14, new oNavigation("POs for Order Item (Manual Link)"))
            ChildQuery.add(15, new oNavigation("PRs for Order Item"))
            ChildQuery.add(16, new oNavigation("Planned Completion by Lot"))
            ChildQuery.add(17, new oNavigation("Budgeted vs. Actual"))
            ChildQuery.add(18, new oNavigation("Linkage Details"))
            ChildQuery.add(19, new oNavigation("Order Items - Remarks"))
            ChildQuery.add(20, new oNavigation("Electronic Signature"))
            ChildQuery.add(21, new oNavigation("Attributes in Set"))
            ChildQuery.add(22, new oNavigation("Parts Compatible w/Set Attribs"))
            ChildQuery.add(23, new oNavigation("Parts With Same Attribute Set"))
            ChildQuery.add(24, new oNavigation("Lines Awarding the Bonus"))
            ChildQuery.add(25, new oNavigation("Bonus Items Awarded for Line"))
            ChildQuery.add(26, new oNavigation("Inventory Available to Pick"))
            ChildQuery.add(27, new oNavigation("Pick and Doublecheck Tasks"))
            ChildQuery.add(28, new oNavigation("Delivery Details for Order Item"))
            ChildQuery.add(29, new oNavigation("History of Changes"))
            ChildQuery.add(30, new oNavigation("Sales Order Item Changes-OLD"))
            _ORDERSTOTAL_SUBFORM = new QUERY_ORDERSTOTAL(me)
            _ORDERITEMSTRANS_SUBFORM = new QUERY_ORDERITEMSTRANS(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            _LOGCOUNTERSMPART_SUBFORM = new QUERY_LOGCOUNTERSMPART(me)
            _ORDITREE_SUBFORM = new QUERY_ORDITREE(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _ORDERITEMSIV_SUBFORM = new QUERY_ORDERITEMSIV(me)
            _CORDPRICEOPTIONS_SUBFORM = new QUERY_CORDPRICEOPTIONS(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _ORDICPROF_SUBFORM = new QUERY_ORDICPROF(me)
            _ORDISTATUSLOG_SUBFORM = new QUERY_ORDISTATUSLOG(me)
            _ORDSERIALORDI_SUBFORM = new QUERY_ORDSERIALORDI(me)
            _PRDIORDIORDI_SUBFORM = new QUERY_PRDIORDIORDI(me)
            _PORDIORDI_SUBFORM = new QUERY_PORDIORDI(me)
            _ORDIPRDI_SUBFORM = new QUERY_ORDIPRDI(me)
            _ORDERITEMSLOT_SUBFORM = new QUERY_ORDERITEMSLOT(me)
            _BUDGETREP_SUBFORM = new QUERY_BUDGETREP(me)
            _LINKING_SUBFORM = new QUERY_LINKING(me)
            _ORDERITEMSTEXT_SUBFORM = new QUERY_ORDERITEMSTEXT(me)
            _ORDERITEMSSIGN_SUBFORM = new QUERY_ORDERITEMSSIGN(me)
            _LINEUNSPECS_SUBFORM = new QUERY_LINEUNSPECS(me)
            _LINEUNPARTS_SUBFORM = new QUERY_LINEUNPARTS(me)
            _LINEUNSPSCPARTS_SUBFORM = new QUERY_LINEUNSPSCPARTS(me)
            _ORDIBONUSES_SUBFORM = new QUERY_ORDIBONUSES(me)
            _BONUSESORDI_SUBFORM = new QUERY_BONUSESORDI(me)
            _PICKBAL2_SUBFORM = new QUERY_PICKBAL2(me)
            _ORDIWTASKS_SUBFORM = new QUERY_ORDIWTASKS(me)
            _ORDIDISTR_SUBFORM = new QUERY_ORDIDISTR(me)
            _CHANGESITEMS_LOG_SUBFORM = new QUERY_CHANGESITEMS_LOG(me)
            _ORDI_CHANGE_LOG_SUBFORM = new QUERY_ORDI_CHANGE_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_ORDERSTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_ORDERITEMSTRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_LOGCOUNTERSMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_ORDITREE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_ORDERITEMSIV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_CORDPRICEOPTIONS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_ORDICPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_ORDISTATUSLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_ORDSERIALORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_PRDIORDIORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_PORDIORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_ORDIPRDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_ORDERITEMSLOT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_BUDGETREP_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_LINKING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_ORDERITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_ORDERITEMSSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_LINEUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(22)
               .setoDataQuery(_LINEUNPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(23)
               .setoDataQuery(_LINEUNSPSCPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(24)
               .setoDataQuery(_ORDIBONUSES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(25)
               .setoDataQuery(_BONUSESORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(26)
               .setoDataQuery(_PICKBAL2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(27)
               .setoDataQuery(_ORDIWTASKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(28)
               .setoDataQuery(_ORDIDISTR_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(29)
               .setoDataQuery(_CHANGESITEMS_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(30)
               .setoDataQuery(_ORDI_CHANGE_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _ORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Order Tracing", _ORDERITEMSTRANS_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(4, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(5, new oNavigation("BOM for Order Item", _ORDITREE_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Invoices", _ORDERITEMSIV_SUBFORM))
                   .add(8, new oNavigation("Part Price Options", _CORDPRICEOPTIONS_SUBFORM))
                   .add(9, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(10, new oNavigation("Details of Quote for This Part", _ORDICPROF_SUBFORM))
                   .add(11, new oNavigation("History of Order Item Status", _ORDISTATUSLOG_SUBFORM))
                   .add(12, new oNavigation("Work Orders for Order Items", _ORDSERIALORDI_SUBFORM))
                   .add(13, new oNavigation("POs for Ordered Part (From PRs)", _PRDIORDIORDI_SUBFORM))
                   .add(14, new oNavigation("POs for Order Item (Manual Link)", _PORDIORDI_SUBFORM))
                   .add(15, new oNavigation("PRs for Order Item", _ORDIPRDI_SUBFORM))
                   .add(16, new oNavigation("Planned Completion by Lot", _ORDERITEMSLOT_SUBFORM))
                   .add(17, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(18, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(19, new oNavigation("Order Items - Remarks", _ORDERITEMSTEXT_SUBFORM))
                   .add(20, new oNavigation("Electronic Signature", _ORDERITEMSSIGN_SUBFORM))
                   .add(21, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(22, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(23, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(24, new oNavigation("Lines Awarding the Bonus", _ORDIBONUSES_SUBFORM))
                   .add(25, new oNavigation("Bonus Items Awarded for Line", _BONUSESORDI_SUBFORM))
                   .add(26, new oNavigation("Inventory Available to Pick", _PICKBAL2_SUBFORM))
                   .add(27, new oNavigation("Pick and Doublecheck Tasks", _ORDIWTASKS_SUBFORM))
                   .add(28, new oNavigation("Delivery Details for Order Item", _ORDIDISTR_SUBFORM))
                   .add(29, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
                   .add(30, new oNavigation("Sales Order Item Changes-OLD", _ORDI_CHANGE_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERITEMS"
                else
                    return "ORDERITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(30),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(50),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(55),  _
         twodBarcode("PURCHASEPRICE")>  _
        Public Property PURCHASEPRICE() As nullable(of decimal)
            Get
                return _PURCHASEPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cost", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPURCHASEPRICE = True
                If loading Then
                  _PURCHASEPRICE = Value
                Else
                    if not _PURCHASEPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PURCHASEPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PURCHASEPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(60),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Part Number"),  _
         Pos(70),  _
         Mandatory(true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Closed?"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(80),  _
         twodBarcode("CLOSEDBOOL")>  _
        Public Property CLOSEDBOOL() As String
            Get
                return _CLOSEDBOOL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Closed?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSEDBOOL = True
                If loading Then
                  _CLOSEDBOOL = Value
                Else
                    if not _CLOSEDBOOL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSEDBOOL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSEDBOOL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Closed?"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Crates)"),  _
         nType("Edm.Int64"),  _
         tab("Closed?"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PACKBALANCE")>  _
        Public Property PACKBALANCE() As nullable (of int64)
            Get
                return _PACKBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _PACKBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty Packed/InternRep"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Closed?"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("PACKED")>  _
        Public Property PACKED() As nullable(of decimal)
            Get
                return _PACKED
            End Get
            Set
                if not(value is nothing) then
                  _PACKED = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty Packed (Crates)"),  _
         nType("Edm.Int64"),  _
         tab("Closed?"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("PACKPACKED")>  _
        Public Property PACKPACKED() As nullable (of int64)
            Get
                return _PACKPACKED
            End Get
            Set
                if not(value is nothing) then
                  _PACKPACKED = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Closed?"),  _
         Pos(140),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount%", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Prc After Disc"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Closed?"),  _
         Pos(145),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Closed?"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Incl. Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Incl. Tax"),  _
         Pos(152),  _
         twodBarcode("VATPRICE")>  _
        Public Property VATPRICE() As nullable(of decimal)
            Get
                return _VATPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Incl. Tax", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetVATPRICE = True
                If loading Then
                  _VATPRICE = Value
                Else
                    if not _VATPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VATPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VATPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Incl. Tax"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFIT")>  _
        Public Property QPROFIT() As nullable(of decimal)
            Get
                return _QPROFIT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(7),  _
         tab("Price Incl. Tax"),  _
         Pos(157),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFITPERCENT")>  _
        Public Property QPROFITPERCENT() As nullable(of decimal)
            Get
                return _QPROFITPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFITPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Incl. Tax"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL")>  _
        Public Property PRICEBAL() As nullable(of decimal)
            Get
                return _PRICEBAL
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Currency"),  _
         nType("Edm.String"),  _
         tab("Price Incl. Tax"),  _
         Pos(162),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Price Incl. Tax"),  _
         Pos(164),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost Source"),  _
         nType("Edm.String"),  _
         tab("Price Incl. Tax"),  _
         Pos(166),  _
         [ReadOnly](true),  _
         twodBarcode("PURSOURCENAME")>  _
        Public Property PURSOURCENAME() As String
            Get
                return _PURSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PURSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Price Incl. Tax"),  _
         Pos(168),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Packing Crates (No.)", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(169),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate Type Code", value, "^.{0,2}$") then Exit Property
                _IsSetPACKCODE = True
                If loading Then
                  _PACKCODE = Value
                Else
                    if not _PACKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if not(value is nothing) then
                  _MODELNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hrs/Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Crate Type Code"),  _
         Pos(172),  _
         twodBarcode("PLANHOURSD")>  _
        Public Property PLANHOURSD() As nullable(of decimal)
            Get
                return _PLANHOURSD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hrs/Unit", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPLANHOURSD = True
                If loading Then
                  _PLANHOURSD = Value
                Else
                    if not _PLANHOURSD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANHOURSD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANHOURSD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Planned Hours"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Crate Type Code"),  _
         Pos(174),  _
         [ReadOnly](true),  _
         twodBarcode("PLANHOURSSUM")>  _
        Public Property PLANHOURSSUM() As nullable(of decimal)
            Get
                return _PLANHOURSSUM
            End Get
            Set
                if not(value is nothing) then
                  _PLANHOURSSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision No."),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(176),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Revision No.", value, "^.{0,10}$") then Exit Property
                _IsSetREVNAME = True
                If loading Then
                  _REVNAME = Value
                Else
                    if not _REVNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REVNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REVNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Taxable?"),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(180),  _
         twodBarcode("VATFLAGA")>  _
        Public Property VATFLAGA() As String
            Get
                return _VATFLAGA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Taxable?", value, "^.{0,1}$") then Exit Property
                _IsSetVATFLAGA = True
                If loading Then
                  _VATFLAGA = Value
                Else
                    if not _VATFLAGA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VATFLAGA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VATFLAGA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Rep's Commission (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Crate Type Code"),  _
         Pos(185),  _
         twodBarcode("COMMISSION")>  _
        Public Property COMMISSION() As nullable(of decimal)
            Get
                return _COMMISSION
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rep's Commission (%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCOMMISSION = True
                If loading Then
                  _COMMISSION = Value
                Else
                    if not _COMMISSION = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COMMISSION", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COMMISSION = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code"),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(188),  _
         twodBarcode("BARCODE")>  _
        Public Property BARCODE() As String
            Get
                return _BARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetBARCODE = True
                If loading Then
                  _BARCODE = Value
                Else
                    if not _BARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot"),  _
         Pos(189),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order/Lot", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust. Part Number"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot"),  _
         Pos(190),  _
         twodBarcode("CUSTPARTNAME")>  _
        Public Property CUSTPARTNAME() As String
            Get
                return _CUSTPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust. Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetCUSTPARTNAME = True
                If loading Then
                  _CUSTPARTNAME = Value
                Else
                    if not _CUSTPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Bar Code"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot"),  _
         Pos(191),  _
         twodBarcode("CUSTPARTBARCODE")>  _
        Public Property CUSTPARTBARCODE() As String
            Get
                return _CUSTPARTBARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTPARTBARCODE = True
                If loading Then
                  _CUSTPARTBARCODE = Value
                Else
                    if not _CUSTPARTBARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTPARTBARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTPARTBARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Order Ln"),  _
         nType("Edm.Int64"),  _
         tab("Work Order/Lot"),  _
         Pos(192),  _
         twodBarcode("YOURORDLINE")>  _
        Public Property YOURORDLINE() As nullable (of int64)
            Get
                return _YOURORDLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust's Order Ln", value, "^[0-9\-]+$") then Exit Property
                _IsSetYOURORDLINE = True
                If loading Then
                  _YOURORDLINE = Value
                Else
                    if not _YOURORDLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("YOURORDLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _YOURORDLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Work Order/Lot"),  _
         Pos(198),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Work Order/Lot"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ABALANCE")>  _
        Public Property ABALANCE() As nullable(of decimal)
            Get
                return _ABALANCE
            End Get
            Set
                if not(value is nothing) then
                  _ABALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planning Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Work Order/Lot"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("PBALANCE")>  _
        Public Property PBALANCE() As nullable(of decimal)
            Get
                return _PBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _PBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Code"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Code"),  _
         Pos(222),  _
         twodBarcode("UNSPSCCODE")>  _
        Public Property UNSPSCCODE() As String
            Get
                return _UNSPSCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attribute Set Code", value, "^.{0,8}$") then Exit Property
                _IsSetUNSPSCCODE = True
                If loading Then
                  _UNSPSCCODE = Value
                Else
                    if not _UNSPSCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UNSPSCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UNSPSCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Desc."),  _
         nType("Edm.String"),  _
         tab("Attribute Set Code"),  _
         Pos(224),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCDES")>  _
        Public Property UNSPSCDES() As String
            Get
                return _UNSPSCDES
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Prod. Planning Group"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Code"),  _
         Pos(230),  _
         twodBarcode("CLUSTNAME")>  _
        Public Property CLUSTNAME() As String
            Get
                return _CLUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Prod. Planning Group", value, "^.{0,12}$") then Exit Property
                _IsSetCLUSTNAME = True
                If loading Then
                  _CLUSTNAME = Value
                Else
                    if not _CLUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("MRP?"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Code"),  _
         Pos(240),  _
         twodBarcode("MRP")>  _
        Public Property MRP() As String
            Get
                return _MRP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("MRP?", value, "^.{0,1}$") then Exit Property
                _IsSetMRP = True
                If loading Then
                  _MRP = Value
                Else
                    if not _MRP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MRP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MRP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Attribute Set Code"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Requested Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Attribute Set Code"),  _
         Pos(260),  _
         twodBarcode("PRDATE")>  _
        Public Property PRDATE() As nullable (of DateTimeOffset)
            Get
                return _PRDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Requested Date", value, "^.*$") then Exit Property
                _IsSetPRDATE = True
                If loading Then
                  _PRDATE = Value
                Else
                    if not _PRDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cash Flow Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Attribute Set Code"),  _
         Pos(265),  _
         twodBarcode("CASHFLOWDATE")>  _
        Public Property CASHFLOWDATE() As nullable (of DateTimeOffset)
            Get
                return _CASHFLOWDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cash Flow Date", value, "^.*$") then Exit Property
                _IsSetCASHFLOWDATE = True
                If loading Then
                  _CASHFLOWDATE = Value
                Else
                    if not _CASHFLOWDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CASHFLOWDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CASHFLOWDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Code"),  _
         Pos(270),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(275),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(280),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(290),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Site Description"),  _
         Pos(300),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bonus Item?"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(305),  _
         [ReadOnly](true),  _
         twodBarcode("PBONUSFLAG")>  _
        Public Property PBONUSFLAG() As String
            Get
                return _PBONUSFLAG
            End Get
            Set
                if not(value is nothing) then
                  _PBONUSFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(312),  _
         twodBarcode("ORDISTATUSDES")>  _
        Public Property ORDISTATUSDES() As String
            Get
                return _ORDISTATUSDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,20}$") then Exit Property
                _IsSetORDISTATUSDES = True
                If loading Then
                  _ORDISTATUSDES = Value
                Else
                    if not _ORDISTATUSDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDISTATUSDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDISTATUSDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Copy Preferred Vend"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(314),  _
         twodBarcode("COPYFAVSUPFLAG")>  _
        Public Property COPYFAVSUPFLAG() As String
            Get
                return _COPYFAVSUPFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Copy Preferred Vend", value, "^.{0,1}$") then Exit Property
                _IsSetCOPYFAVSUPFLAG = True
                If loading Then
                  _COPYFAVSUPFLAG = Value
                Else
                    if not _COPYFAVSUPFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COPYFAVSUPFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COPYFAVSUPFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (Purchasing)"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(315),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (Purchasing)", value, "^.{0,16}$") then Exit Property
                _IsSetSUPNAME = True
                If loading Then
                  _SUPNAME = Value
                Else
                    if not _SUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Consider Credit?"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(320),  _
         twodBarcode("OBFLAG")>  _
        Public Property OBFLAG() As String
            Get
                return _OBFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Consider Credit?", value, "^.{0,1}$") then Exit Property
                _IsSetOBFLAG = True
                If loading Then
                  _OBFLAG = Value
                Else
                    if not _OBFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OBFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OBFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Prepaid?"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(322),  _
         twodBarcode("PREPAYED")>  _
        Public Property PREPAYED() As String
            Get
                return _PREPAYED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Prepaid?", value, "^.{0,1}$") then Exit Property
                _IsSetPREPAYED = True
                If loading Then
                  _PREPAYED = Value
                Else
                    if not _PREPAYED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREPAYED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREPAYED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Customer"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(330),  _
         twodBarcode("PAYCUSTNAME")>  _
        Public Property PAYCUSTNAME() As String
            Get
                return _PAYCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Customer", value, "^.{0,16}$") then Exit Property
                _IsSetPAYCUSTNAME = True
                If loading Then
                  _PAYCUSTNAME = Value
                Else
                    if not _PAYCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Child Part Total?"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(332),  _
         twodBarcode("PARTTREEFLAG")>  _
        Public Property PARTTREEFLAG() As String
            Get
                return _PARTTREEFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Part Total?", value, "^.{0,1}$") then Exit Property
                _IsSetPARTTREEFLAG = True
                If loading Then
                  _PARTTREEFLAG = Value
                Else
                    if not _PARTTREEFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTTREEFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTTREEFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(340),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCUSTDES")>  _
        Public Property PAYCUSTDES() As String
            Get
                return _PAYCUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYCUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(350),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linked Currency", value, "^.{0,3}$") then Exit Property
                _IsSetLCODE = True
                If loading Then
                  _LCODE = Value
                Else
                    if not _LCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Consider Credit?"),  _
         Pos(360),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLEXCH = True
                If loading Then
                  _LEXCH = Value
                Else
                    if not _LEXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Incl. in Proj. Cost?"),  _
         nType("Edm.String"),  _
         tab("Consider Credit?"),  _
         Pos(370),  _
         twodBarcode("PROJCOSTFLAG")>  _
        Public Property PROJCOSTFLAG() As String
            Get
                return _PROJCOSTFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Incl. in Proj. Cost?", value, "^.{0,1}$") then Exit Property
                _IsSetPROJCOSTFLAG = True
                If loading Then
                  _PROJCOSTFLAG = Value
                Else
                    if not _PROJCOSTFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROJCOSTFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROJCOSTFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(400),  _
         twodBarcode("MPARTNAME")>  _
        Public Property MPARTNAME() As String
            Get
                return _MPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetMPARTNAME = True
                If loading Then
                  _MPARTNAME = Value
                Else
                    if not _MPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(401),  _
         [ReadOnly](true),  _
         twodBarcode("MPARTDES")>  _
        Public Property MPARTDES() As String
            Get
                return _MPARTDES
            End Get
            Set
                if not(value is nothing) then
                  _MPARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part by Base Product"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(402),  _
         twodBarcode("MMPARTNAME")>  _
        Public Property MMPARTNAME() As String
            Get
                return _MMPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part by Base Product", value, "^.{0,15}$") then Exit Property
                _IsSetMMPARTNAME = True
                If loading Then
                  _MMPARTNAME = Value
                Else
                    if not _MMPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MMPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MMPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(420),  _
         twodBarcode("REMARK1")>  _
        Public Property REMARK1() As String
            Get
                return _REMARK1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,24}$") then Exit Property
                _IsSetREMARK1 = True
                If loading Then
                  _REMARK1 = Value
                Else
                    if not _REMARK1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark 2"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(430),  _
         twodBarcode("REMARK2")>  _
        Public Property REMARK2() As String
            Get
                return _REMARK2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark 2", value, "^.{0,24}$") then Exit Property
                _IsSetREMARK2 = True
                If loading Then
                  _REMARK2 = Value
                Else
                    if not _REMARK2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Kit Number"),  _
         nType("Edm.Int64"),  _
         tab("Base Product No."),  _
         Pos(435),  _
         twodBarcode("KITNUM")>  _
        Public Property KITNUM() As nullable (of int64)
            Get
                return _KITNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Kit Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetKITNUM = True
                If loading Then
                  _KITNUM = Value
                Else
                    if not _KITNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KITNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KITNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quality Code"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(440),  _
         twodBarcode("QRANKCODE")>  _
        Public Property QRANKCODE() As String
            Get
                return _QRANKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quality Code", value, "^.{0,4}$") then Exit Property
                _IsSetQRANKCODE = True
                If loading Then
                  _QRANKCODE = Value
                Else
                    if not _QRANKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QRANKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QRANKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quality Description"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(445),  _
         [ReadOnly](true),  _
         twodBarcode("QRANKDES")>  _
        Public Property QRANKDES() As String
            Get
                return _QRANKDES
            End Get
            Set
                if not(value is nothing) then
                  _QRANKDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Allowed Inv Age-Mos."),  _
         nType("Edm.Int64"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(450),  _
         twodBarcode("DCMONTHS")>  _
        Public Property DCMONTHS() As nullable (of int64)
            Get
                return _DCMONTHS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Allowed Inv Age-Mos.", value, "^[0-9\-]+$") then Exit Property
                _IsSetDCMONTHS = True
                If loading Then
                  _DCMONTHS = Value
                Else
                    if not _DCMONTHS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCMONTHS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCMONTHS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Days Until Expirat'n"),  _
         nType("Edm.Int64"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(452),  _
         twodBarcode("MINEXPDAYS")>  _
        Public Property MINEXPDAYS() As nullable (of int64)
            Get
                return _MINEXPDAYS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Days Until Expirat'n", value, "^[0-9\-]+$") then Exit Property
                _IsSetMINEXPDAYS = True
                If loading Then
                  _MINEXPDAYS = Value
                Else
                    if not _MINEXPDAYS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MINEXPDAYS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MINEXPDAYS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Remarks"),  _
         nType("Edm.String"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(455),  _
         twodBarcode("WARHSREMARK")>  _
        Public Property WARHSREMARK() As String
            Get
                return _WARHSREMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Warehouse Remarks", value, "^.{0,24}$") then Exit Property
                _IsSetWARHSREMARK = True
                If loading Then
                  _WARHSREMARK = Value
                Else
                    if not _WARHSREMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSREMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSREMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Blanket Order"),  _
         nType("Edm.String"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(456),  _
         twodBarcode("DEALNAME")>  _
        Public Property DEALNAME() As String
            Get
                return _DEALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Blanket Order", value, "^.{0,16}$") then Exit Property
                _IsSetDEALNAME = True
                If loading Then
                  _DEALNAME = Value
                Else
                    if not _DEALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("DLINE"),  _
         nType("Edm.Int64"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(0),  _
         twodBarcode("DLINE")>  _
        Public Property DLINE() As nullable (of int64)
            Get
                return _DLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetDLINE = True
                If loading Then
                  _DLINE = Value
                Else
                    if not _DLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(1),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line Item (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORDI = True
                If loading Then
                  _ORDI = Value
                Else
                    if not _ORDI = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDI", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDI = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Allowed Inv Age-Mos."),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERSTOTAL_SUBFORM() As QUERY_ORDERSTOTAL
            Get
                return _ORDERSTOTAL_SUBFORM
            End Get
            Set
                _ORDERSTOTAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERITEMSTRANS_SUBFORM() As QUERY_ORDERITEMSTRANS
            Get
                return _ORDERITEMSTRANS_SUBFORM
            End Get
            Set
                _ORDERITEMSTRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTBALANCE_SUBFORM() As QUERY_PARTBALANCE
            Get
                return _PARTBALANCE_SUBFORM
            End Get
            Set
                _PARTBALANCE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERS_SUBFORM() As QUERY_LOGCOUNTERS
            Get
                return _LOGCOUNTERS_SUBFORM
            End Get
            Set
                _LOGCOUNTERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERSMPART_SUBFORM() As QUERY_LOGCOUNTERSMPART
            Get
                return _LOGCOUNTERSMPART_SUBFORM
            End Get
            Set
                _LOGCOUNTERSMPART_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDITREE_SUBFORM() As QUERY_ORDITREE
            Get
                return _ORDITREE_SUBFORM
            End Get
            Set
                _ORDITREE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERITEMSIV_SUBFORM() As QUERY_ORDERITEMSIV
            Get
                return _ORDERITEMSIV_SUBFORM
            End Get
            Set
                _ORDERITEMSIV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CORDPRICEOPTIONS_SUBFORM() As QUERY_CORDPRICEOPTIONS
            Get
                return _CORDPRICEOPTIONS_SUBFORM
            End Get
            Set
                _CORDPRICEOPTIONS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LASTCUSTPARTSALES_SUBFORM() As QUERY_LASTCUSTPARTSALES
            Get
                return _LASTCUSTPARTSALES_SUBFORM
            End Get
            Set
                _LASTCUSTPARTSALES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDICPROF_SUBFORM() As QUERY_ORDICPROF
            Get
                return _ORDICPROF_SUBFORM
            End Get
            Set
                _ORDICPROF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDISTATUSLOG_SUBFORM() As QUERY_ORDISTATUSLOG
            Get
                return _ORDISTATUSLOG_SUBFORM
            End Get
            Set
                _ORDISTATUSLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDSERIALORDI_SUBFORM() As QUERY_ORDSERIALORDI
            Get
                return _ORDSERIALORDI_SUBFORM
            End Get
            Set
                _ORDSERIALORDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PRDIORDIORDI_SUBFORM() As QUERY_PRDIORDIORDI
            Get
                return _PRDIORDIORDI_SUBFORM
            End Get
            Set
                _PRDIORDIORDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDIORDI_SUBFORM() As QUERY_PORDIORDI
            Get
                return _PORDIORDI_SUBFORM
            End Get
            Set
                _PORDIORDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDIPRDI_SUBFORM() As QUERY_ORDIPRDI
            Get
                return _ORDIPRDI_SUBFORM
            End Get
            Set
                _ORDIPRDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERITEMSLOT_SUBFORM() As QUERY_ORDERITEMSLOT
            Get
                return _ORDERITEMSLOT_SUBFORM
            End Get
            Set
                _ORDERITEMSLOT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property BUDGETREP_SUBFORM() As QUERY_BUDGETREP
            Get
                return _BUDGETREP_SUBFORM
            End Get
            Set
                _BUDGETREP_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINKING_SUBFORM() As QUERY_LINKING
            Get
                return _LINKING_SUBFORM
            End Get
            Set
                _LINKING_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERITEMSTEXT_SUBFORM() As QUERY_ORDERITEMSTEXT
            Get
                return _ORDERITEMSTEXT_SUBFORM
            End Get
            Set
                _ORDERITEMSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDERITEMSSIGN_SUBFORM() As QUERY_ORDERITEMSSIGN
            Get
                return _ORDERITEMSSIGN_SUBFORM
            End Get
            Set
                _ORDERITEMSSIGN_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINEUNSPECS_SUBFORM() As QUERY_LINEUNSPECS
            Get
                return _LINEUNSPECS_SUBFORM
            End Get
            Set
                _LINEUNSPECS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINEUNPARTS_SUBFORM() As QUERY_LINEUNPARTS
            Get
                return _LINEUNPARTS_SUBFORM
            End Get
            Set
                _LINEUNPARTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINEUNSPSCPARTS_SUBFORM() As QUERY_LINEUNSPSCPARTS
            Get
                return _LINEUNSPSCPARTS_SUBFORM
            End Get
            Set
                _LINEUNSPSCPARTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDIBONUSES_SUBFORM() As QUERY_ORDIBONUSES
            Get
                return _ORDIBONUSES_SUBFORM
            End Get
            Set
                _ORDIBONUSES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property BONUSESORDI_SUBFORM() As QUERY_BONUSESORDI
            Get
                return _BONUSESORDI_SUBFORM
            End Get
            Set
                _BONUSESORDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PICKBAL2_SUBFORM() As QUERY_PICKBAL2
            Get
                return _PICKBAL2_SUBFORM
            End Get
            Set
                _PICKBAL2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDIWTASKS_SUBFORM() As QUERY_ORDIWTASKS
            Get
                return _ORDIWTASKS_SUBFORM
            End Get
            Set
                _ORDIWTASKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDIDISTR_SUBFORM() As QUERY_ORDIDISTR
            Get
                return _ORDIDISTR_SUBFORM
            End Get
            Set
                _ORDIDISTR_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CHANGESITEMS_LOG_SUBFORM() As QUERY_CHANGESITEMS_LOG
            Get
                return _CHANGESITEMS_LOG_SUBFORM
            End Get
            Set
                _CHANGESITEMS_LOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDI_CHANGE_LOG_SUBFORM() As QUERY_ORDI_CHANGE_LOG
            Get
                return _ORDI_CHANGE_LOG_SUBFORM
            End Get
            Set
                _ORDI_CHANGE_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetPURCHASEPRICE then
              if f then
                  jw.WriteRaw(", ""PURCHASEPRICE"": ")
              else
                  jw.WriteRaw("""PURCHASEPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PURCHASEPRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetCLOSEDBOOL then
              if f then
                  jw.WriteRaw(", ""CLOSEDBOOL"": ")
              else
                  jw.WriteRaw("""CLOSEDBOOL"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSEDBOOL)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetVATPRICE then
              if f then
                  jw.WriteRaw(", ""VATPRICE"": ")
              else
                  jw.WriteRaw("""VATPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.VATPRICE)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetPACKCODE then
              if f then
                  jw.WriteRaw(", ""PACKCODE"": ")
              else
                  jw.WriteRaw("""PACKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PACKCODE)
            end if
            if _IsSetPLANHOURSD then
              if f then
                  jw.WriteRaw(", ""PLANHOURSD"": ")
              else
                  jw.WriteRaw("""PLANHOURSD"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANHOURSD)
            end if
            if _IsSetREVNAME then
              if f then
                  jw.WriteRaw(", ""REVNAME"": ")
              else
                  jw.WriteRaw("""REVNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.REVNAME)
            end if
            if _IsSetVATFLAGA then
              if f then
                  jw.WriteRaw(", ""VATFLAGA"": ")
              else
                  jw.WriteRaw("""VATFLAGA"": ")
                  f = true
              end if
              jw.WriteValue(me.VATFLAGA)
            end if
            if _IsSetCOMMISSION then
              if f then
                  jw.WriteRaw(", ""COMMISSION"": ")
              else
                  jw.WriteRaw("""COMMISSION"": ")
                  f = true
              end if
              jw.WriteValue(me.COMMISSION)
            end if
            if _IsSetBARCODE then
              if f then
                  jw.WriteRaw(", ""BARCODE"": ")
              else
                  jw.WriteRaw("""BARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BARCODE)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetCUSTPARTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTPARTNAME"": ")
              else
                  jw.WriteRaw("""CUSTPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTPARTNAME)
            end if
            if _IsSetCUSTPARTBARCODE then
              if f then
                  jw.WriteRaw(", ""CUSTPARTBARCODE"": ")
              else
                  jw.WriteRaw("""CUSTPARTBARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTPARTBARCODE)
            end if
            if _IsSetYOURORDLINE then
              if f then
                  jw.WriteRaw(", ""YOURORDLINE"": ")
              else
                  jw.WriteRaw("""YOURORDLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.YOURORDLINE)
            end if
            if _IsSetUNSPSCCODE then
              if f then
                  jw.WriteRaw(", ""UNSPSCCODE"": ")
              else
                  jw.WriteRaw("""UNSPSCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.UNSPSCCODE)
            end if
            if _IsSetCLUSTNAME then
              if f then
                  jw.WriteRaw(", ""CLUSTNAME"": ")
              else
                  jw.WriteRaw("""CLUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CLUSTNAME)
            end if
            if _IsSetMRP then
              if f then
                  jw.WriteRaw(", ""MRP"": ")
              else
                  jw.WriteRaw("""MRP"": ")
                  f = true
              end if
              jw.WriteValue(me.MRP)
            end if
            if _IsSetPRDATE then
              if f then
                  jw.WriteRaw(", ""PRDATE"": ")
              else
                  jw.WriteRaw("""PRDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRDATE)
            end if
            if _IsSetCASHFLOWDATE then
              if f then
                  jw.WriteRaw(", ""CASHFLOWDATE"": ")
              else
                  jw.WriteRaw("""CASHFLOWDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CASHFLOWDATE)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetORDISTATUSDES then
              if f then
                  jw.WriteRaw(", ""ORDISTATUSDES"": ")
              else
                  jw.WriteRaw("""ORDISTATUSDES"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDISTATUSDES)
            end if
            if _IsSetCOPYFAVSUPFLAG then
              if f then
                  jw.WriteRaw(", ""COPYFAVSUPFLAG"": ")
              else
                  jw.WriteRaw("""COPYFAVSUPFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.COPYFAVSUPFLAG)
            end if
            if _IsSetSUPNAME then
              if f then
                  jw.WriteRaw(", ""SUPNAME"": ")
              else
                  jw.WriteRaw("""SUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPNAME)
            end if
            if _IsSetOBFLAG then
              if f then
                  jw.WriteRaw(", ""OBFLAG"": ")
              else
                  jw.WriteRaw("""OBFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.OBFLAG)
            end if
            if _IsSetPREPAYED then
              if f then
                  jw.WriteRaw(", ""PREPAYED"": ")
              else
                  jw.WriteRaw("""PREPAYED"": ")
                  f = true
              end if
              jw.WriteValue(me.PREPAYED)
            end if
            if _IsSetPAYCUSTNAME then
              if f then
                  jw.WriteRaw(", ""PAYCUSTNAME"": ")
              else
                  jw.WriteRaw("""PAYCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCUSTNAME)
            end if
            if _IsSetPARTTREEFLAG then
              if f then
                  jw.WriteRaw(", ""PARTTREEFLAG"": ")
              else
                  jw.WriteRaw("""PARTTREEFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTTREEFLAG)
            end if
            if _IsSetLCODE then
              if f then
                  jw.WriteRaw(", ""LCODE"": ")
              else
                  jw.WriteRaw("""LCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.LCODE)
            end if
            if _IsSetLEXCH then
              if f then
                  jw.WriteRaw(", ""LEXCH"": ")
              else
                  jw.WriteRaw("""LEXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCH)
            end if
            if _IsSetPROJCOSTFLAG then
              if f then
                  jw.WriteRaw(", ""PROJCOSTFLAG"": ")
              else
                  jw.WriteRaw("""PROJCOSTFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.PROJCOSTFLAG)
            end if
            if _IsSetMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MPARTNAME"": ")
              else
                  jw.WriteRaw("""MPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MPARTNAME)
            end if
            if _IsSetMMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MMPARTNAME"": ")
              else
                  jw.WriteRaw("""MMPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MMPARTNAME)
            end if
            if _IsSetREMARK1 then
              if f then
                  jw.WriteRaw(", ""REMARK1"": ")
              else
                  jw.WriteRaw("""REMARK1"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK1)
            end if
            if _IsSetREMARK2 then
              if f then
                  jw.WriteRaw(", ""REMARK2"": ")
              else
                  jw.WriteRaw("""REMARK2"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK2)
            end if
            if _IsSetKITNUM then
              if f then
                  jw.WriteRaw(", ""KITNUM"": ")
              else
                  jw.WriteRaw("""KITNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.KITNUM)
            end if
            if _IsSetQRANKCODE then
              if f then
                  jw.WriteRaw(", ""QRANKCODE"": ")
              else
                  jw.WriteRaw("""QRANKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QRANKCODE)
            end if
            if _IsSetDCMONTHS then
              if f then
                  jw.WriteRaw(", ""DCMONTHS"": ")
              else
                  jw.WriteRaw("""DCMONTHS"": ")
                  f = true
              end if
              jw.WriteValue(me.DCMONTHS)
            end if
            if _IsSetMINEXPDAYS then
              if f then
                  jw.WriteRaw(", ""MINEXPDAYS"": ")
              else
                  jw.WriteRaw("""MINEXPDAYS"": ")
                  f = true
              end if
              jw.WriteValue(me.MINEXPDAYS)
            end if
            if _IsSetWARHSREMARK then
              if f then
                  jw.WriteRaw(", ""WARHSREMARK"": ")
              else
                  jw.WriteRaw("""WARHSREMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSREMARK)
            end if
            if _IsSetDEALNAME then
              if f then
                  jw.WriteRaw(", ""DEALNAME"": ")
              else
                  jw.WriteRaw("""DEALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DEALNAME)
            end if
            if _IsSetDLINE then
              if f then
                  jw.WriteRaw(", ""DLINE"": ")
              else
                  jw.WriteRaw("""DLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.DLINE)
            end if
            if _IsSetORDI then
              if f then
                  jw.WriteRaw(", ""ORDI"": ")
              else
                  jw.WriteRaw("""ORDI"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDI)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _ORDERSTOTAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERSTOTAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERSTOTAL in _ORDERSTOTAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERSTOTAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERITEMSTRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERITEMSTRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERITEMSTRANS in _ORDERITEMSTRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERITEMSTRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTBALANCE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTBALANCE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LOGCOUNTERSMPART_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERSMPART_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERSMPART in _LOGCOUNTERSMPART_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERSMPART_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDITREE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDITREE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDITREE in _ORDITREE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDITREE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERITEMSIV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERITEMSIV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERITEMSIV in _ORDERITEMSIV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERITEMSIV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CORDPRICEOPTIONS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CORDPRICEOPTIONS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CORDPRICEOPTIONS in _CORDPRICEOPTIONS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CORDPRICEOPTIONS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LASTCUSTPARTSALES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LASTCUSTPARTSALES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDICPROF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDICPROF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDICPROF in _ORDICPROF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDICPROF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDISTATUSLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDISTATUSLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDISTATUSLOG in _ORDISTATUSLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDISTATUSLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDSERIALORDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDSERIALORDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDSERIALORDI in _ORDSERIALORDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDSERIALORDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PRDIORDIORDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PRDIORDIORDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PRDIORDIORDI in _PRDIORDIORDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PRDIORDIORDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDIORDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDIORDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDIORDI in _PORDIORDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDIORDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDIPRDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDIPRDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDIPRDI in _ORDIPRDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDIPRDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERITEMSLOT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERITEMSLOT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERITEMSLOT in _ORDERITEMSLOT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERITEMSLOT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _BUDGETREP_SUBFORM.value.count > 0 then
              jw.WriteRaw(", BUDGETREP_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as BUDGETREP in _BUDGETREP_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _BUDGETREP_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINKING_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINKING_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINKING in _LINKING_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINKING_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERITEMSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERITEMSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERITEMSTEXT in _ORDERITEMSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERITEMSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDERITEMSSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDERITEMSSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDERITEMSSIGN in _ORDERITEMSSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDERITEMSSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINEUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINEUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINEUNSPECS in _LINEUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINEUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINEUNPARTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINEUNPARTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINEUNPARTS in _LINEUNPARTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINEUNPARTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINEUNSPSCPARTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINEUNSPSCPARTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINEUNSPSCPARTS in _LINEUNSPSCPARTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINEUNSPSCPARTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDIBONUSES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDIBONUSES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDIBONUSES in _ORDIBONUSES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDIBONUSES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _BONUSESORDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", BONUSESORDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as BONUSESORDI in _BONUSESORDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _BONUSESORDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PICKBAL2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PICKBAL2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PICKBAL2 in _PICKBAL2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PICKBAL2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDIWTASKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDIWTASKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDIWTASKS in _ORDIWTASKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDIWTASKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDIDISTR_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDIDISTR_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDIDISTR in _ORDIDISTR_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDIDISTR_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CHANGESITEMS_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CHANGESITEMS_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CHANGESITEMS_LOG in _CHANGESITEMS_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CHANGESITEMS_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDI_CHANGE_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDI_CHANGE_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDI_CHANGE_LOG in _ORDI_CHANGE_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDI_CHANGE_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPURCHASEPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PURCHASEPRICE")
              .WriteAttributeString("value", me.PURCHASEPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetCLOSEDBOOL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSEDBOOL")
              .WriteAttributeString("value", me.CLOSEDBOOL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetVATPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VATPRICE")
              .WriteAttributeString("value", me.VATPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPACKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACKCODE")
              .WriteAttributeString("value", me.PACKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetPLANHOURSD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANHOURSD")
              .WriteAttributeString("value", me.PLANHOURSD)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetREVNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REVNAME")
              .WriteAttributeString("value", me.REVNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetVATFLAGA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VATFLAGA")
              .WriteAttributeString("value", me.VATFLAGA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCOMMISSION then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COMMISSION")
              .WriteAttributeString("value", me.COMMISSION)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BARCODE")
              .WriteAttributeString("value", me.BARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetCUSTPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTPARTNAME")
              .WriteAttributeString("value", me.CUSTPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetCUSTPARTBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTPARTBARCODE")
              .WriteAttributeString("value", me.CUSTPARTBARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetYOURORDLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "YOURORDLINE")
              .WriteAttributeString("value", me.YOURORDLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUNSPSCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UNSPSCCODE")
              .WriteAttributeString("value", me.UNSPSCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCLUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLUSTNAME")
              .WriteAttributeString("value", me.CLUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetMRP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MRP")
              .WriteAttributeString("value", me.MRP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPRDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRDATE")
              .WriteAttributeString("value", me.PRDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetCASHFLOWDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CASHFLOWDATE")
              .WriteAttributeString("value", me.CASHFLOWDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetORDISTATUSDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDISTATUSDES")
              .WriteAttributeString("value", me.ORDISTATUSDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCOPYFAVSUPFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COPYFAVSUPFLAG")
              .WriteAttributeString("value", me.COPYFAVSUPFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPNAME")
              .WriteAttributeString("value", me.SUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetOBFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OBFLAG")
              .WriteAttributeString("value", me.OBFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPREPAYED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREPAYED")
              .WriteAttributeString("value", me.PREPAYED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPAYCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCUSTNAME")
              .WriteAttributeString("value", me.PAYCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPARTTREEFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTTREEFLAG")
              .WriteAttributeString("value", me.PARTTREEFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetLCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LCODE")
              .WriteAttributeString("value", me.LCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetLEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCH")
              .WriteAttributeString("value", me.LEXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPROJCOSTFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROJCOSTFLAG")
              .WriteAttributeString("value", me.PROJCOSTFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MPARTNAME")
              .WriteAttributeString("value", me.MPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetMMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MMPARTNAME")
              .WriteAttributeString("value", me.MMPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetREMARK1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK1")
              .WriteAttributeString("value", me.REMARK1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetREMARK2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK2")
              .WriteAttributeString("value", me.REMARK2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetKITNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KITNUM")
              .WriteAttributeString("value", me.KITNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQRANKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QRANKCODE")
              .WriteAttributeString("value", me.QRANKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetDCMONTHS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCMONTHS")
              .WriteAttributeString("value", me.DCMONTHS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetMINEXPDAYS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MINEXPDAYS")
              .WriteAttributeString("value", me.MINEXPDAYS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetWARHSREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSREMARK")
              .WriteAttributeString("value", me.WARHSREMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetDEALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEALNAME")
              .WriteAttributeString("value", me.DEALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DLINE")
              .WriteAttributeString("value", me.DLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetORDI then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", me.ORDI)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _ORDERSTOTAL_SUBFORM.value.count > 0 then
              for each itm as ORDERSTOTAL in _ORDERSTOTAL_SUBFORM.Value
                itm.toXML(xw,"ORDERSTOTAL_SUBFORM")
              next
            end if
            if _ORDERITEMSTRANS_SUBFORM.value.count > 0 then
              for each itm as ORDERITEMSTRANS in _ORDERITEMSTRANS_SUBFORM.Value
                itm.toXML(xw,"ORDERITEMSTRANS_SUBFORM")
              next
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.Value
                itm.toXML(xw,"PARTBALANCE_SUBFORM")
              next
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERS_SUBFORM")
              next
            end if
            if _LOGCOUNTERSMPART_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERSMPART in _LOGCOUNTERSMPART_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERSMPART_SUBFORM")
              next
            end if
            if _ORDITREE_SUBFORM.value.count > 0 then
              for each itm as ORDITREE in _ORDITREE_SUBFORM.Value
                itm.toXML(xw,"ORDITREE_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _ORDERITEMSIV_SUBFORM.value.count > 0 then
              for each itm as ORDERITEMSIV in _ORDERITEMSIV_SUBFORM.Value
                itm.toXML(xw,"ORDERITEMSIV_SUBFORM")
              next
            end if
            if _CORDPRICEOPTIONS_SUBFORM.value.count > 0 then
              for each itm as CORDPRICEOPTIONS in _CORDPRICEOPTIONS_SUBFORM.Value
                itm.toXML(xw,"CORDPRICEOPTIONS_SUBFORM")
              next
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.Value
                itm.toXML(xw,"LASTCUSTPARTSALES_SUBFORM")
              next
            end if
            if _ORDICPROF_SUBFORM.value.count > 0 then
              for each itm as ORDICPROF in _ORDICPROF_SUBFORM.Value
                itm.toXML(xw,"ORDICPROF_SUBFORM")
              next
            end if
            if _ORDISTATUSLOG_SUBFORM.value.count > 0 then
              for each itm as ORDISTATUSLOG in _ORDISTATUSLOG_SUBFORM.Value
                itm.toXML(xw,"ORDISTATUSLOG_SUBFORM")
              next
            end if
            if _ORDSERIALORDI_SUBFORM.value.count > 0 then
              for each itm as ORDSERIALORDI in _ORDSERIALORDI_SUBFORM.Value
                itm.toXML(xw,"ORDSERIALORDI_SUBFORM")
              next
            end if
            if _PRDIORDIORDI_SUBFORM.value.count > 0 then
              for each itm as PRDIORDIORDI in _PRDIORDIORDI_SUBFORM.Value
                itm.toXML(xw,"PRDIORDIORDI_SUBFORM")
              next
            end if
            if _PORDIORDI_SUBFORM.value.count > 0 then
              for each itm as PORDIORDI in _PORDIORDI_SUBFORM.Value
                itm.toXML(xw,"PORDIORDI_SUBFORM")
              next
            end if
            if _ORDIPRDI_SUBFORM.value.count > 0 then
              for each itm as ORDIPRDI in _ORDIPRDI_SUBFORM.Value
                itm.toXML(xw,"ORDIPRDI_SUBFORM")
              next
            end if
            if _ORDERITEMSLOT_SUBFORM.value.count > 0 then
              for each itm as ORDERITEMSLOT in _ORDERITEMSLOT_SUBFORM.Value
                itm.toXML(xw,"ORDERITEMSLOT_SUBFORM")
              next
            end if
            if _BUDGETREP_SUBFORM.value.count > 0 then
              for each itm as BUDGETREP in _BUDGETREP_SUBFORM.Value
                itm.toXML(xw,"BUDGETREP_SUBFORM")
              next
            end if
            if _LINKING_SUBFORM.value.count > 0 then
              for each itm as LINKING in _LINKING_SUBFORM.Value
                itm.toXML(xw,"LINKING_SUBFORM")
              next
            end if
            if _ORDERITEMSTEXT_SUBFORM.value.count > 0 then
              for each itm as ORDERITEMSTEXT in _ORDERITEMSTEXT_SUBFORM.Value
                itm.toXML(xw,"ORDERITEMSTEXT_SUBFORM")
              next
            end if
            if _ORDERITEMSSIGN_SUBFORM.value.count > 0 then
              for each itm as ORDERITEMSSIGN in _ORDERITEMSSIGN_SUBFORM.Value
                itm.toXML(xw,"ORDERITEMSSIGN_SUBFORM")
              next
            end if
            if _LINEUNSPECS_SUBFORM.value.count > 0 then
              for each itm as LINEUNSPECS in _LINEUNSPECS_SUBFORM.Value
                itm.toXML(xw,"LINEUNSPECS_SUBFORM")
              next
            end if
            if _LINEUNPARTS_SUBFORM.value.count > 0 then
              for each itm as LINEUNPARTS in _LINEUNPARTS_SUBFORM.Value
                itm.toXML(xw,"LINEUNPARTS_SUBFORM")
              next
            end if
            if _LINEUNSPSCPARTS_SUBFORM.value.count > 0 then
              for each itm as LINEUNSPSCPARTS in _LINEUNSPSCPARTS_SUBFORM.Value
                itm.toXML(xw,"LINEUNSPSCPARTS_SUBFORM")
              next
            end if
            if _ORDIBONUSES_SUBFORM.value.count > 0 then
              for each itm as ORDIBONUSES in _ORDIBONUSES_SUBFORM.Value
                itm.toXML(xw,"ORDIBONUSES_SUBFORM")
              next
            end if
            if _BONUSESORDI_SUBFORM.value.count > 0 then
              for each itm as BONUSESORDI in _BONUSESORDI_SUBFORM.Value
                itm.toXML(xw,"BONUSESORDI_SUBFORM")
              next
            end if
            if _PICKBAL2_SUBFORM.value.count > 0 then
              for each itm as PICKBAL2 in _PICKBAL2_SUBFORM.Value
                itm.toXML(xw,"PICKBAL2_SUBFORM")
              next
            end if
            if _ORDIWTASKS_SUBFORM.value.count > 0 then
              for each itm as ORDIWTASKS in _ORDIWTASKS_SUBFORM.Value
                itm.toXML(xw,"ORDIWTASKS_SUBFORM")
              next
            end if
            if _ORDIDISTR_SUBFORM.value.count > 0 then
              for each itm as ORDIDISTR in _ORDIDISTR_SUBFORM.Value
                itm.toXML(xw,"ORDIDISTR_SUBFORM")
              next
            end if
            if _CHANGESITEMS_LOG_SUBFORM.value.count > 0 then
              for each itm as CHANGESITEMS_LOG in _CHANGESITEMS_LOG_SUBFORM.Value
                itm.toXML(xw,"CHANGESITEMS_LOG_SUBFORM")
              next
            end if
            if _ORDI_CHANGE_LOG_SUBFORM.value.count > 0 then
              for each itm as ORDI_CHANGE_LOG in _ORDI_CHANGE_LOG_SUBFORM.Value
                itm.toXML(xw,"ORDI_CHANGE_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMS = JsonConvert.DeserializeObject(Of ORDERITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _PURCHASEPRICE = .PURCHASEPRICE
                  _ICODE = .ICODE
                  _DUEDATE = .DUEDATE
                  _CLOSEDBOOL = .CLOSEDBOOL
                  _TBALANCE = .TBALANCE
                  _PACKBALANCE = .PACKBALANCE
                  _PACKED = .PACKED
                  _PACKPACKED = .PACKPACKED
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _QPRICE = .QPRICE
                  _VATPRICE = .VATPRICE
                  _QPROFIT = .QPROFIT
                  _QPROFITPERCENT = .QPROFITPERCENT
                  _PRICEBAL = .PRICEBAL
                  _CODE = .CODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PURSOURCENAME = .PURSOURCENAME
                  _NUMPACK = .NUMPACK
                  _PACKCODE = .PACKCODE
                  _MODELNAME = .MODELNAME
                  _PLANHOURSD = .PLANHOURSD
                  _PLANHOURSSUM = .PLANHOURSSUM
                  _REVNAME = .REVNAME
                  _VATFLAGA = .VATFLAGA
                  _COMMISSION = .COMMISSION
                  _BARCODE = .BARCODE
                  _SERIALNAME = .SERIALNAME
                  _CUSTPARTNAME = .CUSTPARTNAME
                  _CUSTPARTBARCODE = .CUSTPARTBARCODE
                  _YOURORDLINE = .YOURORDLINE
                  _QUANT = .QUANT
                  _ABALANCE = .ABALANCE
                  _PBALANCE = .PBALANCE
                  _UNITNAME = .UNITNAME
                  _UNSPSCCODE = .UNSPSCCODE
                  _UNSPSCDES = .UNSPSCDES
                  _CLUSTNAME = .CLUSTNAME
                  _MRP = .MRP
                  _PDATE = .PDATE
                  _PRDATE = .PRDATE
                  _CASHFLOWDATE = .CASHFLOWDATE
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _BUDCODE = .BUDCODE
                  _COSTCNAME = .COSTCNAME
                  _EXCH = .EXCH
                  _PBONUSFLAG = .PBONUSFLAG
                  _ORDISTATUSDES = .ORDISTATUSDES
                  _COPYFAVSUPFLAG = .COPYFAVSUPFLAG
                  _SUPNAME = .SUPNAME
                  _OBFLAG = .OBFLAG
                  _PREPAYED = .PREPAYED
                  _PAYCUSTNAME = .PAYCUSTNAME
                  _PARTTREEFLAG = .PARTTREEFLAG
                  _PAYCUSTDES = .PAYCUSTDES
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _PROJCOSTFLAG = .PROJCOSTFLAG
                  _MPARTNAME = .MPARTNAME
                  _MPARTDES = .MPARTDES
                  _MMPARTNAME = .MMPARTNAME
                  _REMARK1 = .REMARK1
                  _REMARK2 = .REMARK2
                  _KITNUM = .KITNUM
                  _QRANKCODE = .QRANKCODE
                  _QRANKDES = .QRANKDES
                  _DCMONTHS = .DCMONTHS
                  _MINEXPDAYS = .MINEXPDAYS
                  _WARHSREMARK = .WARHSREMARK
                  _DEALNAME = .DEALNAME
                  _DLINE = .DLINE
                  _ORDI = .ORDI
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_ORDERITEMS
        
        ORDERSTOTAL = 0
        
        ORDERITEMSTRANS = 1
        
        PARTBALANCE = 2
        
        LOGCOUNTERS = 3
        
        LOGCOUNTERSMPART = 4
        
        ORDITREE = 5
        
        PROJLINK = 6
        
        ORDERITEMSIV = 7
        
        CORDPRICEOPTIONS = 8
        
        LASTCUSTPARTSALES = 9
        
        ORDICPROF = 10
        
        ORDISTATUSLOG = 11
        
        ORDSERIALORDI = 12
        
        PRDIORDIORDI = 13
        
        PORDIORDI = 14
        
        ORDIPRDI = 15
        
        ORDERITEMSLOT = 16
        
        BUDGETREP = 17
        
        LINKING = 18
        
        ORDERITEMSTEXT = 19
        
        ORDERITEMSSIGN = 20
        
        LINEUNSPECS = 21
        
        LINEUNPARTS = 22
        
        LINEUNSPSCPARTS = 23
        
        ORDIBONUSES = 24
        
        BONUSESORDI = 25
        
        PICKBAL2 = 26
        
        ORDIWTASKS = 27
        
        ORDIDISTR = 28
        
        CHANGESITEMS_LOG = 29
        
        ORDI_CHANGE_LOG = 30
    End Enum
    
    <QueryTitle("Order Total")>  _
    Public Class QUERY_ORDERSTOTAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERSTOTAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERSTOTAL)
            _Parent = nothing
            _Name = "ORDERSTOTAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERSTOTAL)
            _Parent = Parent
            _name = "ORDERSTOTAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERSTOTAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERSTOTAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERSTOTAL As ORDERSTOTAL In JsonConvert.DeserializeObject(Of QUERY_ORDERSTOTAL)(stream.ReadToEnd).Value
              With _ORDERSTOTAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERSTOTAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERSTOTAL = JsonConvert.DeserializeObject(Of ORDERSTOTAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERSTOTAL)
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .CHARTOTPRICE = obj.CHARTOTPRICE
                  .DETAILS = obj.DETAILS
                  .STATDES = obj.STATDES
                  .ORDNAME = obj.ORDNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERSTOTAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERSTOTAL as ORDERSTOTAL in value
              If _ORDERSTOTAL.Equals(trycast(obj,ORDERSTOTAL)) Then
                  value.remove(_ORDERSTOTAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERSTOTAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _CHARTOTPRICE As String
        
        Private _DETAILS As String
        
        Private _STATDES As String
        
        Private _ORDNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERSTOTAL"
                else
                    return "ORDERSTOTAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Bef. Disc."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CHARTOTPRICE")>  _
        Public Property CHARTOTPRICE() As String
            Get
                return _CHARTOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _CHARTOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Status"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERSTOTAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERSTOTAL = JsonConvert.DeserializeObject(Of ORDERSTOTAL)(e.StreamReader.ReadToEnd)
                With obj
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _CHARTOTPRICE = .CHARTOTPRICE
                  _DETAILS = .DETAILS
                  _STATDES = .STATDES
                  _ORDNAME = .ORDNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Order Tracing")>  _
    Public Class QUERY_ORDERITEMSTRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERITEMSTRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERITEMSTRANS)
            _Parent = nothing
            _Name = "ORDERITEMSTRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERITEMSTRANS)
            _Parent = Parent
            _name = "ORDERITEMSTRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERITEMSTRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERITEMSTRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERITEMSTRANS As ORDERITEMSTRANS In JsonConvert.DeserializeObject(Of QUERY_ORDERITEMSTRANS)(stream.ReadToEnd).Value
              With _ORDERITEMSTRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERITEMSTRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSTRANS = JsonConvert.DeserializeObject(Of ORDERITEMSTRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERITEMSTRANS)
                  .CURDATE = obj.CURDATE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .DOCDES = obj.DOCDES
                  .DOCNO = obj.DOCNO
                  .TRANS = obj.TRANS
                  .USERLOGIN = obj.USERLOGIN
                  .CQUANT = obj.CQUANT
                  .COST = obj.COST
                  .SECONDCOST = obj.SECONDCOST
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .WARHSNAME1 = obj.WARHSNAME1
                  .TOLOCNAME = obj.TOLOCNAME
                  .PROJDOCNO = obj.PROJDOCNO
                  .PROJDES = obj.PROJDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TTYPE = obj.TTYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERITEMSTRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERITEMSTRANS as ORDERITEMSTRANS in value
              If _ORDERITEMSTRANS.Equals(trycast(obj,ORDERITEMSTRANS)) Then
                  value.remove(_ORDERITEMSTRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERITEMSTRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _DOCDES As String
        
        Private _DOCNO As String
        
        Private _TRANS As Long
        
        Private _USERLOGIN As String
        
        Private _CQUANT As Decimal
        
        Private _COST As Decimal
        
        Private _SECONDCOST As Decimal
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _WARHSNAME1 As String
        
        Private _TOLOCNAME As String
        
        Private _PROJDOCNO As String
        
        Private _PROJDES As String
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TTYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERITEMSTRANS"
                else
                    return "ORDERITEMSTRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TTYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TTYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Inv. Transaction"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Report No."),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reported by"),  _
         nType("Edm.String"),  _
         tab("Reported by"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total Internal Hrs"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Reported by"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("CQUANT")>  _
        Public Property CQUANT() As nullable(of decimal)
            Get
                return _CQUANT
            End Get
            Set
                if not(value is nothing) then
                  _CQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Reported by"),  _
         Pos(54),  _
         [ReadOnly](true),  _
         twodBarcode("COST")>  _
        Public Property COST() As nullable(of decimal)
            Get
                return _COST
            End Get
            Set
                if not(value is nothing) then
                  _COST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost ({F.F})"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Reported by"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("SECONDCOST")>  _
        Public Property SECONDCOST() As nullable(of decimal)
            Get
                return _SECONDCOST
            End Get
            Set
                if not(value is nothing) then
                  _SECONDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("From Warehouse"),  _
         nType("Edm.String"),  _
         tab("Reported by"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Reported by"),  _
         Pos(102),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("To Warehouse"),  _
         nType("Edm.String"),  _
         tab("Reported by"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME1")>  _
        Public Property WARHSNAME1() As String
            Get
                return _WARHSNAME1
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Reported by"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("TOLOCNAME")>  _
        Public Property TOLOCNAME() As String
            Get
                return _TOLOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _TOLOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDOCNO")>  _
        Public Property PROJDOCNO() As String
            Get
                return _PROJDOCNO
            End Get
            Set
                if not(value is nothing) then
                  _PROJDOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(202),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(204),  _
         [ReadOnly](true),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if not(value is nothing) then
                  _WBS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(205),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(206),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TTYPE")>  _
        Public Property TTYPE() As String
            Get
                return _TTYPE
            End Get
            Set
                if not(value is nothing) then
                  _TTYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERITEMSTRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TTYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSTRANS = JsonConvert.DeserializeObject(Of ORDERITEMSTRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _DOCDES = .DOCDES
                  _DOCNO = .DOCNO
                  _TRANS = .TRANS
                  _USERLOGIN = .USERLOGIN
                  _CQUANT = .CQUANT
                  _COST = .COST
                  _SECONDCOST = .SECONDCOST
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _WARHSNAME1 = .WARHSNAME1
                  _TOLOCNAME = .TOLOCNAME
                  _PROJDOCNO = .PROJDOCNO
                  _PROJDES = .PROJDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TTYPE = .TTYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Inventory for Part")>  _
    Public Class QUERY_PARTBALANCE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTBALANCE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = nothing
            _Name = "PARTBALANCE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = Parent
            _name = "PARTBALANCE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTBALANCE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTBALANCE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTBALANCE As PARTBALANCE In JsonConvert.DeserializeObject(Of QUERY_PARTBALANCE)(stream.ReadToEnd).Value
              With _PARTBALANCE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTBALANCE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTBALANCE)
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .VELOCITY = obj.VELOCITY
                  .TYPE = obj.TYPE
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .SERIALNAME = obj.SERIALNAME
                  .SERIALDES = obj.SERIALDES
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .CUSTNAME = obj.CUSTNAME
                  .ACTNAME = obj.ACTNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .LASTDATE = obj.LASTDATE
                  .NUMPACK = obj.NUMPACK
                  .ACT = obj.ACT
                  .CUST = obj.CUST
                  .SERIAL = obj.SERIAL
                  .WARHS = obj.WARHS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTBALANCE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTBALANCE as PARTBALANCE in value
              If _PARTBALANCE.Equals(trycast(obj,PARTBALANCE)) Then
                  value.remove(_PARTBALANCE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTBALANCE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _VELOCITY As String
        
        Private _TYPE As String
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _SERIALNAME As String
        
        Private _SERIALDES As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _CUSTNAME As String
        
        Private _ACTNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _LASTDATE As System.DateTimeOffset
        
        Private _NUMPACK As Long
        
        Private _ACT As Long
        
        Private _CUST As Long
        
        Private _SERIAL As Long
        
        Private _WARHS As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTBALANCE"
                else
                    return "PARTBALANCE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},CUST={1},SERIAL={2},WARHS={3}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",CUST), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",WARHS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Velocity"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("VELOCITY")>  _
        Public Property VELOCITY() As String
            Get
                return _VELOCITY
            End Get
            Set
                if not(value is nothing) then
                  _VELOCITY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type (D/F/W)"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Buy/Sell)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Warehouse"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Buy/Sell Unit"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot Desc."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expir. Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. No."),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. Name"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation/Pallet"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Expir. Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Factory Unit"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Last Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Factory Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("LASTDATE")>  _
        Public Property LASTDATE() As nullable (of DateTimeOffset)
            Get
                return _LASTDATE
            End Get
            Set
                if not(value is nothing) then
                  _LASTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _NUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTBALANCE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With obj
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _VELOCITY = .VELOCITY
                  _TYPE = .TYPE
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _SERIALNAME = .SERIALNAME
                  _SERIALDES = .SERIALDES
                  _EXPIRYDATE = .EXPIRYDATE
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _CUSTNAME = .CUSTNAME
                  _ACTNAME = .ACTNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _LASTDATE = .LASTDATE
                  _NUMPACK = .NUMPACK
                  _ACT = .ACT
                  _CUST = .CUST
                  _SERIAL = .SERIAL
                  _WARHS = .WARHS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Part Availability")>  _
    Public Class QUERY_LOGCOUNTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = nothing
            _Name = "LOGCOUNTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = Parent
            _name = "LOGCOUNTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERS As LOGCOUNTERS In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERS)(stream.ReadToEnd).Value
              With _LOGCOUNTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERS)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERS as LOGCOUNTERS in value
              If _LOGCOUNTERS.Equals(trycast(obj,LOGCOUNTERS)) Then
                  value.remove(_LOGCOUNTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAIL_SUBFORM As QUERY_PARTAVAIL
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERS"
                else
                    return "LOGCOUNTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAIL_SUBFORM() As QUERY_PARTAVAIL
            Get
                return _PARTAVAIL_SUBFORM
            End Get
            Set
                _PARTAVAIL_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAIL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAIL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.Value
                itm.toXML(xw,"PARTAVAIL_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERS
        
        PARTAVAIL = 0
    End Enum
    
    <QueryTitle("Part Availability - Details")>  _
    Public Class QUERY_PARTAVAIL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAIL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = nothing
            _Name = "PARTAVAIL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = Parent
            _name = "PARTAVAIL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAIL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAIL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAIL As PARTAVAIL In JsonConvert.DeserializeObject(Of QUERY_PARTAVAIL)(stream.ReadToEnd).Value
              With _PARTAVAIL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAIL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAIL)
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAIL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAIL as PARTAVAIL in value
              If _PARTAVAIL.Equals(trycast(obj,PARTAVAIL)) Then
                  value.remove(_PARTAVAIL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAIL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAIL"
                else
                    return "PARTAVAIL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("DueDate/On-Hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Part (ID)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAIL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With obj
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Base Product Availability")>  _
    Public Class QUERY_LOGCOUNTERSMPART
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERSMPART)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERSMPART)
            _Parent = nothing
            _Name = "LOGCOUNTERSMPART"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Product Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERSMPART)
            _Parent = Parent
            _name = "LOGCOUNTERSMPART_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Product Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERSMPART)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERSMPART)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERSMPART As LOGCOUNTERSMPART In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERSMPART)(stream.ReadToEnd).Value
              With _LOGCOUNTERSMPART
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERSMPART)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERSMPART = JsonConvert.DeserializeObject(Of LOGCOUNTERSMPART)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERSMPART)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERSMPART(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERSMPART as LOGCOUNTERSMPART in value
              If _LOGCOUNTERSMPART.Equals(trycast(obj,LOGCOUNTERSMPART)) Then
                  value.remove(_LOGCOUNTERSMPART)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERSMPART
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAILMPART_SUBFORM As QUERY_PARTAVAILMPART
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Product Availability - Details"))
            _PARTAVAILMPART_SUBFORM = new QUERY_PARTAVAILMPART(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAILMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Product Availability - Details", _PARTAVAILMPART_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Product Availability - Details"))
            _PARTAVAILMPART_SUBFORM = new QUERY_PARTAVAILMPART(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAILMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Product Availability - Details", _PARTAVAILMPART_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERSMPART"
                else
                    return "LOGCOUNTERSMPART_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAILMPART_SUBFORM() As QUERY_PARTAVAILMPART
            Get
                return _PARTAVAILMPART_SUBFORM
            End Get
            Set
                _PARTAVAILMPART_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAILMPART_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAILMPART_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAILMPART in _PARTAVAILMPART_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAILMPART_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERSMPART")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAILMPART_SUBFORM.value.count > 0 then
              for each itm as PARTAVAILMPART in _PARTAVAILMPART_SUBFORM.Value
                itm.toXML(xw,"PARTAVAILMPART_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERSMPART = JsonConvert.DeserializeObject(Of LOGCOUNTERSMPART)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERSMPART
        
        PARTAVAILMPART = 0
    End Enum
    
    <QueryTitle("Product Availability - Details")>  _
    Public Class QUERY_PARTAVAILMPART
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAILMPART)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAILMPART)
            _Parent = nothing
            _Name = "PARTAVAILMPART"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAILMPART)
            _Parent = Parent
            _name = "PARTAVAILMPART_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAILMPART)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAILMPART)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAILMPART As PARTAVAILMPART In JsonConvert.DeserializeObject(Of QUERY_PARTAVAILMPART)(stream.ReadToEnd).Value
              With _PARTAVAILMPART
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAILMPART)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAILMPART = JsonConvert.DeserializeObject(Of PARTAVAILMPART)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAILMPART)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAILMPART(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAILMPART as PARTAVAILMPART in value
              If _PARTAVAILMPART.Equals(trycast(obj,PARTAVAILMPART)) Then
                  value.remove(_PARTAVAILMPART)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAILMPART
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAILMPART"
                else
                    return "PARTAVAILMPART_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAILMPART")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAILMPART = JsonConvert.DeserializeObject(Of PARTAVAILMPART)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("BOM for Order Item")>  _
    Public Class QUERY_ORDITREE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDITREE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDITREE)
            _Parent = nothing
            _Name = "ORDITREE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDITREE)
            _Parent = Parent
            _name = "ORDITREE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDITREE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDITREE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDITREE As ORDITREE In JsonConvert.DeserializeObject(Of QUERY_ORDITREE)(stream.ReadToEnd).Value
              With _ORDITREE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDITREE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDITREE = JsonConvert.DeserializeObject(Of ORDITREE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDITREE)
                  .SONPARTNAME = obj.SONPARTNAME
                  .PDES = obj.PDES
                  .SONTYPE = obj.SONTYPE
                  .SQUANT = obj.SQUANT
                  .TOTQUANT = obj.TOTQUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .PURCHASEPRICE = obj.PURCHASEPRICE
                  .CODE = obj.CODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PUSOURCENAME = obj.PUSOURCENAME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDITREE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDITREE as ORDITREE in value
              If _ORDITREE.Equals(trycast(obj,ORDITREE)) Then
                  value.remove(_ORDITREE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDITREE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSONPARTNAME As Boolean = Boolean.FalseString
        
        Private _SONPARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _SONTYPE As String
        
        Private _IsSetSQUANT As Boolean = Boolean.FalseString
        
        Private _SQUANT As Decimal
        
        Private _TOTQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetPURCHASEPRICE As Boolean = Boolean.FalseString
        
        Private _PURCHASEPRICE As Decimal
        
        Private _CODE As String
        
        Private _PRSOURCENAME As String
        
        Private _PUSOURCENAME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _LOGCOUNTERS_SUBFORM As QUERY_LOGCOUNTERS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability"))
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability"))
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDITREE"
                else
                    return "ORDITREE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Child Part Number"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("SONPARTNAME")>  _
        Public Property SONPARTNAME() As String
            Get
                return _SONPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetSONPARTNAME = True
                If loading Then
                  _SONPARTNAME = Value
                Else
                    if not _SONPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SONPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SONPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Child Part Desc."),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(20),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Part Desc.", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Child Type (P/R/O)"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("SONTYPE")>  _
        Public Property SONTYPE() As String
            Get
                return _SONTYPE
            End Get
            Set
                if not(value is nothing) then
                  _SONTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Child Qty per Parent"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(32),  _
         twodBarcode("SQUANT")>  _
        Public Property SQUANT() As nullable(of decimal)
            Get
                return _SQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Qty per Parent", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSQUANT = True
                If loading Then
                  _SQUANT = Value
                Else
                    if not _SQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(40),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cost/Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(42),  _
         twodBarcode("PURCHASEPRICE")>  _
        Public Property PURCHASEPRICE() As nullable(of decimal)
            Get
                return _PURCHASEPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cost/Unit", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPURCHASEPRICE = True
                If loading Then
                  _PURCHASEPRICE = Value
                Else
                    if not _PURCHASEPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PURCHASEPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PURCHASEPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost Source"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("PUSOURCENAME")>  _
        Public Property PUSOURCENAME() As String
            Get
                return _PUSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PUSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Line (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(200),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERS_SUBFORM() As QUERY_LOGCOUNTERS
            Get
                return _LOGCOUNTERS_SUBFORM
            End Get
            Set
                _LOGCOUNTERS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSONPARTNAME then
              if f then
                  jw.WriteRaw(", ""SONPARTNAME"": ")
              else
                  jw.WriteRaw("""SONPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SONPARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetSQUANT then
              if f then
                  jw.WriteRaw(", ""SQUANT"": ")
              else
                  jw.WriteRaw("""SQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.SQUANT)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetPURCHASEPRICE then
              if f then
                  jw.WriteRaw(", ""PURCHASEPRICE"": ")
              else
                  jw.WriteRaw("""PURCHASEPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PURCHASEPRICE)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDITREE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetSONPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SONPARTNAME")
              .WriteAttributeString("value", me.SONPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetSQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SQUANT")
              .WriteAttributeString("value", me.SQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPURCHASEPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PURCHASEPRICE")
              .WriteAttributeString("value", me.PURCHASEPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDITREE = JsonConvert.DeserializeObject(Of ORDITREE)(e.StreamReader.ReadToEnd)
                With obj
                  _SONPARTNAME = .SONPARTNAME
                  _PDES = .PDES
                  _SONTYPE = .SONTYPE
                  _SQUANT = .SQUANT
                  _TOTQUANT = .TOTQUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _PURCHASEPRICE = .PURCHASEPRICE
                  _CODE = .CODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PUSOURCENAME = .PUSOURCENAME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_ORDITREE
        
        LOGCOUNTERS = 0
    End Enum
    
    <QueryTitle("Part Availability")>  _
    Public Class QUERY_LOGCOUNTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = nothing
            _Name = "LOGCOUNTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = Parent
            _name = "LOGCOUNTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERS As LOGCOUNTERS In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERS)(stream.ReadToEnd).Value
              With _LOGCOUNTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERS)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERS as LOGCOUNTERS in value
              If _LOGCOUNTERS.Equals(trycast(obj,LOGCOUNTERS)) Then
                  value.remove(_LOGCOUNTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAIL_SUBFORM As QUERY_PARTAVAIL
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERS"
                else
                    return "LOGCOUNTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAIL_SUBFORM() As QUERY_PARTAVAIL
            Get
                return _PARTAVAIL_SUBFORM
            End Get
            Set
                _PARTAVAIL_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAIL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAIL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.Value
                itm.toXML(xw,"PARTAVAIL_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERS
        
        PARTAVAIL = 0
    End Enum
    
    <QueryTitle("Part Availability - Details")>  _
    Public Class QUERY_PARTAVAIL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAIL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = nothing
            _Name = "PARTAVAIL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = Parent
            _name = "PARTAVAIL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAIL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAIL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAIL As PARTAVAIL In JsonConvert.DeserializeObject(Of QUERY_PARTAVAIL)(stream.ReadToEnd).Value
              With _PARTAVAIL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAIL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAIL)
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAIL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAIL as PARTAVAIL in value
              If _PARTAVAIL.Equals(trycast(obj,PARTAVAIL)) Then
                  value.remove(_PARTAVAIL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAIL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAIL"
                else
                    return "PARTAVAIL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("DueDate/On-Hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Part (ID)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAIL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With obj
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoices")>  _
    Public Class QUERY_ORDERITEMSIV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERITEMSIV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERITEMSIV)
            _Parent = nothing
            _Name = "ORDERITEMSIV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERITEMSIV)
            _Parent = Parent
            _name = "ORDERITEMSIV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERITEMSIV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERITEMSIV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERITEMSIV As ORDERITEMSIV In JsonConvert.DeserializeObject(Of QUERY_ORDERITEMSIV)(stream.ReadToEnd).Value
              With _ORDERITEMSIV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERITEMSIV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSIV = JsonConvert.DeserializeObject(Of ORDERITEMSIV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERITEMSIV)
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .PRICE = obj.PRICE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .TOTPERCENT = obj.TOTPERCENT
                  .DISPRICE = obj.DISPRICE
                  .CODE = obj.CODE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERITEMSIV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERITEMSIV as ORDERITEMSIV in value
              If _ORDERITEMSIV.Equals(trycast(obj,ORDERITEMSIV)) Then
                  value.remove(_ORDERITEMSIV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERITEMSIV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _PRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _CODE As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERITEMSIV"
                else
                    return "ORDERITEMSIV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Invoice"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Invoice"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Invoice"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Invoice"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Invoice"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Invoice"),  _
         Pos(17),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Invoice"),  _
         Pos(18),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Invoice"),  _
         Pos(19),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Quantity"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Quantity"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Quantity"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Quantity"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Quantity"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Quantity"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERITEMSIV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSIV = JsonConvert.DeserializeObject(Of ORDERITEMSIV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _PRICE = .PRICE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _TOTPERCENT = .TOTPERCENT
                  _DISPRICE = .DISPRICE
                  _CODE = .CODE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Part Price Options")>  _
    Public Class QUERY_CORDPRICEOPTIONS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CORDPRICEOPTIONS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CORDPRICEOPTIONS)
            _Parent = nothing
            _Name = "CORDPRICEOPTIONS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CORDPRICEOPTIONS)
            _Parent = Parent
            _name = "CORDPRICEOPTIONS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CORDPRICEOPTIONS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CORDPRICEOPTIONS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CORDPRICEOPTIONS As CORDPRICEOPTIONS In JsonConvert.DeserializeObject(Of QUERY_CORDPRICEOPTIONS)(stream.ReadToEnd).Value
              With _CORDPRICEOPTIONS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CORDPRICEOPTIONS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CORDPRICEOPTIONS = JsonConvert.DeserializeObject(Of CORDPRICEOPTIONS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CORDPRICEOPTIONS)
                  .CPODOCNO = obj.CPODOCNO
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .CODE = obj.CODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .BASEPRICE = obj.BASEPRICE
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CORDPRICEOPTIONS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CORDPRICEOPTIONS as CORDPRICEOPTIONS in value
              If _CORDPRICEOPTIONS.Equals(trycast(obj,CORDPRICEOPTIONS)) Then
                  value.remove(_CORDPRICEOPTIONS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CORDPRICEOPTIONS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CPODOCNO As String
        
        Private _PRSOURCENAME As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _CODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _BASEPRICE As Decimal
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CORDPRICEOPTIONS"
                else
                    return "CORDPRICEOPTIONS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2},USER={3}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CPODOCNO")>  _
        Public Property CPODOCNO() As String
            Get
                return _CPODOCNO
            End Get
            Set
                if not(value is nothing) then
                  _CPODOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc. Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Document Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Document Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Document Number"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Document Number"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price After Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price After Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("BASEPRICE")>  _
        Public Property BASEPRICE() As nullable(of decimal)
            Get
                return _BASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _BASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CORDPRICEOPTIONS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CORDPRICEOPTIONS = JsonConvert.DeserializeObject(Of CORDPRICEOPTIONS)(e.StreamReader.ReadToEnd)
                With obj
                  _CPODOCNO = .CPODOCNO
                  _PRSOURCENAME = .PRSOURCENAME
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _CODE = .CODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _BASEPRICE = .BASEPRICE
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Latest Part Sales to Customer")>  _
    Public Class QUERY_LASTCUSTPARTSALES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LASTCUSTPARTSALES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = nothing
            _Name = "LASTCUSTPARTSALES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = Parent
            _name = "LASTCUSTPARTSALES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LASTCUSTPARTSALES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LASTCUSTPARTSALES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LASTCUSTPARTSALES As LASTCUSTPARTSALES In JsonConvert.DeserializeObject(Of QUERY_LASTCUSTPARTSALES)(stream.ReadToEnd).Value
              With _LASTCUSTPARTSALES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LASTCUSTPARTSALES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LASTCUSTPARTSALES)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LASTCUSTPARTSALES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LASTCUSTPARTSALES as LASTCUSTPARTSALES in value
              If _LASTCUSTPARTSALES.Equals(trycast(obj,LASTCUSTPARTSALES)) Then
                  value.remove(_LASTCUSTPARTSALES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LASTCUSTPARTSALES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LASTCUSTPARTSALES"
                else
                    return "LASTCUSTPARTSALES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Overall Discount"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Overall Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("Overall Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LASTCUSTPARTSALES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Details of Quote for This Part")>  _
    Public Class QUERY_ORDICPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDICPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDICPROF)
            _Parent = nothing
            _Name = "ORDICPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDICPROF)
            _Parent = Parent
            _name = "ORDICPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDICPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDICPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDICPROF As ORDICPROF In JsonConvert.DeserializeObject(Of QUERY_ORDICPROF)(stream.ReadToEnd).Value
              With _ORDICPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDICPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDICPROF = JsonConvert.DeserializeObject(Of ORDICPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDICPROF)
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDICPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDICPROF as ORDICPROF in value
              If _ORDICPROF.Equals(trycast(obj,ORDICPROF)) Then
                  value.remove(_ORDICPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDICPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDICPROF"
                else
                    return "ORDICPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Qty"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Qty"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Qty"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Qty"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Qty"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDICPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDICPROF = JsonConvert.DeserializeObject(Of ORDICPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Order Item Status")>  _
    Public Class QUERY_ORDISTATUSLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDISTATUSLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDISTATUSLOG)
            _Parent = nothing
            _Name = "ORDISTATUSLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDISTATUSLOG)
            _Parent = Parent
            _name = "ORDISTATUSLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDISTATUSLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDISTATUSLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDISTATUSLOG As ORDISTATUSLOG In JsonConvert.DeserializeObject(Of QUERY_ORDISTATUSLOG)(stream.ReadToEnd).Value
              With _ORDISTATUSLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDISTATUSLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDISTATUSLOG = JsonConvert.DeserializeObject(Of ORDISTATUSLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDISTATUSLOG)
                  .ORDISTATUSDES = obj.ORDISTATUSDES
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDISTATUSLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDISTATUSLOG as ORDISTATUSLOG in value
              If _ORDISTATUSLOG.Equals(trycast(obj,ORDISTATUSLOG)) Then
                  value.remove(_ORDISTATUSLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDISTATUSLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORDISTATUSDES As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDISTATUSLOG"
                else
                    return "ORDISTATUSLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Status for Item"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDISTATUSDES")>  _
        Public Property ORDISTATUSDES() As String
            Get
                return _ORDISTATUSDES
            End Get
            Set
                if not(value is nothing) then
                  _ORDISTATUSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Status for Item"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Recorded by"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Status for Item"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDISTATUSLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDISTATUSLOG = JsonConvert.DeserializeObject(Of ORDISTATUSLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDISTATUSDES = .ORDISTATUSDES
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Work Orders for Order Items")>  _
    Public Class QUERY_ORDSERIALORDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDSERIALORDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDSERIALORDI)
            _Parent = nothing
            _Name = "ORDSERIALORDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDSERIALORDI)
            _Parent = Parent
            _name = "ORDSERIALORDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDSERIALORDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDSERIALORDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDSERIALORDI As ORDSERIALORDI In JsonConvert.DeserializeObject(Of QUERY_ORDSERIALORDI)(stream.ReadToEnd).Value
              With _ORDSERIALORDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDSERIALORDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDSERIALORDI = JsonConvert.DeserializeObject(Of ORDSERIALORDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDSERIALORDI)
                  .SERIALNAME = obj.SERIALNAME
                  .CLOSEDBOOL = obj.CLOSEDBOOL
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .QUANT = obj.QUANT
                  .SERIALDES = obj.SERIALDES
                  .SERIAL = obj.SERIAL
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDSERIALORDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDSERIALORDI as ORDSERIALORDI in value
              If _ORDSERIALORDI.Equals(trycast(obj,ORDSERIALORDI)) Then
                  value.remove(_ORDSERIALORDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDSERIALORDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SERIALNAME As String
        
        Private _CLOSEDBOOL As String
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _QUANT As Decimal
        
        Private _SERIALDES As String
        
        Private _SERIAL As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDSERIALORDI"
                else
                    return "ORDSERIALORDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SERIAL={0}", _
                  string.format("{0}",SERIAL) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Work Order"),  _
         nType("Edm.String"),  _
         tab("Work Order"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Closed?"),  _
         nType("Edm.String"),  _
         tab("Work Order"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("CLOSEDBOOL")>  _
        Public Property CLOSEDBOOL() As String
            Get
                return _CLOSEDBOOL
            End Get
            Set
                if not(value is nothing) then
                  _CLOSEDBOOL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Work Order"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Work Order"),  _
         Pos(9),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Work Order"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order Descrip."),  _
         nType("Edm.String"),  _
         tab("Work Order"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Work Order"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDSERIALORDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDSERIALORDI = JsonConvert.DeserializeObject(Of ORDSERIALORDI)(e.StreamReader.ReadToEnd)
                With obj
                  _SERIALNAME = .SERIALNAME
                  _CLOSEDBOOL = .CLOSEDBOOL
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _QUANT = .QUANT
                  _SERIALDES = .SERIALDES
                  _SERIAL = .SERIAL
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("POs for Ordered Part (From PRs)")>  _
    Public Class QUERY_PRDIORDIORDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PRDIORDIORDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PRDIORDIORDI)
            _Parent = nothing
            _Name = "PRDIORDIORDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PRDIORDIORDI)
            _Parent = Parent
            _name = "PRDIORDIORDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PRDIORDIORDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PRDIORDIORDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PRDIORDIORDI As PRDIORDIORDI In JsonConvert.DeserializeObject(Of QUERY_PRDIORDIORDI)(stream.ReadToEnd).Value
              With _PRDIORDIORDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PRDIORDIORDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PRDIORDIORDI = JsonConvert.DeserializeObject(Of PRDIORDIORDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PRDIORDIORDI)
                  .ORDNAME = obj.ORDNAME
                  .LINE = obj.LINE
                  .PARTNAME = obj.PARTNAME
                  .DUEDATE = obj.DUEDATE
                  .QUANT = obj.QUANT
                  .ABALANCE = obj.ABALANCE
                  .UNITNAME = obj.UNITNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PRDIORDIORDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PRDIORDIORDI as PRDIORDIORDI in value
              If _PRDIORDIORDI.Equals(trycast(obj,PRDIORDIORDI)) Then
                  value.remove(_PRDIORDIORDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PRDIORDIORDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORDNAME As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _PARTNAME As String
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _QUANT As Decimal
        
        Private _ABALANCE As Decimal
        
        Private _UNITNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PRDIORDIORDI"
                else
                    return "PRDIORDIORDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Purchase Order"),  _
         nType("Edm.String"),  _
         tab("Purchase Order"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Purchase Order"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Purchase Order"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("On-hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Purchase Order"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Purchase Order"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Purchase Order"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("ABALANCE")>  _
        Public Property ABALANCE() As nullable(of decimal)
            Get
                return _ABALANCE
            End Get
            Set
                if not(value is nothing) then
                  _ABALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Purchase Order"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PRDIORDIORDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PRDIORDIORDI = JsonConvert.DeserializeObject(Of PRDIORDIORDI)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDNAME = .ORDNAME
                  _LINE = .LINE
                  _PARTNAME = .PARTNAME
                  _DUEDATE = .DUEDATE
                  _QUANT = .QUANT
                  _ABALANCE = .ABALANCE
                  _UNITNAME = .UNITNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("POs for Order Item (Manual Link)")>  _
    Public Class QUERY_PORDIORDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDIORDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDIORDI)
            _Parent = nothing
            _Name = "PORDIORDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDIORDI)
            _Parent = Parent
            _name = "PORDIORDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDIORDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDIORDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDIORDI As PORDIORDI In JsonConvert.DeserializeObject(Of QUERY_PORDIORDI)(stream.ReadToEnd).Value
              With _PORDIORDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDIORDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDIORDI = JsonConvert.DeserializeObject(Of PORDIORDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDIORDI)
                  .ORDNAME = obj.ORDNAME
                  .LINE = obj.LINE
                  .PARTNAME = obj.PARTNAME
                  .TQUANT = obj.TQUANT
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .ORDI = obj.ORDI
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDIORDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDIORDI as PORDIORDI in value
              If _PORDIORDI.Equals(trycast(obj,PORDIORDI)) Then
                  value.remove(_PORDIORDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDIORDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _PARTNAME As String
        
        Private _TQUANT As Decimal
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IsSetORDI As Boolean = Boolean.FalseString
        
        Private _ORDI As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDIORDI"
                else
                    return "PORDIORDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDI={0}", _
                  string.format("{0}",ORDI) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Ln"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ln", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Order"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Order"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Order"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Order"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("PO Currency"),  _
         nType("Edm.String"),  _
         tab("PO Currency"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("PO Currency"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order Item (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORDI = True
                If loading Then
                  _ORDI = Value
                Else
                    if not _ORDI = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDI", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDI = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
            if _IsSetORDI then
              if f then
                  jw.WriteRaw(", ""ORDI"": ")
              else
                  jw.WriteRaw("""ORDI"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDI)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDIORDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetORDI then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", me.ORDI)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDIORDI = JsonConvert.DeserializeObject(Of PORDIORDI)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDNAME = .ORDNAME
                  _LINE = .LINE
                  _PARTNAME = .PARTNAME
                  _TQUANT = .TQUANT
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _ORDI = .ORDI
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("PRs for Order Item")>  _
    Public Class QUERY_ORDIPRDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDIPRDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDIPRDI)
            _Parent = nothing
            _Name = "ORDIPRDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDIPRDI)
            _Parent = Parent
            _name = "ORDIPRDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDIPRDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDIPRDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDIPRDI As ORDIPRDI In JsonConvert.DeserializeObject(Of QUERY_ORDIPRDI)(stream.ReadToEnd).Value
              With _ORDIPRDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDIPRDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIPRDI = JsonConvert.DeserializeObject(Of ORDIPRDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDIPRDI)
                  .PRDNO = obj.PRDNO
                  .PRDI = obj.PRDI
                  .CURDATE = obj.CURDATE
                  .STATDES = obj.STATDES
                  .SUPNAME = obj.SUPNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .ESTIMATEPRICE = obj.ESTIMATEPRICE
                  .CODE = obj.CODE
                  .PURDEMAND = obj.PURDEMAND
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDIPRDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDIPRDI as ORDIPRDI in value
              If _ORDIPRDI.Equals(trycast(obj,ORDIPRDI)) Then
                  value.remove(_ORDIPRDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDIPRDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PRDNO As String
        
        Private _PRDI As Long
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _SUPNAME As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _ESTIMATEPRICE As Decimal
        
        Private _CODE As String
        
        Private _PURDEMAND As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDIPRDI"
                else
                    return "ORDIPRDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PURDEMAND={0},KLINE={1}", _
                  string.format("{0}",PURDEMAND), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Purch Demand Doc No."),  _
         nType("Edm.String"),  _
         tab("Purch Demand Doc No."),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("PRDNO")>  _
        Public Property PRDNO() As String
            Get
                return _PRDNO
            End Get
            Set
                if not(value is nothing) then
                  _PRDNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("PR Number"),  _
         nType("Edm.Int64"),  _
         tab("Purch Demand Doc No."),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("PRDI")>  _
        Public Property PRDI() As nullable (of int64)
            Get
                return _PRDI
            End Get
            Set
                if not(value is nothing) then
                  _PRDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Purch Demand Doc No."),  _
         Pos(9),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Purch Demand Doc No."),  _
         Pos(11),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Number"),  _
         nType("Edm.String"),  _
         tab("Purch Demand Doc No."),  _
         Pos(13),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Purch Demand Doc No."),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Purch Demand Doc No."),  _
         Pos(17),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity to Order"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Purch Demand Doc No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Estimated Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Unit"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Estimated Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Unit"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ESTIMATEPRICE")>  _
        Public Property ESTIMATEPRICE() As nullable(of decimal)
            Get
                return _ESTIMATEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _ESTIMATEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Currency"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("PR (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PURDEMAND")>  _
        Public Property PURDEMAND() As nullable (of int64)
            Get
                return _PURDEMAND
            End Get
            Set
                if not(value is nothing) then
                  _PURDEMAND = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDIPRDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PURDEMAND")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIPRDI = JsonConvert.DeserializeObject(Of ORDIPRDI)(e.StreamReader.ReadToEnd)
                With obj
                  _PRDNO = .PRDNO
                  _PRDI = .PRDI
                  _CURDATE = .CURDATE
                  _STATDES = .STATDES
                  _SUPNAME = .SUPNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _ESTIMATEPRICE = .ESTIMATEPRICE
                  _CODE = .CODE
                  _PURDEMAND = .PURDEMAND
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Planned Completion by Lot")>  _
    Public Class QUERY_ORDERITEMSLOT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERITEMSLOT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERITEMSLOT)
            _Parent = nothing
            _Name = "ORDERITEMSLOT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERITEMSLOT)
            _Parent = Parent
            _name = "ORDERITEMSLOT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERITEMSLOT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERITEMSLOT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERITEMSLOT As ORDERITEMSLOT In JsonConvert.DeserializeObject(Of QUERY_ORDERITEMSLOT)(stream.ReadToEnd).Value
              With _ORDERITEMSLOT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERITEMSLOT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSLOT = JsonConvert.DeserializeObject(Of ORDERITEMSLOT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERITEMSLOT)
                  .PDATE = obj.PDATE
                  .PQUANT = obj.PQUANT
                  .LOT = obj.LOT
                  .WORKCNAME = obj.WORKCNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERITEMSLOT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERITEMSLOT as ORDERITEMSLOT in value
              If _ORDERITEMSLOT.Equals(trycast(obj,ORDERITEMSLOT)) Then
                  value.remove(_ORDERITEMSLOT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERITEMSLOT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PDATE As System.DateTimeOffset
        
        Private _PQUANT As Decimal
        
        Private _LOT As Long
        
        Private _WORKCNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERITEMSLOT"
                else
                    return "ORDERITEMSLOT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOT={0}", _
                  string.format("{0}",LOT) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Planned End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Planned End Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planned Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Planned End Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PQUANT")>  _
        Public Property PQUANT() As nullable(of decimal)
            Get
                return _PQUANT
            End Get
            Set
                if not(value is nothing) then
                  _PQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Lot"),  _
         nType("Edm.Int64"),  _
         tab("Planned End Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("LOT")>  _
        Public Property LOT() As nullable (of int64)
            Get
                return _LOT
            End Get
            Set
                if not(value is nothing) then
                  _LOT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Cell"),  _
         nType("Edm.String"),  _
         tab("Planned End Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("WORKCNAME")>  _
        Public Property WORKCNAME() As String
            Get
                return _WORKCNAME
            End Get
            Set
                if not(value is nothing) then
                  _WORKCNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERITEMSLOT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSLOT = JsonConvert.DeserializeObject(Of ORDERITEMSLOT)(e.StreamReader.ReadToEnd)
                With obj
                  _PDATE = .PDATE
                  _PQUANT = .PQUANT
                  _LOT = .LOT
                  _WORKCNAME = .WORKCNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Budgeted vs. Actual")>  _
    Public Class QUERY_BUDGETREP
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of BUDGETREP)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of BUDGETREP)
            _Parent = nothing
            _Name = "BUDGETREP"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of BUDGETREP)
            _Parent = Parent
            _name = "BUDGETREP_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of BUDGETREP)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(BUDGETREP)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _BUDGETREP As BUDGETREP In JsonConvert.DeserializeObject(Of QUERY_BUDGETREP)(stream.ReadToEnd).Value
              With _BUDGETREP
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_BUDGETREP)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BUDGETREP = JsonConvert.DeserializeObject(Of BUDGETREP)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, BUDGETREP)
                  .AMOUNT = obj.AMOUNT
                  .TOTCOST = obj.TOTCOST
                  .BAL = obj.BAL
                  .FNCCOST = obj.FNCCOST
                  .TRANSCOST = obj.TRANSCOST
                  .ORDCOST = obj.ORDCOST
                  .PRDCOST = obj.PRDCOST
                  .CODE = obj.CODE
                  .AMOUNT_YTD = obj.AMOUNT_YTD
                  .TOTALCOST_YTD = obj.TOTALCOST_YTD
                  .BAL_YTD = obj.BAL_YTD
                  .AMOUNT_PERIOD = obj.AMOUNT_PERIOD
                  .TOTALCOST_PERIOD = obj.TOTALCOST_PERIOD
                  .BAL_PERIOD = obj.BAL_PERIOD
                  .DATESTR = obj.DATESTR
                  .BCEHCKSTR = obj.BCEHCKSTR
                  .BUDGETDATE = obj.BUDGETDATE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new BUDGETREP(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _BUDGETREP as BUDGETREP in value
              If _BUDGETREP.Equals(trycast(obj,BUDGETREP)) Then
                  value.remove(_BUDGETREP)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class BUDGETREP
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _AMOUNT As Decimal
        
        Private _TOTCOST As Decimal
        
        Private _BAL As Decimal
        
        Private _FNCCOST As Decimal
        
        Private _TRANSCOST As Decimal
        
        Private _ORDCOST As Decimal
        
        Private _PRDCOST As Decimal
        
        Private _CODE As String
        
        Private _AMOUNT_YTD As Decimal
        
        Private _TOTALCOST_YTD As Decimal
        
        Private _BAL_YTD As Decimal
        
        Private _AMOUNT_PERIOD As Decimal
        
        Private _TOTALCOST_PERIOD As Decimal
        
        Private _BAL_PERIOD As Decimal
        
        Private _DATESTR As String
        
        Private _BCEHCKSTR As String
        
        Private _BUDGETDATE As System.DateTimeOffset
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "BUDGETREP"
                else
                    return "BUDGETREP_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0}", _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Annual Appropriation"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Annual Budget Usage"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Annual Appropriation"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TOTCOST")>  _
        Public Property TOTCOST() As nullable(of decimal)
            Get
                return _TOTCOST
            End Get
            Set
                if not(value is nothing) then
                  _TOTCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Budget"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(15),  _
         tab("Annual Appropriation"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("BAL")>  _
        Public Property BAL() As nullable(of decimal)
            Get
                return _BAL
            End Get
            Set
                if not(value is nothing) then
                  _BAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billed Transactions"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCCOST")>  _
        Public Property FNCCOST() As nullable(of decimal)
            Get
                return _FNCCOST
            End Get
            Set
                if not(value is nothing) then
                  _FNCCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Transact."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TRANSCOST")>  _
        Public Property TRANSCOST() As nullable(of decimal)
            Get
                return _TRANSCOST
            End Get
            Set
                if not(value is nothing) then
                  _TRANSCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ORDCOST")>  _
        Public Property ORDCOST() As nullable(of decimal)
            Get
                return _ORDCOST
            End Get
            Set
                if not(value is nothing) then
                  _ORDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open PRs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRDCOST")>  _
        Public Property PRDCOST() As nullable(of decimal)
            Get
                return _PRDCOST
            End Get
            Set
                if not(value is nothing) then
                  _PRDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Annual Appropriation"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Appropriation-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT_YTD")>  _
        Public Property AMOUNT_YTD() As nullable(of decimal)
            Get
                return _AMOUNT_YTD
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Used-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALCOST_YTD")>  _
        Public Property TOTALCOST_YTD() As nullable(of decimal)
            Get
                return _TOTALCOST_YTD
            End Get
            Set
                if not(value is nothing) then
                  _TOTALCOST_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Appropriation-YTD"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("BAL_YTD")>  _
        Public Property BAL_YTD() As nullable(of decimal)
            Get
                return _BAL_YTD
            End Get
            Set
                if not(value is nothing) then
                  _BAL_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approp.-Current Per."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT_PERIOD")>  _
        Public Property AMOUNT_PERIOD() As nullable(of decimal)
            Get
                return _AMOUNT_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Used-Current Period"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALCOST_PERIOD")>  _
        Public Property TOTALCOST_PERIOD() As nullable(of decimal)
            Get
                return _TOTALCOST_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _TOTALCOST_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal-Current Period"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Appropriation-YTD"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("BAL_PERIOD")>  _
        Public Property BAL_PERIOD() As nullable(of decimal)
            Get
                return _BAL_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _BAL_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Period"),  _
         nType("Edm.String"),  _
         tab("Appropriation-YTD"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("DATESTR")>  _
        Public Property DATESTR() As String
            Get
                return _DATESTR
            End Get
            Set
                if not(value is nothing) then
                  _DATESTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Deviation Check"),  _
         nType("Edm.String"),  _
         tab("Appropriation-YTD"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("BCEHCKSTR")>  _
        Public Property BCEHCKSTR() As String
            Get
                return _BCEHCKSTR
            End Get
            Set
                if not(value is nothing) then
                  _BCEHCKSTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Usage Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Budget Usage Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("BUDGETDATE")>  _
        Public Property BUDGETDATE() As nullable (of DateTimeOffset)
            Get
                return _BUDGETDATE
            End Get
            Set
                if not(value is nothing) then
                  _BUDGETDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Budget Usage Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "BUDGETREP")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BUDGETREP = JsonConvert.DeserializeObject(Of BUDGETREP)(e.StreamReader.ReadToEnd)
                With obj
                  _AMOUNT = .AMOUNT
                  _TOTCOST = .TOTCOST
                  _BAL = .BAL
                  _FNCCOST = .FNCCOST
                  _TRANSCOST = .TRANSCOST
                  _ORDCOST = .ORDCOST
                  _PRDCOST = .PRDCOST
                  _CODE = .CODE
                  _AMOUNT_YTD = .AMOUNT_YTD
                  _TOTALCOST_YTD = .TOTALCOST_YTD
                  _BAL_YTD = .BAL_YTD
                  _AMOUNT_PERIOD = .AMOUNT_PERIOD
                  _TOTALCOST_PERIOD = .TOTALCOST_PERIOD
                  _BAL_PERIOD = .BAL_PERIOD
                  _DATESTR = .DATESTR
                  _BCEHCKSTR = .BCEHCKSTR
                  _BUDGETDATE = .BUDGETDATE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Linkage Details")>  _
    Public Class QUERY_LINKING
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINKING)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINKING)
            _Parent = nothing
            _Name = "LINKING"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINKING)
            _Parent = Parent
            _name = "LINKING_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINKING)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINKING)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINKING As LINKING In JsonConvert.DeserializeObject(Of QUERY_LINKING)(stream.ReadToEnd).Value
              With _LINKING
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINKING)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKING = JsonConvert.DeserializeObject(Of LINKING)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINKING)
                  .CODE = obj.CODE
                  .SHARE = obj.SHARE
                  .BVALUE = obj.BVALUE
                  .BASEDATE = obj.BASEDATE
                  .SUPPLYAPPOINTTERM2 = obj.SUPPLYAPPOINTTERM2
                  .TERMFLAG = obj.TERMFLAG
                  .CURRENCY = obj.CURRENCY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINKING(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINKING as LINKING in value
              If _LINKING.Equals(trycast(obj,LINKING)) Then
                  value.remove(_LINKING)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINKING
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetSHARE As Boolean = Boolean.FalseString
        
        Private _SHARE As Decimal
        
        Private _IsSetBVALUE As Boolean = Boolean.FalseString
        
        Private _BVALUE As Decimal
        
        Private _IsSetBASEDATE As Boolean = Boolean.FalseString
        
        Private _BASEDATE As System.DateTimeOffset
        
        Private _IsSetSUPPLYAPPOINTTERM2 As Boolean = Boolean.FalseString
        
        Private _SUPPLYAPPOINTTERM2 As Long
        
        Private _IsSetTERMFLAG As Boolean = Boolean.FalseString
        
        Private _TERMFLAG As String
        
        Private _IsSetCURRENCY As Boolean = Boolean.FalseString
        
        Private _CURRENCY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINKING"
                else
                    return "LINKING_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURRENCY={0}", _
                  string.format("{0}",CURRENCY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(20),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Percent of Composite"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("SHARE")>  _
        Public Property SHARE() As nullable(of decimal)
            Get
                return _SHARE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent of Composite", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSHARE = True
                If loading Then
                  _SHARE = Value
                Else
                    if not _SHARE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHARE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHARE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("BVALUE")>  _
        Public Property BVALUE() As nullable(of decimal)
            Get
                return _BVALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetBVALUE = True
                If loading Then
                  _BVALUE = Value
                Else
                    if not _BVALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BVALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BVALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(50),  _
         twodBarcode("BASEDATE")>  _
        Public Property BASEDATE() As nullable (of DateTimeOffset)
            Get
                return _BASEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Date", value, "^.*$") then Exit Property
                _IsSetBASEDATE = True
                If loading Then
                  _BASEDATE = Value
                Else
                    if not _BASEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BASEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BASEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Latest Linkage-mnths"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(60),  _
         twodBarcode("SUPPLYAPPOINTTERM2")>  _
        Public Property SUPPLYAPPOINTTERM2() As nullable (of int64)
            Get
                return _SUPPLYAPPOINTTERM2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Latest Linkage-mnths", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUPPLYAPPOINTTERM2 = True
                If loading Then
                  _SUPPLYAPPOINTTERM2 = Value
                Else
                    if not _SUPPLYAPPOINTTERM2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPPLYAPPOINTTERM2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPPLYAPPOINTTERM2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Linkage from Header"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(70),  _
         twodBarcode("TERMFLAG")>  _
        Public Property TERMFLAG() As String
            Get
                return _TERMFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linkage from Header", value, "^.{0,1}$") then Exit Property
                _IsSetTERMFLAG = True
                If loading Then
                  _TERMFLAG = Value
                Else
                    if not _TERMFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TERMFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TERMFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Currency (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(70),  _
         Browsable(false),  _
         twodBarcode("CURRENCY")>  _
        Public Property CURRENCY() As nullable (of int64)
            Get
                return _CURRENCY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Currency (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCURRENCY = True
                If loading Then
                  _CURRENCY = Value
                Else
                    if not _CURRENCY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURRENCY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURRENCY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetSHARE then
              if f then
                  jw.WriteRaw(", ""SHARE"": ")
              else
                  jw.WriteRaw("""SHARE"": ")
                  f = true
              end if
              jw.WriteValue(me.SHARE)
            end if
            if _IsSetBVALUE then
              if f then
                  jw.WriteRaw(", ""BVALUE"": ")
              else
                  jw.WriteRaw("""BVALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.BVALUE)
            end if
            if _IsSetBASEDATE then
              if f then
                  jw.WriteRaw(", ""BASEDATE"": ")
              else
                  jw.WriteRaw("""BASEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.BASEDATE)
            end if
            if _IsSetSUPPLYAPPOINTTERM2 then
              if f then
                  jw.WriteRaw(", ""SUPPLYAPPOINTTERM2"": ")
              else
                  jw.WriteRaw("""SUPPLYAPPOINTTERM2"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPPLYAPPOINTTERM2)
            end if
            if _IsSetTERMFLAG then
              if f then
                  jw.WriteRaw(", ""TERMFLAG"": ")
              else
                  jw.WriteRaw("""TERMFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.TERMFLAG)
            end if
            if _IsSetCURRENCY then
              if f then
                  jw.WriteRaw(", ""CURRENCY"": ")
              else
                  jw.WriteRaw("""CURRENCY"": ")
                  f = true
              end if
              jw.WriteValue(me.CURRENCY)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINKING")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetSHARE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHARE")
              .WriteAttributeString("value", me.SHARE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetBVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BVALUE")
              .WriteAttributeString("value", me.BVALUE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetBASEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BASEDATE")
              .WriteAttributeString("value", me.BASEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetSUPPLYAPPOINTTERM2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPPLYAPPOINTTERM2")
              .WriteAttributeString("value", me.SUPPLYAPPOINTTERM2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTERMFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TERMFLAG")
              .WriteAttributeString("value", me.TERMFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCURRENCY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", me.CURRENCY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKING = JsonConvert.DeserializeObject(Of LINKING)(e.StreamReader.ReadToEnd)
                With obj
                  _CODE = .CODE
                  _SHARE = .SHARE
                  _BVALUE = .BVALUE
                  _BASEDATE = .BASEDATE
                  _SUPPLYAPPOINTTERM2 = .SUPPLYAPPOINTTERM2
                  _TERMFLAG = .TERMFLAG
                  _CURRENCY = .CURRENCY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Order Items - Remarks")>  _
    Public Class QUERY_ORDERITEMSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERITEMSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERITEMSTEXT)
            _Parent = nothing
            _Name = "ORDERITEMSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERITEMSTEXT)
            _Parent = Parent
            _name = "ORDERITEMSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERITEMSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERITEMSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERITEMSTEXT As ORDERITEMSTEXT In JsonConvert.DeserializeObject(Of QUERY_ORDERITEMSTEXT)(stream.ReadToEnd).Value
              With _ORDERITEMSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERITEMSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSTEXT = JsonConvert.DeserializeObject(Of ORDERITEMSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERITEMSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERITEMSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERITEMSTEXT as ORDERITEMSTEXT in value
              If _ORDERITEMSTEXT.Equals(trycast(obj,ORDERITEMSTEXT)) Then
                  value.remove(_ORDERITEMSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERITEMSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERITEMSTEXT"
                else
                    return "ORDERITEMSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERITEMSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSTEXT = JsonConvert.DeserializeObject(Of ORDERITEMSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_ORDERITEMSSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERITEMSSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERITEMSSIGN)
            _Parent = nothing
            _Name = "ORDERITEMSSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERITEMSSIGN)
            _Parent = Parent
            _name = "ORDERITEMSSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERITEMSSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERITEMSSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERITEMSSIGN As ORDERITEMSSIGN In JsonConvert.DeserializeObject(Of QUERY_ORDERITEMSSIGN)(stream.ReadToEnd).Value
              With _ORDERITEMSSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERITEMSSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSSIGN = JsonConvert.DeserializeObject(Of ORDERITEMSSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERITEMSSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .ORD = obj.ORD
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERITEMSSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERITEMSSIGN as ORDERITEMSSIGN in value
              If _ORDERITEMSSIGN.Equals(trycast(obj,ORDERITEMSSIGN)) Then
                  value.remove(_ORDERITEMSSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERITEMSSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _ORD As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERITEMSSIGN"
                else
                    return "ORDERITEMSSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0},KLINE={1}", _
                  string.format("{0}",ORD), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if not(value is nothing) then
                  _ORD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERITEMSSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERITEMSSIGN = JsonConvert.DeserializeObject(Of ORDERITEMSSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _ORD = .ORD
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attributes in Set")>  _
    Public Class QUERY_LINEUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINEUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINEUNSPECS)
            _Parent = nothing
            _Name = "LINEUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINEUNSPECS)
            _Parent = Parent
            _name = "LINEUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINEUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINEUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINEUNSPECS As LINEUNSPECS In JsonConvert.DeserializeObject(Of QUERY_LINEUNSPECS)(stream.ReadToEnd).Value
              With _LINEUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINEUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPECS = JsonConvert.DeserializeObject(Of LINEUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINEUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .VALUE2 = obj.VALUE2
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINEUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINEUNSPECS as LINEUNSPECS in value
              If _LINEUNSPECS.Equals(trycast(obj,LINEUNSPECS)) Then
                  value.remove(_LINEUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINEUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSPECDES As Boolean = Boolean.FalseString
        
        Private _SPECDES As String
        
        Private _IsSetVALUE As Boolean = Boolean.FalseString
        
        Private _VALUE As String
        
        Private _VALUE2 As String
        
        Private _MANDATORY As String
        
        Private _IsSetSPEC As Boolean = Boolean.FalseString
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINEUNSPECS"
                else
                    return "LINEUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attribute", value, "^.{0,38}$") then Exit Property
                _IsSetSPECDES = True
                If loading Then
                  _SPECDES = Value
                Else
                    if not _SPECDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SPECDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SPECDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(50),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Value", value, "^.{0,36}$") then Exit Property
                _IsSetVALUE = True
                If loading Then
                  _VALUE = Value
                Else
                    if not _VALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Request"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE2")>  _
        Public Property VALUE2() As String
            Get
                return _VALUE2
            End Get
            Set
                if not(value is nothing) then
                  _VALUE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Spec (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSPEC = True
                If loading Then
                  _SPEC = Value
                Else
                    if not _SPEC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SPEC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SPEC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSPECDES then
              if f then
                  jw.WriteRaw(", ""SPECDES"": ")
              else
                  jw.WriteRaw("""SPECDES"": ")
                  f = true
              end if
              jw.WriteValue(me.SPECDES)
            end if
            if _IsSetVALUE then
              if f then
                  jw.WriteRaw(", ""VALUE"": ")
              else
                  jw.WriteRaw("""VALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.VALUE)
            end if
            if _IsSetSPEC then
              if f then
                  jw.WriteRaw(", ""SPEC"": ")
              else
                  jw.WriteRaw("""SPEC"": ")
                  f = true
              end if
              jw.WriteValue(me.SPEC)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINEUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetSPECDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SPECDES")
              .WriteAttributeString("value", me.SPECDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "38")
              .WriteEndElement
            end if
            if _IsSetVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VALUE")
              .WriteAttributeString("value", me.VALUE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "36")
              .WriteEndElement
            end if
            if _IsSetSPEC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", me.SPEC)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPECS = JsonConvert.DeserializeObject(Of LINEUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _VALUE2 = .VALUE2
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Parts Compatible w/Set Attribs")>  _
    Public Class QUERY_LINEUNPARTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINEUNPARTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINEUNPARTS)
            _Parent = nothing
            _Name = "LINEUNPARTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINEUNPARTS)
            _Parent = Parent
            _name = "LINEUNPARTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINEUNPARTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINEUNPARTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINEUNPARTS As LINEUNPARTS In JsonConvert.DeserializeObject(Of QUERY_LINEUNPARTS)(stream.ReadToEnd).Value
              With _LINEUNPARTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINEUNPARTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNPARTS = JsonConvert.DeserializeObject(Of LINEUNPARTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINEUNPARTS)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .PART = obj.PART
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINEUNPARTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINEUNPARTS as LINEUNPARTS in value
              If _LINEUNPARTS.Equals(trycast(obj,LINEUNPARTS)) Then
                  value.remove(_LINEUNPARTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINEUNPARTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetPART As Boolean = Boolean.FalseString
        
        Private _PART As Long
        
        Private _COMPAREUNSPECS_SUBFORM As QUERY_COMPAREUNSPECS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINEUNPARTS"
                else
                    return "LINEUNPARTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PART={0}", _
                  string.format("{0}",PART) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(30),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPART = True
                If loading Then
                  _PART = Value
                Else
                    if not _PART = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PART", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PART = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property COMPAREUNSPECS_SUBFORM() As QUERY_COMPAREUNSPECS
            Get
                return _COMPAREUNSPECS_SUBFORM
            End Get
            Set
                _COMPAREUNSPECS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPART then
              if f then
                  jw.WriteRaw(", ""PART"": ")
              else
                  jw.WriteRaw("""PART"": ")
                  f = true
              end if
              jw.WriteValue(me.PART)
            end if
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", COMPAREUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _COMPAREUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINEUNPARTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPART then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", me.PART)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.Value
                itm.toXML(xw,"COMPAREUNSPECS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNPARTS = JsonConvert.DeserializeObject(Of LINEUNPARTS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _PART = .PART
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LINEUNPARTS
        
        COMPAREUNSPECS = 0
    End Enum
    
    <QueryTitle("Your Part Specs & Cust's Request")>  _
    Public Class QUERY_COMPAREUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of COMPAREUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = nothing
            _Name = "COMPAREUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = Parent
            _name = "COMPAREUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of COMPAREUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(COMPAREUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _COMPAREUNSPECS As COMPAREUNSPECS In JsonConvert.DeserializeObject(Of QUERY_COMPAREUNSPECS)(stream.ReadToEnd).Value
              With _COMPAREUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_COMPAREUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, COMPAREUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .VALUE2 = obj.VALUE2
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new COMPAREUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _COMPAREUNSPECS as COMPAREUNSPECS in value
              If _COMPAREUNSPECS.Equals(trycast(obj,COMPAREUNSPECS)) Then
                  value.remove(_COMPAREUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class COMPAREUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SPECDES As String
        
        Private _VALUE As String
        
        Private _VALUE2 As String
        
        Private _MANDATORY As String
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "COMPAREUNSPECS"
                else
                    return "COMPAREUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if not(value is nothing) then
                  _SPECDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if not(value is nothing) then
                  _VALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Request"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE2")>  _
        Public Property VALUE2() As String
            Get
                return _VALUE2
            End Get
            Set
                if not(value is nothing) then
                  _VALUE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if not(value is nothing) then
                  _SPEC = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "COMPAREUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _VALUE2 = .VALUE2
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Parts With Same Attribute Set")>  _
    Public Class QUERY_LINEUNSPSCPARTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINEUNSPSCPARTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINEUNSPSCPARTS)
            _Parent = nothing
            _Name = "LINEUNSPSCPARTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINEUNSPSCPARTS)
            _Parent = Parent
            _name = "LINEUNSPSCPARTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINEUNSPSCPARTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINEUNSPSCPARTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINEUNSPSCPARTS As LINEUNSPSCPARTS In JsonConvert.DeserializeObject(Of QUERY_LINEUNSPSCPARTS)(stream.ReadToEnd).Value
              With _LINEUNSPSCPARTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINEUNSPSCPARTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPSCPARTS = JsonConvert.DeserializeObject(Of LINEUNSPSCPARTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINEUNSPSCPARTS)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .STATDES = obj.STATDES
                  .PART = obj.PART
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINEUNSPSCPARTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINEUNSPSCPARTS as LINEUNSPSCPARTS in value
              If _LINEUNSPSCPARTS.Equals(trycast(obj,LINEUNSPSCPARTS)) Then
                  value.remove(_LINEUNSPSCPARTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINEUNSPSCPARTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _STATDES As String
        
        Private _PART As Long
        
        Private _COMPAREUNSPECS_SUBFORM As QUERY_COMPAREUNSPECS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINEUNSPSCPARTS"
                else
                    return "LINEUNSPSCPARTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PARTNAME={0}", _
                  string.format("'{0}'",PARTNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Status"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property COMPAREUNSPECS_SUBFORM() As QUERY_COMPAREUNSPECS
            Get
                return _COMPAREUNSPECS_SUBFORM
            End Get
            Set
                _COMPAREUNSPECS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", COMPAREUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _COMPAREUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINEUNSPSCPARTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.Value
                itm.toXML(xw,"COMPAREUNSPECS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPSCPARTS = JsonConvert.DeserializeObject(Of LINEUNSPSCPARTS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _STATDES = .STATDES
                  _PART = .PART
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LINEUNSPSCPARTS
        
        COMPAREUNSPECS = 0
    End Enum
    
    <QueryTitle("Your Part Specs & Cust's Request")>  _
    Public Class QUERY_COMPAREUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of COMPAREUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = nothing
            _Name = "COMPAREUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = Parent
            _name = "COMPAREUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of COMPAREUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(COMPAREUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _COMPAREUNSPECS As COMPAREUNSPECS In JsonConvert.DeserializeObject(Of QUERY_COMPAREUNSPECS)(stream.ReadToEnd).Value
              With _COMPAREUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_COMPAREUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, COMPAREUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .VALUE2 = obj.VALUE2
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new COMPAREUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _COMPAREUNSPECS as COMPAREUNSPECS in value
              If _COMPAREUNSPECS.Equals(trycast(obj,COMPAREUNSPECS)) Then
                  value.remove(_COMPAREUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class COMPAREUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SPECDES As String
        
        Private _VALUE As String
        
        Private _VALUE2 As String
        
        Private _MANDATORY As String
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "COMPAREUNSPECS"
                else
                    return "COMPAREUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if not(value is nothing) then
                  _SPECDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if not(value is nothing) then
                  _VALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Request"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE2")>  _
        Public Property VALUE2() As String
            Get
                return _VALUE2
            End Get
            Set
                if not(value is nothing) then
                  _VALUE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if not(value is nothing) then
                  _SPEC = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "COMPAREUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _VALUE2 = .VALUE2
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Lines Awarding the Bonus")>  _
    Public Class QUERY_ORDIBONUSES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDIBONUSES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDIBONUSES)
            _Parent = nothing
            _Name = "ORDIBONUSES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDIBONUSES)
            _Parent = Parent
            _name = "ORDIBONUSES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDIBONUSES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDIBONUSES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDIBONUSES As ORDIBONUSES In JsonConvert.DeserializeObject(Of QUERY_ORDIBONUSES)(stream.ReadToEnd).Value
              With _ORDIBONUSES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDIBONUSES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIBONUSES = JsonConvert.DeserializeObject(Of ORDIBONUSES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDIBONUSES)
                  .LINE = obj.LINE
                  .ORDI = obj.ORDI
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDIBONUSES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDIBONUSES as ORDIBONUSES in value
              If _ORDIBONUSES.Equals(trycast(obj,ORDIBONUSES)) Then
                  value.remove(_ORDIBONUSES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDIBONUSES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _IsSetORDI As Boolean = Boolean.FalseString
        
        Private _ORDI As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDIBONUSES"
                else
                    return "ORDIBONUSES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDI={0}", _
                  string.format("{0}",ORDI) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Line Awarding Bonus"),  _
         nType("Edm.Int64"),  _
         tab("Line Awarding Bonus"),  _
         Pos(10),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line Awarding Bonus", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Line Awarding Bonus"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order Item (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORDI = True
                If loading Then
                  _ORDI = Value
                Else
                    if not _ORDI = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDI", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDI = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
            if _IsSetORDI then
              if f then
                  jw.WriteRaw(", ""ORDI"": ")
              else
                  jw.WriteRaw("""ORDI"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDI)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDIBONUSES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetORDI then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", me.ORDI)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIBONUSES = JsonConvert.DeserializeObject(Of ORDIBONUSES)(e.StreamReader.ReadToEnd)
                With obj
                  _LINE = .LINE
                  _ORDI = .ORDI
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Bonus Items Awarded for Line")>  _
    Public Class QUERY_BONUSESORDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of BONUSESORDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of BONUSESORDI)
            _Parent = nothing
            _Name = "BONUSESORDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of BONUSESORDI)
            _Parent = Parent
            _name = "BONUSESORDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of BONUSESORDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(BONUSESORDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _BONUSESORDI As BONUSESORDI In JsonConvert.DeserializeObject(Of QUERY_BONUSESORDI)(stream.ReadToEnd).Value
              With _BONUSESORDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_BONUSESORDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BONUSESORDI = JsonConvert.DeserializeObject(Of BONUSESORDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, BONUSESORDI)
                  .LINE = obj.LINE
                  .BONUSORDI = obj.BONUSORDI
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new BONUSESORDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _BONUSESORDI as BONUSESORDI in value
              If _BONUSESORDI.Equals(trycast(obj,BONUSESORDI)) Then
                  value.remove(_BONUSESORDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class BONUSESORDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _BONUSORDI As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "BONUSESORDI"
                else
                    return "BONUSESORDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "BONUSORDI={0}", _
                  string.format("{0}",BONUSORDI) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("LINE"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bonus Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("LINE"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("BONUSORDI")>  _
        Public Property BONUSORDI() As nullable (of int64)
            Get
                return _BONUSORDI
            End Get
            Set
                if not(value is nothing) then
                  _BONUSORDI = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "BONUSESORDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "BONUSORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BONUSESORDI = JsonConvert.DeserializeObject(Of BONUSESORDI)(e.StreamReader.ReadToEnd)
                With obj
                  _LINE = .LINE
                  _BONUSORDI = .BONUSORDI
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Inventory Available to Pick")>  _
    Public Class QUERY_PICKBAL2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PICKBAL2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PICKBAL2)
            _Parent = nothing
            _Name = "PICKBAL2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PICKBAL2)
            _Parent = Parent
            _name = "PICKBAL2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PICKBAL2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PICKBAL2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PICKBAL2 As PICKBAL2 In JsonConvert.DeserializeObject(Of QUERY_PICKBAL2)(stream.ReadToEnd).Value
              With _PICKBAL2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PICKBAL2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PICKBAL2 = JsonConvert.DeserializeObject(Of PICKBAL2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PICKBAL2)
                  .LOCNAME = obj.LOCNAME
                  .SERIALNAME = obj.SERIALNAME
                  .SERIALDES = obj.SERIALDES
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .ACTNAME = obj.ACTNAME
                  .CUSTNAME = obj.CUSTNAME
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .NUMPACK = obj.NUMPACK
                  .ACT = obj.ACT
                  .CUST = obj.CUST
                  .PART = obj.PART
                  .SERIAL = obj.SERIAL
                  .USER = obj.USER
                  .WARHS = obj.WARHS
                  .XCOLOR = obj.XCOLOR
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PICKBAL2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PICKBAL2 as PICKBAL2 in value
              If _PICKBAL2.Equals(trycast(obj,PICKBAL2)) Then
                  value.remove(_PICKBAL2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PICKBAL2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _LOCNAME As String
        
        Private _SERIALNAME As String
        
        Private _SERIALDES As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _ACTNAME As String
        
        Private _CUSTNAME As String
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _NUMPACK As Long
        
        Private _ACT As Long
        
        Private _CUST As Long
        
        Private _PART As Long
        
        Private _SERIAL As Long
        
        Private _USER As Long
        
        Private _WARHS As Long
        
        Private _XCOLOR As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PICKBAL2"
                else
                    return "PICKBAL2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},CUST={1},PART={2},SERIAL={3},USER={4},WARHS={5},XCOLOR={6}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",CUST), _
                  string.format("{0}",PART), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",USER), _
                  string.format("{0}",WARHS), _
                  string.format("{0}",XCOLOR) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot Desc."),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Bin"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation/Pallet"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Bin"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Crates"),  _
         nType("Edm.Int64"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(125),  _
         [ReadOnly](true),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _NUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Balance (Fact. Unit)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Warehouse (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Color (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Warehouse (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("XCOLOR")>  _
        Public Property XCOLOR() As nullable (of int64)
            Get
                return _XCOLOR
            End Get
            Set
                if not(value is nothing) then
                  _XCOLOR = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PICKBAL2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PICKBAL2 = JsonConvert.DeserializeObject(Of PICKBAL2)(e.StreamReader.ReadToEnd)
                With obj
                  _LOCNAME = .LOCNAME
                  _SERIALNAME = .SERIALNAME
                  _SERIALDES = .SERIALDES
                  _EXPIRYDATE = .EXPIRYDATE
                  _ACTNAME = .ACTNAME
                  _CUSTNAME = .CUSTNAME
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _NUMPACK = .NUMPACK
                  _ACT = .ACT
                  _CUST = .CUST
                  _PART = .PART
                  _SERIAL = .SERIAL
                  _USER = .USER
                  _WARHS = .WARHS
                  _XCOLOR = .XCOLOR
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pick and Doublecheck Tasks")>  _
    Public Class QUERY_ORDIWTASKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDIWTASKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDIWTASKS)
            _Parent = nothing
            _Name = "ORDIWTASKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDIWTASKS)
            _Parent = Parent
            _name = "ORDIWTASKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDIWTASKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDIWTASKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDIWTASKS As ORDIWTASKS In JsonConvert.DeserializeObject(Of QUERY_ORDIWTASKS)(stream.ReadToEnd).Value
              With _ORDIWTASKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDIWTASKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIWTASKS = JsonConvert.DeserializeObject(Of ORDIWTASKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDIWTASKS)
                  .WTASKNUM = obj.WTASKNUM
                  .STATDES = obj.STATDES
                  .WTASKTYPECODE = obj.WTASKTYPECODE
                  .WTASKTYPEDES = obj.WTASKTYPEDES
                  .USERLOGIN = obj.USERLOGIN
                  .STZONECODE = obj.STZONECODE
                  .STZONEDES = obj.STZONEDES
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .PTQUANT = obj.PTQUANT
                  .TQUANT = obj.TQUANT
                  .WTASK = obj.WTASK
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDIWTASKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDIWTASKS as ORDIWTASKS in value
              If _ORDIWTASKS.Equals(trycast(obj,ORDIWTASKS)) Then
                  value.remove(_ORDIWTASKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDIWTASKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WTASKNUM As String
        
        Private _STATDES As String
        
        Private _WTASKTYPECODE As String
        
        Private _WTASKTYPEDES As String
        
        Private _USERLOGIN As String
        
        Private _STZONECODE As String
        
        Private _STZONEDES As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _PTQUANT As Decimal
        
        Private _TQUANT As Decimal
        
        Private _WTASK As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDIWTASKS"
                else
                    return "ORDIWTASKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "WTASKNUM={0}", _
                  string.format("'{0}'",WTASKNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse Task No."),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKNUM")>  _
        Public Property WTASKNUM() As String
            Get
                return _WTASKNUM
            End Get
            Set
                if not(value is nothing) then
                  _WTASKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task Type"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPECODE")>  _
        Public Property WTASKTYPECODE() As String
            Get
                return _WTASKTYPECODE
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type Desc."),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPEDES")>  _
        Public Property WTASKTYPEDES() As String
            Get
                return _WTASKTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Storage Zone"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("STZONECODE")>  _
        Public Property STZONECODE() As String
            Get
                return _STZONECODE
            End Get
            Set
                if not(value is nothing) then
                  _STZONECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Zone Description"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("STZONEDES")>  _
        Public Property STZONEDES() As String
            Get
                return _STZONEDES
            End Get
            Set
                if not(value is nothing) then
                  _STZONEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Description"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("From Warehouse"),  _
         nType("Edm.String"),  _
         tab("Part Description"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Part Description"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planned Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Description"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PTQUANT")>  _
        Public Property PTQUANT() As nullable(of decimal)
            Get
                return _PTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _PTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Description"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Description"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WTASK")>  _
        Public Property WTASK() As nullable (of int64)
            Get
                return _WTASK
            End Get
            Set
                if not(value is nothing) then
                  _WTASK = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDIWTASKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "WTASKNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIWTASKS = JsonConvert.DeserializeObject(Of ORDIWTASKS)(e.StreamReader.ReadToEnd)
                With obj
                  _WTASKNUM = .WTASKNUM
                  _STATDES = .STATDES
                  _WTASKTYPECODE = .WTASKTYPECODE
                  _WTASKTYPEDES = .WTASKTYPEDES
                  _USERLOGIN = .USERLOGIN
                  _STZONECODE = .STZONECODE
                  _STZONEDES = .STZONEDES
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _PTQUANT = .PTQUANT
                  _TQUANT = .TQUANT
                  _WTASK = .WTASK
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Delivery Details for Order Item")>  _
    Public Class QUERY_ORDIDISTR
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDIDISTR)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDIDISTR)
            _Parent = nothing
            _Name = "ORDIDISTR"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDIDISTR)
            _Parent = Parent
            _name = "ORDIDISTR_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDIDISTR)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDIDISTR)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDIDISTR As ORDIDISTR In JsonConvert.DeserializeObject(Of QUERY_ORDIDISTR)(stream.ReadToEnd).Value
              With _ORDIDISTR
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDIDISTR)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIDISTR = JsonConvert.DeserializeObject(Of ORDIDISTR)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDIDISTR)
                  .DISTRDATE = obj.DISTRDATE
                  .DISTRORDER = obj.DISTRORDER
                  .PRIO = obj.PRIO
                  .USERLOGIN = obj.USERLOGIN
                  .WEIGHT = obj.WEIGHT
                  .VOLUME = obj.VOLUME
                  .QUANT = obj.QUANT
                  .WTASKDOCCODE = obj.WTASKDOCCODE
                  .PIKORDER = obj.PIKORDER
                  .DISTRLINECODE = obj.DISTRLINECODE
                  .DISTRLINEDES = obj.DISTRLINEDES
                  .ROUNDNUM = obj.ROUNDNUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDIDISTR(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDIDISTR as ORDIDISTR in value
              If _ORDIDISTR.Equals(trycast(obj,ORDIDISTR)) Then
                  value.remove(_ORDIDISTR)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDIDISTR
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDISTRDATE As Boolean = Boolean.FalseString
        
        Private _DISTRDATE As System.DateTimeOffset
        
        Private _IsSetDISTRORDER As Boolean = Boolean.FalseString
        
        Private _DISTRORDER As Long
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _WEIGHT As Decimal
        
        Private _VOLUME As Decimal
        
        Private _QUANT As Decimal
        
        Private _IsSetWTASKDOCCODE As Boolean = Boolean.FalseString
        
        Private _WTASKDOCCODE As String
        
        Private _IsSetPIKORDER As Boolean = Boolean.FalseString
        
        Private _PIKORDER As Long
        
        Private _IsSetDISTRLINECODE As Boolean = Boolean.FalseString
        
        Private _DISTRLINECODE As String
        
        Private _DISTRLINEDES As String
        
        Private _IsSetROUNDNUM As Boolean = Boolean.FalseString
        
        Private _ROUNDNUM As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDIDISTR"
                else
                    return "ORDIDISTR_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Delivery Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Delivery Date"),  _
         Pos(10),  _
         twodBarcode("DISTRDATE")>  _
        Public Property DISTRDATE() As nullable (of DateTimeOffset)
            Get
                return _DISTRDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delivery Date", value, "^.*$") then Exit Property
                _IsSetDISTRDATE = True
                If loading Then
                  _DISTRDATE = Value
                Else
                    if not _DISTRDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Delivery Order"),  _
         nType("Edm.Int64"),  _
         tab("Delivery Date"),  _
         Pos(20),  _
         twodBarcode("DISTRORDER")>  _
        Public Property DISTRORDER() As nullable (of int64)
            Get
                return _DISTRORDER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delivery Order", value, "^[0-9\-]+$") then Exit Property
                _IsSetDISTRORDER = True
                If loading Then
                  _DISTRORDER = Value
                Else
                    if not _DISTRORDER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRORDER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRORDER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Delivery Date"),  _
         Pos(25),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned Picker"),  _
         nType("Edm.String"),  _
         tab("Delivery Date"),  _
         Pos(30),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned Picker", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Delivery Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("WEIGHT")>  _
        Public Property WEIGHT() As nullable(of decimal)
            Get
                return _WEIGHT
            End Get
            Set
                if not(value is nothing) then
                  _WEIGHT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total Volume"),  _
         nType("Edm.Decimal"),  _
         Scale(4),  _
         Precision(16),  _
         tab("Delivery Date"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("VOLUME")>  _
        Public Property VOLUME() As nullable(of decimal)
            Get
                return _VOLUME
            End Get
            Set
                if not(value is nothing) then
                  _VOLUME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Delivery Date"),  _
         Pos(64),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Target Doc. Code"),  _
         nType("Edm.String"),  _
         tab("Delivery Date"),  _
         Pos(70),  _
         twodBarcode("WTASKDOCCODE")>  _
        Public Property WTASKDOCCODE() As String
            Get
                return _WTASKDOCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Target Doc. Code", value, "^.{0,4}$") then Exit Property
                _IsSetWTASKDOCCODE = True
                If loading Then
                  _WTASKDOCCODE = Value
                Else
                    if not _WTASKDOCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WTASKDOCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WTASKDOCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Pick Order"),  _
         nType("Edm.Int64"),  _
         tab("Pick Order"),  _
         Pos(80),  _
         twodBarcode("PIKORDER")>  _
        Public Property PIKORDER() As nullable (of int64)
            Get
                return _PIKORDER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Pick Order", value, "^[0-9\-]+$") then Exit Property
                _IsSetPIKORDER = True
                If loading Then
                  _PIKORDER = Value
                Else
                    if not _PIKORDER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PIKORDER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PIKORDER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Route Code"),  _
         nType("Edm.String"),  _
         tab("Pick Order"),  _
         Pos(90),  _
         twodBarcode("DISTRLINECODE")>  _
        Public Property DISTRLINECODE() As String
            Get
                return _DISTRLINECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distrib. Route Code", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRLINECODE = True
                If loading Then
                  _DISTRLINECODE = Value
                Else
                    if not _DISTRLINECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRLINECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRLINECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Route Desc."),  _
         nType("Edm.String"),  _
         tab("Pick Order"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRLINEDES")>  _
        Public Property DISTRLINEDES() As String
            Get
                return _DISTRLINEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRLINEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Round Number"),  _
         nType("Edm.Int64"),  _
         tab("Pick Order"),  _
         Pos(100),  _
         twodBarcode("ROUNDNUM")>  _
        Public Property ROUNDNUM() As nullable (of int64)
            Get
                return _ROUNDNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Round Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetROUNDNUM = True
                If loading Then
                  _ROUNDNUM = Value
                Else
                    if not _ROUNDNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ROUNDNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ROUNDNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDISTRDATE then
              if f then
                  jw.WriteRaw(", ""DISTRDATE"": ")
              else
                  jw.WriteRaw("""DISTRDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRDATE)
            end if
            if _IsSetDISTRORDER then
              if f then
                  jw.WriteRaw(", ""DISTRORDER"": ")
              else
                  jw.WriteRaw("""DISTRORDER"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRORDER)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetWTASKDOCCODE then
              if f then
                  jw.WriteRaw(", ""WTASKDOCCODE"": ")
              else
                  jw.WriteRaw("""WTASKDOCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.WTASKDOCCODE)
            end if
            if _IsSetPIKORDER then
              if f then
                  jw.WriteRaw(", ""PIKORDER"": ")
              else
                  jw.WriteRaw("""PIKORDER"": ")
                  f = true
              end if
              jw.WriteValue(me.PIKORDER)
            end if
            if _IsSetDISTRLINECODE then
              if f then
                  jw.WriteRaw(", ""DISTRLINECODE"": ")
              else
                  jw.WriteRaw("""DISTRLINECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRLINECODE)
            end if
            if _IsSetROUNDNUM then
              if f then
                  jw.WriteRaw(", ""ROUNDNUM"": ")
              else
                  jw.WriteRaw("""ROUNDNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ROUNDNUM)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDIDISTR")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDISTRDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRDATE")
              .WriteAttributeString("value", me.DISTRDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDISTRORDER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRORDER")
              .WriteAttributeString("value", me.DISTRORDER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetWTASKDOCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WTASKDOCCODE")
              .WriteAttributeString("value", me.WTASKDOCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPIKORDER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PIKORDER")
              .WriteAttributeString("value", me.PIKORDER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDISTRLINECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRLINECODE")
              .WriteAttributeString("value", me.DISTRLINECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetROUNDNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ROUNDNUM")
              .WriteAttributeString("value", me.ROUNDNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDIDISTR = JsonConvert.DeserializeObject(Of ORDIDISTR)(e.StreamReader.ReadToEnd)
                With obj
                  _DISTRDATE = .DISTRDATE
                  _DISTRORDER = .DISTRORDER
                  _PRIO = .PRIO
                  _USERLOGIN = .USERLOGIN
                  _WEIGHT = .WEIGHT
                  _VOLUME = .VOLUME
                  _QUANT = .QUANT
                  _WTASKDOCCODE = .WTASKDOCCODE
                  _PIKORDER = .PIKORDER
                  _DISTRLINECODE = .DISTRLINECODE
                  _DISTRLINEDES = .DISTRLINEDES
                  _ROUNDNUM = .ROUNDNUM
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_CHANGESITEMS_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CHANGESITEMS_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CHANGESITEMS_LOG)
            _Parent = nothing
            _Name = "CHANGESITEMS_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CHANGESITEMS_LOG)
            _Parent = Parent
            _name = "CHANGESITEMS_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CHANGESITEMS_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CHANGESITEMS_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CHANGESITEMS_LOG As CHANGESITEMS_LOG In JsonConvert.DeserializeObject(Of QUERY_CHANGESITEMS_LOG)(stream.ReadToEnd).Value
              With _CHANGESITEMS_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CHANGESITEMS_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGESITEMS_LOG = JsonConvert.DeserializeObject(Of CHANGESITEMS_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CHANGESITEMS_LOG)
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CHANGESITEMS_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CHANGESITEMS_LOG as CHANGESITEMS_LOG in value
              If _CHANGESITEMS_LOG.Equals(trycast(obj,CHANGESITEMS_LOG)) Then
                  value.remove(_CHANGESITEMS_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CHANGESITEMS_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CHANGESITEMS_LOG"
                else
                    return "CHANGESITEMS_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Details"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Details"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CHANGESITEMS_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGESITEMS_LOG = JsonConvert.DeserializeObject(Of CHANGESITEMS_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Order Item Changes-OLD")>  _
    Public Class QUERY_ORDI_CHANGE_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDI_CHANGE_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDI_CHANGE_LOG)
            _Parent = nothing
            _Name = "ORDI_CHANGE_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDI_CHANGE_LOG)
            _Parent = Parent
            _name = "ORDI_CHANGE_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDI_CHANGE_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDI_CHANGE_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDI_CHANGE_LOG As ORDI_CHANGE_LOG In JsonConvert.DeserializeObject(Of QUERY_ORDI_CHANGE_LOG)(stream.ReadToEnd).Value
              With _ORDI_CHANGE_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDI_CHANGE_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDI_CHANGE_LOG = JsonConvert.DeserializeObject(Of ORDI_CHANGE_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDI_CHANGE_LOG)
                  .UDATE = obj.UDATE
                  .TEXT = obj.TEXT
                  .USERLOGIN = obj.USERLOGIN
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDI_CHANGE_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDI_CHANGE_LOG as ORDI_CHANGE_LOG in value
              If _ORDI_CHANGE_LOG.Equals(trycast(obj,ORDI_CHANGE_LOG)) Then
                  value.remove(_ORDI_CHANGE_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDI_CHANGE_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _TEXT As String
        
        Private _USERLOGIN As String
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDI_CHANGE_LOG"
                else
                    return "ORDI_CHANGE_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Desc. of Change"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("LOG (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDI_CHANGE_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDI_CHANGE_LOG = JsonConvert.DeserializeObject(Of ORDI_CHANGE_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _TEXT = .TEXT
                  _USERLOGIN = .USERLOGIN
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("List of Styles")>  _
    Public Class QUERY_MATRIXSUM
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIXSUM)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIXSUM)
            _Parent = nothing
            _Name = "MATRIXSUM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Assortment")
            .add(1, "Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIXSUM)
            _Parent = Parent
            _name = "MATRIXSUM_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Assortment")
            .add(1, "Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIXSUM)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIXSUM)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIXSUM As MATRIXSUM In JsonConvert.DeserializeObject(Of QUERY_MATRIXSUM)(stream.ReadToEnd).Value
              With _MATRIXSUM
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIXSUM)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUM = JsonConvert.DeserializeObject(Of MATRIXSUM)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIXSUM)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .SQUANT = obj.SQUANT
                  .SBARCODE = obj.SBARCODE
                  .XCOLORCODE = obj.XCOLORCODE
                  .XCOLORNAME = obj.XCOLORNAME
                  .DISTRTYPECODE = obj.DISTRTYPECODE
                  .DISTRTYPEDES = obj.DISTRTYPEDES
                  .XQUANT = obj.XQUANT
                  .NUMPACK = obj.NUMPACK
                  .TOTQUANT = obj.TOTQUANT
                  .DUEDATE = obj.DUEDATE
                  .ACTNAME = obj.ACTNAME
                  .ACTDES = obj.ACTDES
                  .SERIALNAME = obj.SERIALNAME
                  .CUSTNAME = obj.CUSTNAME
                  .TOCUSTNAME = obj.TOCUSTNAME
                  .PRICE = obj.PRICE
                  .CURCODE = obj.CURCODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PERCENT = obj.PERCENT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIXSUM(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIXSUM as MATRIXSUM in value
              If _MATRIXSUM.Equals(trycast(obj,MATRIXSUM)) Then
                  value.remove(_MATRIXSUM)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIXSUM
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetSQUANT As Boolean = Boolean.FalseString
        
        Private _SQUANT As Long
        
        Private _IsSetSBARCODE As Boolean = Boolean.FalseString
        
        Private _SBARCODE As String
        
        Private _IsSetXCOLORCODE As Boolean = Boolean.FalseString
        
        Private _XCOLORCODE As String
        
        Private _XCOLORNAME As String
        
        Private _IsSetDISTRTYPECODE As Boolean = Boolean.FalseString
        
        Private _DISTRTYPECODE As String
        
        Private _DISTRTYPEDES As String
        
        Private _XQUANT As Decimal
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _TOTQUANT As Decimal
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetACTNAME As Boolean = Boolean.FalseString
        
        Private _ACTNAME As String
        
        Private _ACTDES As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetTOCUSTNAME As Boolean = Boolean.FalseString
        
        Private _TOCUSTNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetCURCODE As Boolean = Boolean.FalseString
        
        Private _CURCODE As String
        
        Private _PRSOURCENAME As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _MATRIX_SUBFORM As QUERY_MATRIX
        
        Private _MATRIXSUMTEXT_SUBFORM As QUERY_MATRIXSUMTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Assortment"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _MATRIX_SUBFORM = new QUERY_MATRIX(me)
            _MATRIXSUMTEXT_SUBFORM = new QUERY_MATRIXSUMTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_MATRIX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUMTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Assortment"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _MATRIX_SUBFORM = new QUERY_MATRIX(me)
            _MATRIXSUMTEXT_SUBFORM = new QUERY_MATRIXSUMTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_MATRIX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUMTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIXSUM"
                else
                    return "MATRIXSUM_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manual Quantity"),  _
         nType("Edm.Int64"),  _
         tab("Base Product No."),  _
         Pos(13),  _
         twodBarcode("SQUANT")>  _
        Public Property SQUANT() As nullable (of int64)
            Get
                return _SQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Manual Quantity", value, "^[0-9\-]+$") then Exit Property
                _IsSetSQUANT = True
                If loading Then
                  _SQUANT = Value
                Else
                    if not _SQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code/Manual"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(14),  _
         twodBarcode("SBARCODE")>  _
        Public Property SBARCODE() As String
            Get
                return _SBARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code/Manual", value, "^.{0,16}$") then Exit Property
                _IsSetSBARCODE = True
                If loading Then
                  _SBARCODE = Value
                Else
                    if not _SBARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SBARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SBARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Code"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(15),  _
         twodBarcode("XCOLORCODE")>  _
        Public Property XCOLORCODE() As String
            Get
                return _XCOLORCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color Code", value, "^.{0,2}$") then Exit Property
                _IsSetXCOLORCODE = True
                If loading Then
                  _XCOLORCODE = Value
                Else
                    if not _XCOLORCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLORCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLORCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Name"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("XCOLORNAME")>  _
        Public Property XCOLORNAME() As String
            Get
                return _XCOLORNAME
            End Get
            Set
                if not(value is nothing) then
                  _XCOLORNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Distribution Type"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(30),  _
         twodBarcode("DISTRTYPECODE")>  _
        Public Property DISTRTYPECODE() As String
            Get
                return _DISTRTYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distribution Type", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRTYPECODE = True
                If loading Then
                  _DISTRTYPECODE = Value
                Else
                    if not _DISTRTYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRTYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRTYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Type Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRTYPEDES")>  _
        Public Property DISTRTYPEDES() As String
            Get
                return _DISTRTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty in Assortment"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty in Assortment"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("XQUANT")>  _
        Public Property XQUANT() As nullable(of decimal)
            Get
                return _XQUANT
            End Get
            Set
                if not(value is nothing) then
                  _XQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Assortments"),  _
         nType("Edm.Int64"),  _
         tab("Qty in Assortment"),  _
         Pos(42),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Assortments", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty in Assortment"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Qty in Assortment"),  _
         Pos(46),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Operation"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(50),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Operation", value, "^.{0,16}$") then Exit Property
                _IsSetACTNAME = True
                If loading Then
                  _ACTNAME = Value
                Else
                    if not _ACTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Operation Descrip."),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(60),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(65),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(70),  _
         twodBarcode("TOCUSTNAME")>  _
        Public Property TOCUSTNAME() As String
            Get
                return _TOCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetTOCUSTNAME = True
                If loading Then
                  _TOCUSTNAME = Value
                Else
                    if not _TOCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(80),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(85),  _
         twodBarcode("CURCODE")>  _
        Public Property CURCODE() As String
            Get
                return _CURCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCURCODE = True
                If loading Then
                  _CURCODE = Value
                Else
                    if not _CURCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount(%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(100),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount(%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIX_SUBFORM() As QUERY_MATRIX
            Get
                return _MATRIX_SUBFORM
            End Get
            Set
                _MATRIX_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIXSUMTEXT_SUBFORM() As QUERY_MATRIXSUMTEXT
            Get
                return _MATRIXSUMTEXT_SUBFORM
            End Get
            Set
                _MATRIXSUMTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetSQUANT then
              if f then
                  jw.WriteRaw(", ""SQUANT"": ")
              else
                  jw.WriteRaw("""SQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.SQUANT)
            end if
            if _IsSetSBARCODE then
              if f then
                  jw.WriteRaw(", ""SBARCODE"": ")
              else
                  jw.WriteRaw("""SBARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SBARCODE)
            end if
            if _IsSetXCOLORCODE then
              if f then
                  jw.WriteRaw(", ""XCOLORCODE"": ")
              else
                  jw.WriteRaw("""XCOLORCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLORCODE)
            end if
            if _IsSetDISTRTYPECODE then
              if f then
                  jw.WriteRaw(", ""DISTRTYPECODE"": ")
              else
                  jw.WriteRaw("""DISTRTYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRTYPECODE)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetACTNAME then
              if f then
                  jw.WriteRaw(", ""ACTNAME"": ")
              else
                  jw.WriteRaw("""ACTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACTNAME)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetTOCUSTNAME then
              if f then
                  jw.WriteRaw(", ""TOCUSTNAME"": ")
              else
                  jw.WriteRaw("""TOCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOCUSTNAME)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetCURCODE then
              if f then
                  jw.WriteRaw(", ""CURCODE"": ")
              else
                  jw.WriteRaw("""CURCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURCODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _MATRIX_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIX_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIX in _MATRIX_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIX_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MATRIXSUMTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIXSUMTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIXSUMTEXT in _MATRIXSUMTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIXSUMTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIXSUM")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetSQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SQUANT")
              .WriteAttributeString("value", me.SQUANT)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SBARCODE")
              .WriteAttributeString("value", me.SBARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetXCOLORCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLORCODE")
              .WriteAttributeString("value", me.XCOLORCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetDISTRTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRTYPECODE")
              .WriteAttributeString("value", me.DISTRTYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetACTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACTNAME")
              .WriteAttributeString("value", me.ACTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTOCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOCUSTNAME")
              .WriteAttributeString("value", me.TOCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCURCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURCODE")
              .WriteAttributeString("value", me.CURCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _MATRIX_SUBFORM.value.count > 0 then
              for each itm as MATRIX in _MATRIX_SUBFORM.Value
                itm.toXML(xw,"MATRIX_SUBFORM")
              next
            end if
            if _MATRIXSUMTEXT_SUBFORM.value.count > 0 then
              for each itm as MATRIXSUMTEXT in _MATRIXSUMTEXT_SUBFORM.Value
                itm.toXML(xw,"MATRIXSUMTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUM = JsonConvert.DeserializeObject(Of MATRIXSUM)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _SQUANT = .SQUANT
                  _SBARCODE = .SBARCODE
                  _XCOLORCODE = .XCOLORCODE
                  _XCOLORNAME = .XCOLORNAME
                  _DISTRTYPECODE = .DISTRTYPECODE
                  _DISTRTYPEDES = .DISTRTYPEDES
                  _XQUANT = .XQUANT
                  _NUMPACK = .NUMPACK
                  _TOTQUANT = .TOTQUANT
                  _DUEDATE = .DUEDATE
                  _ACTNAME = .ACTNAME
                  _ACTDES = .ACTDES
                  _SERIALNAME = .SERIALNAME
                  _CUSTNAME = .CUSTNAME
                  _TOCUSTNAME = .TOCUSTNAME
                  _PRICE = .PRICE
                  _CURCODE = .CURCODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PERCENT = .PERCENT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_MATRIXSUM
        
        MATRIX = 0
        
        MATRIXSUMTEXT = 1
    End Enum
    
    <QueryTitle("Assortment")>  _
    Public Class QUERY_MATRIX
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIX)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIX)
            _Parent = nothing
            _Name = "MATRIX"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIX)
            _Parent = Parent
            _name = "MATRIX_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIX)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIX)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIX As MATRIX In JsonConvert.DeserializeObject(Of QUERY_MATRIX)(stream.ReadToEnd).Value
              With _MATRIX
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIX)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIX = JsonConvert.DeserializeObject(Of MATRIX)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIX)
                  .XCOLORCODE = obj.XCOLORCODE
                  .XCOLORNAME = obj.XCOLORNAME
                  .MULT = obj.MULT
                  .TOTALSUM = obj.TOTALSUM
                  .SIZE1 = obj.SIZE1
                  .SIZE2 = obj.SIZE2
                  .SIZE3 = obj.SIZE3
                  .SIZE4 = obj.SIZE4
                  .SIZE5 = obj.SIZE5
                  .SIZE6 = obj.SIZE6
                  .SIZE7 = obj.SIZE7
                  .SIZE8 = obj.SIZE8
                  .SIZE9 = obj.SIZE9
                  .SIZE10 = obj.SIZE10
                  .SIZE11 = obj.SIZE11
                  .SIZE12 = obj.SIZE12
                  .SIZE13 = obj.SIZE13
                  .SIZE14 = obj.SIZE14
                  .SIZE15 = obj.SIZE15
                  .SIZE16 = obj.SIZE16
                  .SIZE17 = obj.SIZE17
                  .SIZE18 = obj.SIZE18
                  .SIZE19 = obj.SIZE19
                  .SIZE20 = obj.SIZE20
                  .SIZE21 = obj.SIZE21
                  .SIZE22 = obj.SIZE22
                  .SIZE23 = obj.SIZE23
                  .SIZE24 = obj.SIZE24
                  .SIZE25 = obj.SIZE25
                  .SIZE26 = obj.SIZE26
                  .SIZE27 = obj.SIZE27
                  .SIZE28 = obj.SIZE28
                  .SIZE29 = obj.SIZE29
                  .SIZE30 = obj.SIZE30
                  .SIZE31 = obj.SIZE31
                  .SIZE32 = obj.SIZE32
                  .SIZE33 = obj.SIZE33
                  .SIZE34 = obj.SIZE34
                  .SIZE35 = obj.SIZE35
                  .SIZE36 = obj.SIZE36
                  .SIZE37 = obj.SIZE37
                  .SIZE38 = obj.SIZE38
                  .SIZE39 = obj.SIZE39
                  .SIZE40 = obj.SIZE40
                  .XCOLOR = obj.XCOLOR
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIX(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIX as MATRIX in value
              If _MATRIX.Equals(trycast(obj,MATRIX)) Then
                  value.remove(_MATRIX)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIX
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetXCOLORCODE As Boolean = Boolean.FalseString
        
        Private _XCOLORCODE As String
        
        Private _XCOLORNAME As String
        
        Private _IsSetMULT As Boolean = Boolean.FalseString
        
        Private _MULT As Long
        
        Private _TOTALSUM As Decimal
        
        Private _IsSetSIZE1 As Boolean = Boolean.FalseString
        
        Private _SIZE1 As Decimal
        
        Private _IsSetSIZE2 As Boolean = Boolean.FalseString
        
        Private _SIZE2 As Decimal
        
        Private _IsSetSIZE3 As Boolean = Boolean.FalseString
        
        Private _SIZE3 As Decimal
        
        Private _IsSetSIZE4 As Boolean = Boolean.FalseString
        
        Private _SIZE4 As Decimal
        
        Private _IsSetSIZE5 As Boolean = Boolean.FalseString
        
        Private _SIZE5 As Decimal
        
        Private _IsSetSIZE6 As Boolean = Boolean.FalseString
        
        Private _SIZE6 As Decimal
        
        Private _IsSetSIZE7 As Boolean = Boolean.FalseString
        
        Private _SIZE7 As Decimal
        
        Private _IsSetSIZE8 As Boolean = Boolean.FalseString
        
        Private _SIZE8 As Decimal
        
        Private _IsSetSIZE9 As Boolean = Boolean.FalseString
        
        Private _SIZE9 As Decimal
        
        Private _IsSetSIZE10 As Boolean = Boolean.FalseString
        
        Private _SIZE10 As Decimal
        
        Private _IsSetSIZE11 As Boolean = Boolean.FalseString
        
        Private _SIZE11 As Decimal
        
        Private _IsSetSIZE12 As Boolean = Boolean.FalseString
        
        Private _SIZE12 As Decimal
        
        Private _IsSetSIZE13 As Boolean = Boolean.FalseString
        
        Private _SIZE13 As Decimal
        
        Private _IsSetSIZE14 As Boolean = Boolean.FalseString
        
        Private _SIZE14 As Decimal
        
        Private _IsSetSIZE15 As Boolean = Boolean.FalseString
        
        Private _SIZE15 As Decimal
        
        Private _IsSetSIZE16 As Boolean = Boolean.FalseString
        
        Private _SIZE16 As Decimal
        
        Private _IsSetSIZE17 As Boolean = Boolean.FalseString
        
        Private _SIZE17 As Decimal
        
        Private _IsSetSIZE18 As Boolean = Boolean.FalseString
        
        Private _SIZE18 As Decimal
        
        Private _IsSetSIZE19 As Boolean = Boolean.FalseString
        
        Private _SIZE19 As Decimal
        
        Private _IsSetSIZE20 As Boolean = Boolean.FalseString
        
        Private _SIZE20 As Decimal
        
        Private _IsSetSIZE21 As Boolean = Boolean.FalseString
        
        Private _SIZE21 As Decimal
        
        Private _IsSetSIZE22 As Boolean = Boolean.FalseString
        
        Private _SIZE22 As Decimal
        
        Private _IsSetSIZE23 As Boolean = Boolean.FalseString
        
        Private _SIZE23 As Decimal
        
        Private _IsSetSIZE24 As Boolean = Boolean.FalseString
        
        Private _SIZE24 As Decimal
        
        Private _IsSetSIZE25 As Boolean = Boolean.FalseString
        
        Private _SIZE25 As Decimal
        
        Private _IsSetSIZE26 As Boolean = Boolean.FalseString
        
        Private _SIZE26 As Decimal
        
        Private _IsSetSIZE27 As Boolean = Boolean.FalseString
        
        Private _SIZE27 As Decimal
        
        Private _IsSetSIZE28 As Boolean = Boolean.FalseString
        
        Private _SIZE28 As Decimal
        
        Private _IsSetSIZE29 As Boolean = Boolean.FalseString
        
        Private _SIZE29 As Decimal
        
        Private _IsSetSIZE30 As Boolean = Boolean.FalseString
        
        Private _SIZE30 As Decimal
        
        Private _IsSetSIZE31 As Boolean = Boolean.FalseString
        
        Private _SIZE31 As Decimal
        
        Private _IsSetSIZE32 As Boolean = Boolean.FalseString
        
        Private _SIZE32 As Decimal
        
        Private _IsSetSIZE33 As Boolean = Boolean.FalseString
        
        Private _SIZE33 As Decimal
        
        Private _IsSetSIZE34 As Boolean = Boolean.FalseString
        
        Private _SIZE34 As Decimal
        
        Private _IsSetSIZE35 As Boolean = Boolean.FalseString
        
        Private _SIZE35 As Decimal
        
        Private _IsSetSIZE36 As Boolean = Boolean.FalseString
        
        Private _SIZE36 As Decimal
        
        Private _IsSetSIZE37 As Boolean = Boolean.FalseString
        
        Private _SIZE37 As Decimal
        
        Private _IsSetSIZE38 As Boolean = Boolean.FalseString
        
        Private _SIZE38 As Decimal
        
        Private _IsSetSIZE39 As Boolean = Boolean.FalseString
        
        Private _SIZE39 As Decimal
        
        Private _IsSetSIZE40 As Boolean = Boolean.FalseString
        
        Private _SIZE40 As Decimal
        
        Private _IsSetXCOLOR As Boolean = Boolean.FalseString
        
        Private _XCOLOR As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIX"
                else
                    return "MATRIX_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "XCOLOR={0}", _
                  string.format("{0}",XCOLOR) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Color Code"),  _
         nType("Edm.String"),  _
         tab("Color Code"),  _
         Pos(10),  _
         twodBarcode("XCOLORCODE")>  _
        Public Property XCOLORCODE() As String
            Get
                return _XCOLORCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color Code", value, "^.{0,2}$") then Exit Property
                _IsSetXCOLORCODE = True
                If loading Then
                  _XCOLORCODE = Value
                Else
                    if not _XCOLORCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLORCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLORCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Name"),  _
         nType("Edm.String"),  _
         tab("Color Code"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("XCOLORNAME")>  _
        Public Property XCOLORNAME() As String
            Get
                return _XCOLORNAME
            End Get
            Set
                if not(value is nothing) then
                  _XCOLORNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Number of Sets"),  _
         nType("Edm.Int64"),  _
         tab("Color Code"),  _
         Pos(20),  _
         twodBarcode("MULT")>  _
        Public Property MULT() As nullable (of int64)
            Get
                return _MULT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Number of Sets", value, "^[0-9\-]+$") then Exit Property
                _IsSetMULT = True
                If loading Then
                  _MULT = Value
                Else
                    if not _MULT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MULT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MULT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Color Code"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALSUM")>  _
        Public Property TOTALSUM() As nullable(of decimal)
            Get
                return _TOTALSUM
            End Get
            Set
                if not(value is nothing) then
                  _TOTALSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("1"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(60),  _
         twodBarcode("SIZE1")>  _
        Public Property SIZE1() As nullable(of decimal)
            Get
                return _SIZE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("1", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE1 = True
                If loading Then
                  _SIZE1 = Value
                Else
                    if not _SIZE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("2"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(70),  _
         twodBarcode("SIZE2")>  _
        Public Property SIZE2() As nullable(of decimal)
            Get
                return _SIZE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("2", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE2 = True
                If loading Then
                  _SIZE2 = Value
                Else
                    if not _SIZE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("3"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(80),  _
         twodBarcode("SIZE3")>  _
        Public Property SIZE3() As nullable(of decimal)
            Get
                return _SIZE3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("3", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE3 = True
                If loading Then
                  _SIZE3 = Value
                Else
                    if not _SIZE3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("4"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(90),  _
         twodBarcode("SIZE4")>  _
        Public Property SIZE4() As nullable(of decimal)
            Get
                return _SIZE4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("4", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE4 = True
                If loading Then
                  _SIZE4 = Value
                Else
                    if not _SIZE4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("5"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(100),  _
         twodBarcode("SIZE5")>  _
        Public Property SIZE5() As nullable(of decimal)
            Get
                return _SIZE5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("5", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE5 = True
                If loading Then
                  _SIZE5 = Value
                Else
                    if not _SIZE5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("6"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(110),  _
         twodBarcode("SIZE6")>  _
        Public Property SIZE6() As nullable(of decimal)
            Get
                return _SIZE6
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("6", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE6 = True
                If loading Then
                  _SIZE6 = Value
                Else
                    if not _SIZE6 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE6", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE6 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("7"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(120),  _
         twodBarcode("SIZE7")>  _
        Public Property SIZE7() As nullable(of decimal)
            Get
                return _SIZE7
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("7", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE7 = True
                If loading Then
                  _SIZE7 = Value
                Else
                    if not _SIZE7 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE7", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE7 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("8"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(130),  _
         twodBarcode("SIZE8")>  _
        Public Property SIZE8() As nullable(of decimal)
            Get
                return _SIZE8
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("8", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE8 = True
                If loading Then
                  _SIZE8 = Value
                Else
                    if not _SIZE8 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE8", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE8 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("9"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(140),  _
         twodBarcode("SIZE9")>  _
        Public Property SIZE9() As nullable(of decimal)
            Get
                return _SIZE9
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("9", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE9 = True
                If loading Then
                  _SIZE9 = Value
                Else
                    if not _SIZE9 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE9", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE9 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("10"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(150),  _
         twodBarcode("SIZE10")>  _
        Public Property SIZE10() As nullable(of decimal)
            Get
                return _SIZE10
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("10", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE10 = True
                If loading Then
                  _SIZE10 = Value
                Else
                    if not _SIZE10 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE10", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE10 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("11"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(160),  _
         twodBarcode("SIZE11")>  _
        Public Property SIZE11() As nullable(of decimal)
            Get
                return _SIZE11
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("11", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE11 = True
                If loading Then
                  _SIZE11 = Value
                Else
                    if not _SIZE11 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE11", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE11 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("12"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(170),  _
         twodBarcode("SIZE12")>  _
        Public Property SIZE12() As nullable(of decimal)
            Get
                return _SIZE12
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("12", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE12 = True
                If loading Then
                  _SIZE12 = Value
                Else
                    if not _SIZE12 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE12", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE12 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("13"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(180),  _
         twodBarcode("SIZE13")>  _
        Public Property SIZE13() As nullable(of decimal)
            Get
                return _SIZE13
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("13", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE13 = True
                If loading Then
                  _SIZE13 = Value
                Else
                    if not _SIZE13 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE13", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE13 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("14"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(190),  _
         twodBarcode("SIZE14")>  _
        Public Property SIZE14() As nullable(of decimal)
            Get
                return _SIZE14
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("14", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE14 = True
                If loading Then
                  _SIZE14 = Value
                Else
                    if not _SIZE14 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE14", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE14 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("15"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(200),  _
         twodBarcode("SIZE15")>  _
        Public Property SIZE15() As nullable(of decimal)
            Get
                return _SIZE15
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("15", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE15 = True
                If loading Then
                  _SIZE15 = Value
                Else
                    if not _SIZE15 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE15", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE15 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("16"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(210),  _
         twodBarcode("SIZE16")>  _
        Public Property SIZE16() As nullable(of decimal)
            Get
                return _SIZE16
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("16", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE16 = True
                If loading Then
                  _SIZE16 = Value
                Else
                    if not _SIZE16 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE16", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE16 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("17"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(220),  _
         twodBarcode("SIZE17")>  _
        Public Property SIZE17() As nullable(of decimal)
            Get
                return _SIZE17
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("17", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE17 = True
                If loading Then
                  _SIZE17 = Value
                Else
                    if not _SIZE17 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE17", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE17 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("18"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(230),  _
         twodBarcode("SIZE18")>  _
        Public Property SIZE18() As nullable(of decimal)
            Get
                return _SIZE18
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("18", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE18 = True
                If loading Then
                  _SIZE18 = Value
                Else
                    if not _SIZE18 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE18", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE18 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("19"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(240),  _
         twodBarcode("SIZE19")>  _
        Public Property SIZE19() As nullable(of decimal)
            Get
                return _SIZE19
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("19", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE19 = True
                If loading Then
                  _SIZE19 = Value
                Else
                    if not _SIZE19 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE19", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE19 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("20"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(250),  _
         twodBarcode("SIZE20")>  _
        Public Property SIZE20() As nullable(of decimal)
            Get
                return _SIZE20
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("20", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE20 = True
                If loading Then
                  _SIZE20 = Value
                Else
                    if not _SIZE20 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE20", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE20 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("21"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(260),  _
         twodBarcode("SIZE21")>  _
        Public Property SIZE21() As nullable(of decimal)
            Get
                return _SIZE21
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("21", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE21 = True
                If loading Then
                  _SIZE21 = Value
                Else
                    if not _SIZE21 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE21", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE21 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("22"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(270),  _
         twodBarcode("SIZE22")>  _
        Public Property SIZE22() As nullable(of decimal)
            Get
                return _SIZE22
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("22", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE22 = True
                If loading Then
                  _SIZE22 = Value
                Else
                    if not _SIZE22 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE22", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE22 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("23"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(280),  _
         twodBarcode("SIZE23")>  _
        Public Property SIZE23() As nullable(of decimal)
            Get
                return _SIZE23
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("23", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE23 = True
                If loading Then
                  _SIZE23 = Value
                Else
                    if not _SIZE23 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE23", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE23 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("24"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(290),  _
         twodBarcode("SIZE24")>  _
        Public Property SIZE24() As nullable(of decimal)
            Get
                return _SIZE24
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("24", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE24 = True
                If loading Then
                  _SIZE24 = Value
                Else
                    if not _SIZE24 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE24", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE24 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("25"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(300),  _
         twodBarcode("SIZE25")>  _
        Public Property SIZE25() As nullable(of decimal)
            Get
                return _SIZE25
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("25", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE25 = True
                If loading Then
                  _SIZE25 = Value
                Else
                    if not _SIZE25 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE25", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE25 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("26"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(310),  _
         twodBarcode("SIZE26")>  _
        Public Property SIZE26() As nullable(of decimal)
            Get
                return _SIZE26
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("26", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE26 = True
                If loading Then
                  _SIZE26 = Value
                Else
                    if not _SIZE26 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE26", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE26 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("27"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(320),  _
         twodBarcode("SIZE27")>  _
        Public Property SIZE27() As nullable(of decimal)
            Get
                return _SIZE27
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("27", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE27 = True
                If loading Then
                  _SIZE27 = Value
                Else
                    if not _SIZE27 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE27", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE27 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("28"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(330),  _
         twodBarcode("SIZE28")>  _
        Public Property SIZE28() As nullable(of decimal)
            Get
                return _SIZE28
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("28", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE28 = True
                If loading Then
                  _SIZE28 = Value
                Else
                    if not _SIZE28 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE28", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE28 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("29"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("29"),  _
         Pos(340),  _
         twodBarcode("SIZE29")>  _
        Public Property SIZE29() As nullable(of decimal)
            Get
                return _SIZE29
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("29", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE29 = True
                If loading Then
                  _SIZE29 = Value
                Else
                    if not _SIZE29 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE29", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE29 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("30"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("29"),  _
         Pos(350),  _
         twodBarcode("SIZE30")>  _
        Public Property SIZE30() As nullable(of decimal)
            Get
                return _SIZE30
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("30", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE30 = True
                If loading Then
                  _SIZE30 = Value
                Else
                    if not _SIZE30 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE30", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE30 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S31"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(355),  _
         twodBarcode("SIZE31")>  _
        Public Property SIZE31() As nullable(of decimal)
            Get
                return _SIZE31
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S31", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE31 = True
                If loading Then
                  _SIZE31 = Value
                Else
                    if not _SIZE31 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE31", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE31 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S32"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(360),  _
         twodBarcode("SIZE32")>  _
        Public Property SIZE32() As nullable(of decimal)
            Get
                return _SIZE32
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S32", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE32 = True
                If loading Then
                  _SIZE32 = Value
                Else
                    if not _SIZE32 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE32", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE32 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S33"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(365),  _
         twodBarcode("SIZE33")>  _
        Public Property SIZE33() As nullable(of decimal)
            Get
                return _SIZE33
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S33", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE33 = True
                If loading Then
                  _SIZE33 = Value
                Else
                    if not _SIZE33 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE33", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE33 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S34"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(370),  _
         twodBarcode("SIZE34")>  _
        Public Property SIZE34() As nullable(of decimal)
            Get
                return _SIZE34
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S34", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE34 = True
                If loading Then
                  _SIZE34 = Value
                Else
                    if not _SIZE34 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE34", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE34 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S35"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(375),  _
         twodBarcode("SIZE35")>  _
        Public Property SIZE35() As nullable(of decimal)
            Get
                return _SIZE35
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S35", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE35 = True
                If loading Then
                  _SIZE35 = Value
                Else
                    if not _SIZE35 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE35", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE35 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S36"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(380),  _
         twodBarcode("SIZE36")>  _
        Public Property SIZE36() As nullable(of decimal)
            Get
                return _SIZE36
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S36", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE36 = True
                If loading Then
                  _SIZE36 = Value
                Else
                    if not _SIZE36 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE36", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE36 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S37"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(385),  _
         twodBarcode("SIZE37")>  _
        Public Property SIZE37() As nullable(of decimal)
            Get
                return _SIZE37
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S37", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE37 = True
                If loading Then
                  _SIZE37 = Value
                Else
                    if not _SIZE37 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE37", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE37 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S38"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(390),  _
         twodBarcode("SIZE38")>  _
        Public Property SIZE38() As nullable(of decimal)
            Get
                return _SIZE38
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S38", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE38 = True
                If loading Then
                  _SIZE38 = Value
                Else
                    if not _SIZE38 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE38", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE38 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S39"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(395),  _
         twodBarcode("SIZE39")>  _
        Public Property SIZE39() As nullable(of decimal)
            Get
                return _SIZE39
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S39", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE39 = True
                If loading Then
                  _SIZE39 = Value
                Else
                    if not _SIZE39 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE39", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE39 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S40"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(400),  _
         twodBarcode("SIZE40")>  _
        Public Property SIZE40() As nullable(of decimal)
            Get
                return _SIZE40
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S40", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE40 = True
                If loading Then
                  _SIZE40 = Value
                Else
                    if not _SIZE40 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE40", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE40 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color (ID)"),  _
         nType("Edm.Int64"),  _
         tab("S37"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("XCOLOR")>  _
        Public Property XCOLOR() As nullable (of int64)
            Get
                return _XCOLOR
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetXCOLOR = True
                If loading Then
                  _XCOLOR = Value
                Else
                    if not _XCOLOR = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLOR", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLOR = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetXCOLORCODE then
              if f then
                  jw.WriteRaw(", ""XCOLORCODE"": ")
              else
                  jw.WriteRaw("""XCOLORCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLORCODE)
            end if
            if _IsSetMULT then
              if f then
                  jw.WriteRaw(", ""MULT"": ")
              else
                  jw.WriteRaw("""MULT"": ")
                  f = true
              end if
              jw.WriteValue(me.MULT)
            end if
            if _IsSetSIZE1 then
              if f then
                  jw.WriteRaw(", ""SIZE1"": ")
              else
                  jw.WriteRaw("""SIZE1"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE1)
            end if
            if _IsSetSIZE2 then
              if f then
                  jw.WriteRaw(", ""SIZE2"": ")
              else
                  jw.WriteRaw("""SIZE2"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE2)
            end if
            if _IsSetSIZE3 then
              if f then
                  jw.WriteRaw(", ""SIZE3"": ")
              else
                  jw.WriteRaw("""SIZE3"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE3)
            end if
            if _IsSetSIZE4 then
              if f then
                  jw.WriteRaw(", ""SIZE4"": ")
              else
                  jw.WriteRaw("""SIZE4"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE4)
            end if
            if _IsSetSIZE5 then
              if f then
                  jw.WriteRaw(", ""SIZE5"": ")
              else
                  jw.WriteRaw("""SIZE5"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE5)
            end if
            if _IsSetSIZE6 then
              if f then
                  jw.WriteRaw(", ""SIZE6"": ")
              else
                  jw.WriteRaw("""SIZE6"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE6)
            end if
            if _IsSetSIZE7 then
              if f then
                  jw.WriteRaw(", ""SIZE7"": ")
              else
                  jw.WriteRaw("""SIZE7"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE7)
            end if
            if _IsSetSIZE8 then
              if f then
                  jw.WriteRaw(", ""SIZE8"": ")
              else
                  jw.WriteRaw("""SIZE8"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE8)
            end if
            if _IsSetSIZE9 then
              if f then
                  jw.WriteRaw(", ""SIZE9"": ")
              else
                  jw.WriteRaw("""SIZE9"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE9)
            end if
            if _IsSetSIZE10 then
              if f then
                  jw.WriteRaw(", ""SIZE10"": ")
              else
                  jw.WriteRaw("""SIZE10"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE10)
            end if
            if _IsSetSIZE11 then
              if f then
                  jw.WriteRaw(", ""SIZE11"": ")
              else
                  jw.WriteRaw("""SIZE11"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE11)
            end if
            if _IsSetSIZE12 then
              if f then
                  jw.WriteRaw(", ""SIZE12"": ")
              else
                  jw.WriteRaw("""SIZE12"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE12)
            end if
            if _IsSetSIZE13 then
              if f then
                  jw.WriteRaw(", ""SIZE13"": ")
              else
                  jw.WriteRaw("""SIZE13"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE13)
            end if
            if _IsSetSIZE14 then
              if f then
                  jw.WriteRaw(", ""SIZE14"": ")
              else
                  jw.WriteRaw("""SIZE14"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE14)
            end if
            if _IsSetSIZE15 then
              if f then
                  jw.WriteRaw(", ""SIZE15"": ")
              else
                  jw.WriteRaw("""SIZE15"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE15)
            end if
            if _IsSetSIZE16 then
              if f then
                  jw.WriteRaw(", ""SIZE16"": ")
              else
                  jw.WriteRaw("""SIZE16"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE16)
            end if
            if _IsSetSIZE17 then
              if f then
                  jw.WriteRaw(", ""SIZE17"": ")
              else
                  jw.WriteRaw("""SIZE17"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE17)
            end if
            if _IsSetSIZE18 then
              if f then
                  jw.WriteRaw(", ""SIZE18"": ")
              else
                  jw.WriteRaw("""SIZE18"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE18)
            end if
            if _IsSetSIZE19 then
              if f then
                  jw.WriteRaw(", ""SIZE19"": ")
              else
                  jw.WriteRaw("""SIZE19"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE19)
            end if
            if _IsSetSIZE20 then
              if f then
                  jw.WriteRaw(", ""SIZE20"": ")
              else
                  jw.WriteRaw("""SIZE20"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE20)
            end if
            if _IsSetSIZE21 then
              if f then
                  jw.WriteRaw(", ""SIZE21"": ")
              else
                  jw.WriteRaw("""SIZE21"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE21)
            end if
            if _IsSetSIZE22 then
              if f then
                  jw.WriteRaw(", ""SIZE22"": ")
              else
                  jw.WriteRaw("""SIZE22"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE22)
            end if
            if _IsSetSIZE23 then
              if f then
                  jw.WriteRaw(", ""SIZE23"": ")
              else
                  jw.WriteRaw("""SIZE23"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE23)
            end if
            if _IsSetSIZE24 then
              if f then
                  jw.WriteRaw(", ""SIZE24"": ")
              else
                  jw.WriteRaw("""SIZE24"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE24)
            end if
            if _IsSetSIZE25 then
              if f then
                  jw.WriteRaw(", ""SIZE25"": ")
              else
                  jw.WriteRaw("""SIZE25"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE25)
            end if
            if _IsSetSIZE26 then
              if f then
                  jw.WriteRaw(", ""SIZE26"": ")
              else
                  jw.WriteRaw("""SIZE26"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE26)
            end if
            if _IsSetSIZE27 then
              if f then
                  jw.WriteRaw(", ""SIZE27"": ")
              else
                  jw.WriteRaw("""SIZE27"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE27)
            end if
            if _IsSetSIZE28 then
              if f then
                  jw.WriteRaw(", ""SIZE28"": ")
              else
                  jw.WriteRaw("""SIZE28"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE28)
            end if
            if _IsSetSIZE29 then
              if f then
                  jw.WriteRaw(", ""SIZE29"": ")
              else
                  jw.WriteRaw("""SIZE29"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE29)
            end if
            if _IsSetSIZE30 then
              if f then
                  jw.WriteRaw(", ""SIZE30"": ")
              else
                  jw.WriteRaw("""SIZE30"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE30)
            end if
            if _IsSetSIZE31 then
              if f then
                  jw.WriteRaw(", ""SIZE31"": ")
              else
                  jw.WriteRaw("""SIZE31"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE31)
            end if
            if _IsSetSIZE32 then
              if f then
                  jw.WriteRaw(", ""SIZE32"": ")
              else
                  jw.WriteRaw("""SIZE32"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE32)
            end if
            if _IsSetSIZE33 then
              if f then
                  jw.WriteRaw(", ""SIZE33"": ")
              else
                  jw.WriteRaw("""SIZE33"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE33)
            end if
            if _IsSetSIZE34 then
              if f then
                  jw.WriteRaw(", ""SIZE34"": ")
              else
                  jw.WriteRaw("""SIZE34"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE34)
            end if
            if _IsSetSIZE35 then
              if f then
                  jw.WriteRaw(", ""SIZE35"": ")
              else
                  jw.WriteRaw("""SIZE35"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE35)
            end if
            if _IsSetSIZE36 then
              if f then
                  jw.WriteRaw(", ""SIZE36"": ")
              else
                  jw.WriteRaw("""SIZE36"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE36)
            end if
            if _IsSetSIZE37 then
              if f then
                  jw.WriteRaw(", ""SIZE37"": ")
              else
                  jw.WriteRaw("""SIZE37"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE37)
            end if
            if _IsSetSIZE38 then
              if f then
                  jw.WriteRaw(", ""SIZE38"": ")
              else
                  jw.WriteRaw("""SIZE38"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE38)
            end if
            if _IsSetSIZE39 then
              if f then
                  jw.WriteRaw(", ""SIZE39"": ")
              else
                  jw.WriteRaw("""SIZE39"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE39)
            end if
            if _IsSetSIZE40 then
              if f then
                  jw.WriteRaw(", ""SIZE40"": ")
              else
                  jw.WriteRaw("""SIZE40"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE40)
            end if
            if _IsSetXCOLOR then
              if f then
                  jw.WriteRaw(", ""XCOLOR"": ")
              else
                  jw.WriteRaw("""XCOLOR"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLOR)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIX")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetXCOLORCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLORCODE")
              .WriteAttributeString("value", me.XCOLORCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetMULT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MULT")
              .WriteAttributeString("value", me.MULT)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSIZE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE1")
              .WriteAttributeString("value", me.SIZE1)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE2")
              .WriteAttributeString("value", me.SIZE2)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE3")
              .WriteAttributeString("value", me.SIZE3)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE4")
              .WriteAttributeString("value", me.SIZE4)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE5")
              .WriteAttributeString("value", me.SIZE5)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE6 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE6")
              .WriteAttributeString("value", me.SIZE6)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE7 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE7")
              .WriteAttributeString("value", me.SIZE7)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE8 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE8")
              .WriteAttributeString("value", me.SIZE8)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE9 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE9")
              .WriteAttributeString("value", me.SIZE9)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE10 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE10")
              .WriteAttributeString("value", me.SIZE10)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE11 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE11")
              .WriteAttributeString("value", me.SIZE11)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE12 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE12")
              .WriteAttributeString("value", me.SIZE12)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE13 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE13")
              .WriteAttributeString("value", me.SIZE13)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE14 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE14")
              .WriteAttributeString("value", me.SIZE14)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE15 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE15")
              .WriteAttributeString("value", me.SIZE15)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE16 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE16")
              .WriteAttributeString("value", me.SIZE16)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE17 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE17")
              .WriteAttributeString("value", me.SIZE17)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE18 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE18")
              .WriteAttributeString("value", me.SIZE18)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE19 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE19")
              .WriteAttributeString("value", me.SIZE19)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE20 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE20")
              .WriteAttributeString("value", me.SIZE20)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE21 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE21")
              .WriteAttributeString("value", me.SIZE21)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE22 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE22")
              .WriteAttributeString("value", me.SIZE22)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE23 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE23")
              .WriteAttributeString("value", me.SIZE23)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE24 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE24")
              .WriteAttributeString("value", me.SIZE24)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE25 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE25")
              .WriteAttributeString("value", me.SIZE25)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE26 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE26")
              .WriteAttributeString("value", me.SIZE26)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE27 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE27")
              .WriteAttributeString("value", me.SIZE27)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE28 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE28")
              .WriteAttributeString("value", me.SIZE28)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE29 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE29")
              .WriteAttributeString("value", me.SIZE29)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE30 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE30")
              .WriteAttributeString("value", me.SIZE30)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE31 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE31")
              .WriteAttributeString("value", me.SIZE31)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE32 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE32")
              .WriteAttributeString("value", me.SIZE32)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE33 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE33")
              .WriteAttributeString("value", me.SIZE33)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE34 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE34")
              .WriteAttributeString("value", me.SIZE34)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE35 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE35")
              .WriteAttributeString("value", me.SIZE35)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE36 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE36")
              .WriteAttributeString("value", me.SIZE36)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE37 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE37")
              .WriteAttributeString("value", me.SIZE37)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE38 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE38")
              .WriteAttributeString("value", me.SIZE38)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE39 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE39")
              .WriteAttributeString("value", me.SIZE39)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE40 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE40")
              .WriteAttributeString("value", me.SIZE40)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetXCOLOR then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", me.XCOLOR)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIX = JsonConvert.DeserializeObject(Of MATRIX)(e.StreamReader.ReadToEnd)
                With obj
                  _XCOLORCODE = .XCOLORCODE
                  _XCOLORNAME = .XCOLORNAME
                  _MULT = .MULT
                  _TOTALSUM = .TOTALSUM
                  _SIZE1 = .SIZE1
                  _SIZE2 = .SIZE2
                  _SIZE3 = .SIZE3
                  _SIZE4 = .SIZE4
                  _SIZE5 = .SIZE5
                  _SIZE6 = .SIZE6
                  _SIZE7 = .SIZE7
                  _SIZE8 = .SIZE8
                  _SIZE9 = .SIZE9
                  _SIZE10 = .SIZE10
                  _SIZE11 = .SIZE11
                  _SIZE12 = .SIZE12
                  _SIZE13 = .SIZE13
                  _SIZE14 = .SIZE14
                  _SIZE15 = .SIZE15
                  _SIZE16 = .SIZE16
                  _SIZE17 = .SIZE17
                  _SIZE18 = .SIZE18
                  _SIZE19 = .SIZE19
                  _SIZE20 = .SIZE20
                  _SIZE21 = .SIZE21
                  _SIZE22 = .SIZE22
                  _SIZE23 = .SIZE23
                  _SIZE24 = .SIZE24
                  _SIZE25 = .SIZE25
                  _SIZE26 = .SIZE26
                  _SIZE27 = .SIZE27
                  _SIZE28 = .SIZE28
                  _SIZE29 = .SIZE29
                  _SIZE30 = .SIZE30
                  _SIZE31 = .SIZE31
                  _SIZE32 = .SIZE32
                  _SIZE33 = .SIZE33
                  _SIZE34 = .SIZE34
                  _SIZE35 = .SIZE35
                  _SIZE36 = .SIZE36
                  _SIZE37 = .SIZE37
                  _SIZE38 = .SIZE38
                  _SIZE39 = .SIZE39
                  _SIZE40 = .SIZE40
                  _XCOLOR = .XCOLOR
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_MATRIXSUMTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIXSUMTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIXSUMTEXT)
            _Parent = nothing
            _Name = "MATRIXSUMTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIXSUMTEXT)
            _Parent = Parent
            _name = "MATRIXSUMTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIXSUMTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIXSUMTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIXSUMTEXT As MATRIXSUMTEXT In JsonConvert.DeserializeObject(Of QUERY_MATRIXSUMTEXT)(stream.ReadToEnd).Value
              With _MATRIXSUMTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIXSUMTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUMTEXT = JsonConvert.DeserializeObject(Of MATRIXSUMTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIXSUMTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIXSUMTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIXSUMTEXT as MATRIXSUMTEXT in value
              If _MATRIXSUMTEXT.Equals(trycast(obj,MATRIXSUMTEXT)) Then
                  value.remove(_MATRIXSUMTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIXSUMTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIXSUMTEXT"
                else
                    return "MATRIXSUMTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(4),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(5),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIXSUMTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUMTEXT = JsonConvert.DeserializeObject(Of MATRIXSUMTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Product Bundles")>  _
    Public Class QUERY_CPROFMODEL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFMODEL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFMODEL)
            _Parent = nothing
            _Name = "CPROFMODEL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFMODEL)
            _Parent = Parent
            _name = "CPROFMODEL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFMODEL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFMODEL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFMODEL As CPROFMODEL In JsonConvert.DeserializeObject(Of QUERY_CPROFMODEL)(stream.ReadToEnd).Value
              With _CPROFMODEL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFMODEL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFMODEL = JsonConvert.DeserializeObject(Of CPROFMODEL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFMODEL)
                  .MODELNAME = obj.MODELNAME
                  .MODELDES = obj.MODELDES
                  .QUANT = obj.QUANT
                  .DUEDATE = obj.DUEDATE
                  .MODEL = obj.MODEL
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFMODEL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFMODEL as CPROFMODEL in value
              If _CPROFMODEL.Equals(trycast(obj,CPROFMODEL)) Then
                  value.remove(_CPROFMODEL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFMODEL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetMODELNAME As Boolean = Boolean.FalseString
        
        Private _MODELNAME As String
        
        Private _MODELDES As String
        
        Private _IsSetQUANT As Boolean = Boolean.FalseString
        
        Private _QUANT As Decimal
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetMODEL As Boolean = Boolean.FalseString
        
        Private _MODEL As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFMODEL"
                else
                    return "CPROFMODEL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "MODEL={0}", _
                  string.format("{0}",MODEL) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Product Bundle"),  _
         Pos(10),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Product Bundle", value, "^.{0,6}$") then Exit Property
                _IsSetMODELNAME = True
                If loading Then
                  _MODELNAME = Value
                Else
                    if not _MODELNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODELNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODELNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bundle Description"),  _
         nType("Edm.String"),  _
         tab("Product Bundle"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("MODELDES")>  _
        Public Property MODELDES() As String
            Get
                return _MODELDES
            End Get
            Set
                if not(value is nothing) then
                  _MODELDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Product Bundle"),  _
         Pos(20),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetQUANT = True
                If loading Then
                  _QUANT = Value
                Else
                    if not _QUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Product Bundle"),  _
         Pos(30),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quote/Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Product Bundle"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("MODEL")>  _
        Public Property MODEL() As nullable (of int64)
            Get
                return _MODEL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quote/Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetMODEL = True
                If loading Then
                  _MODEL = Value
                Else
                    if not _MODEL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODEL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODEL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetMODELNAME then
              if f then
                  jw.WriteRaw(", ""MODELNAME"": ")
              else
                  jw.WriteRaw("""MODELNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MODELNAME)
            end if
            if _IsSetQUANT then
              if f then
                  jw.WriteRaw(", ""QUANT"": ")
              else
                  jw.WriteRaw("""QUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.QUANT)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetMODEL then
              if f then
                  jw.WriteRaw(", ""MODEL"": ")
              else
                  jw.WriteRaw("""MODEL"": ")
                  f = true
              end if
              jw.WriteValue(me.MODEL)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFMODEL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "MODEL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetMODELNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODELNAME")
              .WriteAttributeString("value", me.MODELNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUANT")
              .WriteAttributeString("value", me.QUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetMODEL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODEL")
              .WriteAttributeString("value", me.MODEL)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFMODEL = JsonConvert.DeserializeObject(Of CPROFMODEL)(e.StreamReader.ReadToEnd)
                With obj
                  _MODELNAME = .MODELNAME
                  _MODELDES = .MODELDES
                  _QUANT = .QUANT
                  _DUEDATE = .DUEDATE
                  _MODEL = .MODEL
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Price Quotes for Order")>  _
    Public Class QUERY_ORDERCPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERCPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERCPROF)
            _Parent = nothing
            _Name = "ORDERCPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERCPROF)
            _Parent = Parent
            _name = "ORDERCPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERCPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERCPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERCPROF As ORDERCPROF In JsonConvert.DeserializeObject(Of QUERY_ORDERCPROF)(stream.ReadToEnd).Value
              With _ORDERCPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERCPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERCPROF = JsonConvert.DeserializeObject(Of ORDERCPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERCPROF)
                  .CPROFNUM = obj.CPROFNUM
                  .PDATE = obj.PDATE
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .DETAILS = obj.DETAILS
                  .PROF = obj.PROF
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERCPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERCPROF as ORDERCPROF in value
              If _ORDERCPROF.Equals(trycast(obj,ORDERCPROF)) Then
                  value.remove(_ORDERCPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERCPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCPROFNUM As Boolean = Boolean.FalseString
        
        Private _CPROFNUM As String
        
        Private _PDATE As System.DateTimeOffset
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _IsSetPROF As Boolean = Boolean.FalseString
        
        Private _PROF As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERCPROF"
                else
                    return "ORDERCPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PROF={0}", _
                  string.format("{0}",PROF) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(30),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Quotation", value, "^.{0,16}$") then Exit Property
                _IsSetCPROFNUM = True
                If loading Then
                  _CPROFNUM = Value
                Else
                    if not _CPROFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CPROFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CPROFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quote Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Price Quotation"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Price Quotation"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Price Quotation"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("PROF")>  _
        Public Property PROF() As nullable (of int64)
            Get
                return _PROF
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quote (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPROF = True
                If loading Then
                  _PROF = Value
                Else
                    if not _PROF = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROF", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROF = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCPROFNUM then
              if f then
                  jw.WriteRaw(", ""CPROFNUM"": ")
              else
                  jw.WriteRaw("""CPROFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CPROFNUM)
            end if
            if _IsSetPROF then
              if f then
                  jw.WriteRaw(", ""PROF"": ")
              else
                  jw.WriteRaw("""PROF"": ")
                  f = true
              end if
              jw.WriteValue(me.PROF)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERCPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PROF")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCPROFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", me.CPROFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPROF then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROF")
              .WriteAttributeString("value", me.PROF)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERCPROF = JsonConvert.DeserializeObject(Of ORDERCPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _CPROFNUM = .CPROFNUM
                  _PDATE = .PDATE
                  _EXPIRYDATE = .EXPIRYDATE
                  _DETAILS = .DETAILS
                  _PROF = .PROF
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Tasks for Document")>  _
    Public Class QUERY_GENCUSTNOTES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of GENCUSTNOTES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = nothing
            _Name = "GENCUSTNOTES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = Parent
            _name = "GENCUSTNOTES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of GENCUSTNOTES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(GENCUSTNOTES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _GENCUSTNOTES As GENCUSTNOTES In JsonConvert.DeserializeObject(Of QUERY_GENCUSTNOTES)(stream.ReadToEnd).Value
              With _GENCUSTNOTES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_GENCUSTNOTES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, GENCUSTNOTES)
                  .CURDATE = obj.CURDATE
                  .USERLOGIN = obj.USERLOGIN
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .TILLDATE = obj.TILLDATE
                  .TILLDAY = obj.TILLDAY
                  .ETIME = obj.ETIME
                  .PLANNEDTIME = obj.PLANNEDTIME
                  .STATDES = obj.STATDES
                  .CLOSED = obj.CLOSED
                  .SUBJECT = obj.SUBJECT
                  .CUSTNOTE = obj.CUSTNOTE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .PRIO = obj.PRIO
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .EMAIL = obj.EMAIL
                  .SNAME = obj.SNAME
                  .SPHONENUM = obj.SPHONENUM
                  .SCELLPHONE = obj.SCELLPHONE
                  .EMAIL2 = obj.EMAIL2
                  .TOPICCODE = obj.TOPICCODE
                  .TOPICDES = obj.TOPICDES
                  .CUSTNOTETYPEDES = obj.CUSTNOTETYPEDES
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN2 = obj.USERLOGIN2
                  .USERLOGIN3 = obj.USERLOGIN3
                  .GROUPNAME = obj.GROUPNAME
                  .GROUPNAME2 = obj.GROUPNAME2
                  .GROUPNAME3 = obj.GROUPNAME3
                  .RESOURCENAME = obj.RESOURCENAME
                  .RESOURCENAME2 = obj.RESOURCENAME2
                  .RESOURCENAME3 = obj.RESOURCENAME3
                  .REMARK = obj.REMARK
                  .PREVCUSTNOTEA = obj.PREVCUSTNOTEA
                  .QUESTFCODE = obj.QUESTFCODE
                  .QUESTFDES = obj.QUESTFDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new GENCUSTNOTES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _GENCUSTNOTES as GENCUSTNOTES in value
              If _GENCUSTNOTES.Equals(trycast(obj,GENCUSTNOTES)) Then
                  value.remove(_GENCUSTNOTES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class GENCUSTNOTES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetTILLDATE As Boolean = Boolean.FalseString
        
        Private _TILLDATE As System.DateTimeOffset
        
        Private _TILLDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPLANNEDTIME As Boolean = Boolean.FalseString
        
        Private _PLANNEDTIME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetCLOSED As Boolean = Boolean.FalseString
        
        Private _CLOSED As String
        
        Private _IsSetSUBJECT As Boolean = Boolean.FalseString
        
        Private _SUBJECT As String
        
        Private _CUSTNOTE As Long
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _CELLPHONE As String
        
        Private _EMAIL As String
        
        Private _IsSetSNAME As Boolean = Boolean.FalseString
        
        Private _SNAME As String
        
        Private _SPHONENUM As String
        
        Private _SCELLPHONE As String
        
        Private _EMAIL2 As String
        
        Private _IsSetTOPICCODE As Boolean = Boolean.FalseString
        
        Private _TOPICCODE As String
        
        Private _TOPICDES As String
        
        Private _IsSetCUSTNOTETYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTNOTETYPEDES As String
        
        Private _IsSetREMINDFLAG As Boolean = Boolean.FalseString
        
        Private _REMINDFLAG As String
        
        Private _IsSetREMINDTIME As Boolean = Boolean.FalseString
        
        Private _REMINDTIME As String
        
        Private _IsSetUSERLOGIN2 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN2 As String
        
        Private _IsSetUSERLOGIN3 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN3 As String
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Private _IsSetGROUPNAME2 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME2 As String
        
        Private _IsSetGROUPNAME3 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME3 As String
        
        Private _IsSetRESOURCENAME As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME As String
        
        Private _IsSetRESOURCENAME2 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME2 As String
        
        Private _IsSetRESOURCENAME3 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME3 As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetPREVCUSTNOTEA As Boolean = Boolean.FalseString
        
        Private _PREVCUSTNOTEA As Long
        
        Private _IsSetQUESTFCODE As Boolean = Boolean.FalseString
        
        Private _QUESTFCODE As String
        
        Private _QUESTFDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _CUSTNOTESTEXT_SUBFORM As QUERY_CUSTNOTESTEXT
        
        Private _CUSTNQUESTLINES_SUBFORM As QUERY_CUSTNQUESTLINES
        
        Private _CUSTNQUESTTEXT_SUBFORM As QUERY_CUSTNQUESTTEXT
        
        Private _CUSTNOTEEXTFILE_SUBFORM As QUERY_CUSTNOTEEXTFILE
        
        Private _SUPNOTEEXTFILE_SUBFORM As QUERY_SUPNOTEEXTFILE
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CUSTNOTESIGN_SUBFORM As QUERY_CUSTNOTESIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "GENCUSTNOTES"
                else
                    return "GENCUSTNOTES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUSTNOTE={0}", _
                  string.format("{0}",CUSTNOTE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(10),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(12),  _
         twodBarcode("TILLDATE")>  _
        Public Property TILLDATE() As nullable (of DateTimeOffset)
            Get
                return _TILLDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetTILLDATE = True
                If loading Then
                  _TILLDATE = Value
                Else
                    if not _TILLDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TILLDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TILLDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TILLDAY")>  _
        Public Property TILLDAY() As String
            Get
                return _TILLDAY
            End Get
            Set
                if not(value is nothing) then
                  _TILLDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(16),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Appointment Duration"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(17),  _
         twodBarcode("PLANNEDTIME")>  _
        Public Property PLANNEDTIME() As String
            Get
                return _PLANNEDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Appointment Duration", value, "^.{0,6}$") then Exit Property
                _IsSetPLANNEDTIME = True
                If loading Then
                  _PLANNEDTIME = Value
                Else
                    if not _PLANNEDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(18),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Done?"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("CLOSED")>  _
        Public Property CLOSED() As String
            Get
                return _CLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Done?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSED = True
                If loading Then
                  _CLOSED = Value
                Else
                    if not _CLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Subject"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("SUBJECT")>  _
        Public Property SUBJECT() As String
            Get
                return _SUBJECT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subject", value, "^.{0,52}$") then Exit Property
                _IsSetSUBJECT = True
                If loading Then
                  _SUBJECT = Value
                Else
                    if not _SUBJECT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUBJECT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUBJECT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(25),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(31),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Priority"),  _
         Pos(33),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(34),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         twodBarcode("SNAME")>  _
        Public Property SNAME() As String
            Get
                return _SNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Contact", value, "^.{0,37}$") then Exit Property
                _IsSetSNAME = True
                If loading Then
                  _SNAME = Value
                Else
                    if not _SNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("SPHONENUM")>  _
        Public Property SPHONENUM() As String
            Get
                return _SPHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _SPHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Cell"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SCELLPHONE")>  _
        Public Property SCELLPHONE() As String
            Get
                return _SCELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _SCELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Email"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL2")>  _
        Public Property EMAIL2() As String
            Get
                return _EMAIL2
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         twodBarcode("TOPICCODE")>  _
        Public Property TOPICCODE() As String
            Get
                return _TOPICCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPICCODE = True
                If loading Then
                  _TOPICCODE = Value
                Else
                    if not _TOPICCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPICCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPICCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Description"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TOPICDES")>  _
        Public Property TOPICDES() As String
            Get
                return _TOPICDES
            End Get
            Set
                if not(value is nothing) then
                  _TOPICDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(45),  _
         twodBarcode("CUSTNOTETYPEDES")>  _
        Public Property CUSTNOTETYPEDES() As String
            Get
                return _CUSTNOTETYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Type", value, "^.{0,8}$") then Exit Property
                _IsSetCUSTNOTETYPEDES = True
                If loading Then
                  _CUSTNOTETYPEDES = Value
                Else
                    if not _CUSTNOTETYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNOTETYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNOTETYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(48),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remind?", value, "^.{0,1}$") then Exit Property
                _IsSetREMINDFLAG = True
                If loading Then
                  _REMINDFLAG = Value
                Else
                    if not _REMINDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(49),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Hrs/Mins in Advance", value, "^.{0,6}$") then Exit Property
                _IsSetREMINDTIME = True
                If loading Then
                  _REMINDTIME = Value
                Else
                    if not _REMINDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 2"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(50),  _
         twodBarcode("USERLOGIN2")>  _
        Public Property USERLOGIN2() As String
            Get
                return _USERLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 2", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN2 = True
                If loading Then
                  _USERLOGIN2 = Value
                Else
                    if not _USERLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 3"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(51),  _
         twodBarcode("USERLOGIN3")>  _
        Public Property USERLOGIN3() As String
            Get
                return _USERLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 3", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN3 = True
                If loading Then
                  _USERLOGIN3 = Value
                Else
                    if not _USERLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(210),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 2"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(212),  _
         twodBarcode("GROUPNAME2")>  _
        Public Property GROUPNAME2() As String
            Get
                return _GROUPNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 2", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME2 = True
                If loading Then
                  _GROUPNAME2 = Value
                Else
                    if not _GROUPNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 3"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(214),  _
         twodBarcode("GROUPNAME3")>  _
        Public Property GROUPNAME3() As String
            Get
                return _GROUPNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 3", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME3 = True
                If loading Then
                  _GROUPNAME3 = Value
                Else
                    if not _GROUPNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(220),  _
         twodBarcode("RESOURCENAME")>  _
        Public Property RESOURCENAME() As String
            Get
                return _RESOURCENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME = True
                If loading Then
                  _RESOURCENAME = Value
                Else
                    if not _RESOURCENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(221),  _
         twodBarcode("RESOURCENAME2")>  _
        Public Property RESOURCENAME2() As String
            Get
                return _RESOURCENAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME2 = True
                If loading Then
                  _RESOURCENAME2 = Value
                Else
                    if not _RESOURCENAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(222),  _
         twodBarcode("RESOURCENAME3")>  _
        Public Property RESOURCENAME3() As String
            Get
                return _RESOURCENAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME3 = True
                If loading Then
                  _RESOURCENAME3 = Value
                Else
                    if not _RESOURCENAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(225),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,32}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Task"),  _
         nType("Edm.Int64"),  _
         tab("Group Code"),  _
         Pos(230),  _
         twodBarcode("PREVCUSTNOTEA")>  _
        Public Property PREVCUSTNOTEA() As nullable (of int64)
            Get
                return _PREVCUSTNOTEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Original Task", value, "^[0-9\-]+$") then Exit Property
                _IsSetPREVCUSTNOTEA = True
                If loading Then
                  _PREVCUSTNOTEA = Value
                Else
                    if not _PREVCUSTNOTEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREVCUSTNOTEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREVCUSTNOTEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Format Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(250),  _
         twodBarcode("QUESTFCODE")>  _
        Public Property QUESTFCODE() As String
            Get
                return _QUESTFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Format Code", value, "^.{0,3}$") then Exit Property
                _IsSetQUESTFCODE = True
                If loading Then
                  _QUESTFCODE = Value
                Else
                    if not _QUESTFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUESTFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUESTFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Questionnaire Title"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFDES")>  _
        Public Property QUESTFDES() As String
            Get
                return _QUESTFDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(265),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESTEXT_SUBFORM() As QUERY_CUSTNOTESTEXT
            Get
                return _CUSTNOTESTEXT_SUBFORM
            End Get
            Set
                _CUSTNOTESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTLINES_SUBFORM() As QUERY_CUSTNQUESTLINES
            Get
                return _CUSTNQUESTLINES_SUBFORM
            End Get
            Set
                _CUSTNQUESTLINES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTTEXT_SUBFORM() As QUERY_CUSTNQUESTTEXT
            Get
                return _CUSTNQUESTTEXT_SUBFORM
            End Get
            Set
                _CUSTNQUESTTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTEEXTFILE_SUBFORM() As QUERY_CUSTNOTEEXTFILE
            Get
                return _CUSTNOTEEXTFILE_SUBFORM
            End Get
            Set
                _CUSTNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SUPNOTEEXTFILE_SUBFORM() As QUERY_SUPNOTEEXTFILE
            Get
                return _SUPNOTEEXTFILE_SUBFORM
            End Get
            Set
                _SUPNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESIGN_SUBFORM() As QUERY_CUSTNOTESIGN
            Get
                return _CUSTNOTESIGN_SUBFORM
            End Get
            Set
                _CUSTNOTESIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetTILLDATE then
              if f then
                  jw.WriteRaw(", ""TILLDATE"": ")
              else
                  jw.WriteRaw("""TILLDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TILLDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPLANNEDTIME then
              if f then
                  jw.WriteRaw(", ""PLANNEDTIME"": ")
              else
                  jw.WriteRaw("""PLANNEDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDTIME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCLOSED then
              if f then
                  jw.WriteRaw(", ""CLOSED"": ")
              else
                  jw.WriteRaw("""CLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSED)
            end if
            if _IsSetSUBJECT then
              if f then
                  jw.WriteRaw(", ""SUBJECT"": ")
              else
                  jw.WriteRaw("""SUBJECT"": ")
                  f = true
              end if
              jw.WriteValue(me.SUBJECT)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetSNAME then
              if f then
                  jw.WriteRaw(", ""SNAME"": ")
              else
                  jw.WriteRaw("""SNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SNAME)
            end if
            if _IsSetTOPICCODE then
              if f then
                  jw.WriteRaw(", ""TOPICCODE"": ")
              else
                  jw.WriteRaw("""TOPICCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPICCODE)
            end if
            if _IsSetCUSTNOTETYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTNOTETYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTNOTETYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNOTETYPEDES)
            end if
            if _IsSetREMINDFLAG then
              if f then
                  jw.WriteRaw(", ""REMINDFLAG"": ")
              else
                  jw.WriteRaw("""REMINDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDFLAG)
            end if
            if _IsSetREMINDTIME then
              if f then
                  jw.WriteRaw(", ""REMINDTIME"": ")
              else
                  jw.WriteRaw("""REMINDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDTIME)
            end if
            if _IsSetUSERLOGIN2 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN2"": ")
              else
                  jw.WriteRaw("""USERLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN2)
            end if
            if _IsSetUSERLOGIN3 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN3"": ")
              else
                  jw.WriteRaw("""USERLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN3)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
            if _IsSetGROUPNAME2 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME2"": ")
              else
                  jw.WriteRaw("""GROUPNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME2)
            end if
            if _IsSetGROUPNAME3 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME3"": ")
              else
                  jw.WriteRaw("""GROUPNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME3)
            end if
            if _IsSetRESOURCENAME then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME"": ")
              else
                  jw.WriteRaw("""RESOURCENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME)
            end if
            if _IsSetRESOURCENAME2 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME2"": ")
              else
                  jw.WriteRaw("""RESOURCENAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME2)
            end if
            if _IsSetRESOURCENAME3 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME3"": ")
              else
                  jw.WriteRaw("""RESOURCENAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME3)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetPREVCUSTNOTEA then
              if f then
                  jw.WriteRaw(", ""PREVCUSTNOTEA"": ")
              else
                  jw.WriteRaw("""PREVCUSTNOTEA"": ")
                  f = true
              end if
              jw.WriteValue(me.PREVCUSTNOTEA)
            end if
            if _IsSetQUESTFCODE then
              if f then
                  jw.WriteRaw(", ""QUESTFCODE"": ")
              else
                  jw.WriteRaw("""QUESTFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QUESTFCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTLINES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTLINES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SUPNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SUPNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "GENCUSTNOTES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUSTNOTE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTILLDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TILLDATE")
              .WriteAttributeString("value", me.TILLDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPLANNEDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDTIME")
              .WriteAttributeString("value", me.PLANNEDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSED")
              .WriteAttributeString("value", me.CLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUBJECT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUBJECT")
              .WriteAttributeString("value", me.SUBJECT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "52")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNAME")
              .WriteAttributeString("value", me.SNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetTOPICCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPICCODE")
              .WriteAttributeString("value", me.TOPICCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUSTNOTETYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNOTETYPEDES")
              .WriteAttributeString("value", me.CUSTNOTETYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetREMINDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDFLAG")
              .WriteAttributeString("value", me.REMINDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREMINDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDTIME")
              .WriteAttributeString("value", me.REMINDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN2")
              .WriteAttributeString("value", me.USERLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN3")
              .WriteAttributeString("value", me.USERLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME2")
              .WriteAttributeString("value", me.GROUPNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME3")
              .WriteAttributeString("value", me.GROUPNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME")
              .WriteAttributeString("value", me.RESOURCENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME2")
              .WriteAttributeString("value", me.RESOURCENAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME3")
              .WriteAttributeString("value", me.RESOURCENAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPREVCUSTNOTEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREVCUSTNOTEA")
              .WriteAttributeString("value", me.PREVCUSTNOTEA)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQUESTFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUESTFCODE")
              .WriteAttributeString("value", me.QUESTFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESTEXT_SUBFORM")
              next
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTLINES_SUBFORM")
              next
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTTEXT_SUBFORM")
              next
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTEEXTFILE_SUBFORM")
              next
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"SUPNOTEEXTFILE_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _USERLOGIN = .USERLOGIN
                  _DAY = .DAY
                  _STIME = .STIME
                  _TILLDATE = .TILLDATE
                  _TILLDAY = .TILLDAY
                  _ETIME = .ETIME
                  _PLANNEDTIME = .PLANNEDTIME
                  _STATDES = .STATDES
                  _CLOSED = .CLOSED
                  _SUBJECT = .SUBJECT
                  _CUSTNOTE = .CUSTNOTE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _PRIO = .PRIO
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _EMAIL = .EMAIL
                  _SNAME = .SNAME
                  _SPHONENUM = .SPHONENUM
                  _SCELLPHONE = .SCELLPHONE
                  _EMAIL2 = .EMAIL2
                  _TOPICCODE = .TOPICCODE
                  _TOPICDES = .TOPICDES
                  _CUSTNOTETYPEDES = .CUSTNOTETYPEDES
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN2 = .USERLOGIN2
                  _USERLOGIN3 = .USERLOGIN3
                  _GROUPNAME = .GROUPNAME
                  _GROUPNAME2 = .GROUPNAME2
                  _GROUPNAME3 = .GROUPNAME3
                  _RESOURCENAME = .RESOURCENAME
                  _RESOURCENAME2 = .RESOURCENAME2
                  _RESOURCENAME3 = .RESOURCENAME3
                  _REMARK = .REMARK
                  _PREVCUSTNOTEA = .PREVCUSTNOTEA
                  _QUESTFCODE = .QUESTFCODE
                  _QUESTFDES = .QUESTFDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_GENCUSTNOTES
        
        CUSTNOTESTEXT = 0
        
        CUSTNQUESTLINES = 1
        
        CUSTNQUESTTEXT = 2
        
        CUSTNOTEEXTFILE = 3
        
        SUPNOTEEXTFILE = 4
        
        DOCTODOLIST = 5
        
        DOCTODOLISTLOG = 6
        
        CUSTNOTESIGN = 7
    End Enum
    
    <QueryTitle("Notes")>  _
    Public Class QUERY_CUSTNOTESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = nothing
            _Name = "CUSTNOTESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = Parent
            _name = "CUSTNOTESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESTEXT As CUSTNOTESTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESTEXT)(stream.ReadToEnd).Value
              With _CUSTNOTESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESTEXT as CUSTNOTESTEXT in value
              If _CUSTNOTESTEXT.Equals(trycast(obj,CUSTNOTESTEXT)) Then
                  value.remove(_CUSTNOTESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESTEXT"
                else
                    return "CUSTNOTESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Responses to Questions")>  _
    Public Class QUERY_CUSTNQUESTLINES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTLINES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = nothing
            _Name = "CUSTNQUESTLINES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = Parent
            _name = "CUSTNQUESTLINES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTLINES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTLINES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTLINES As CUSTNQUESTLINES In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTLINES)(stream.ReadToEnd).Value
              With _CUSTNQUESTLINES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTLINES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTLINES)
                  .QUESTNUM = obj.QUESTNUM
                  .QUESTDES = obj.QUESTDES
                  .QGROUPDES = obj.QGROUPDES
                  .ANSNUM = obj.ANSNUM
                  .QUESTFADES = obj.QUESTFADES
                  .REMARK = obj.REMARK
                  .ATYPE = obj.ATYPE
                  .MANDATORY = obj.MANDATORY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTLINES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTLINES as CUSTNQUESTLINES in value
              If _CUSTNQUESTLINES.Equals(trycast(obj,CUSTNQUESTLINES)) Then
                  value.remove(_CUSTNQUESTLINES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTLINES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QUESTNUM As Long
        
        Private _QUESTDES As String
        
        Private _QGROUPDES As String
        
        Private _IsSetANSNUM As Boolean = Boolean.FalseString
        
        Private _ANSNUM As Long
        
        Private _QUESTFADES As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _ATYPE As String
        
        Private _MANDATORY As String
        
        Private _QUESTLINESTEXT_SUBFORM As QUERY_QUESTLINESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTLINES"
                else
                    return "CUSTNQUESTLINES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "QUESTNUM={0}", _
                  string.format("{0}",QUESTNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("No. (Question)"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTNUM")>  _
        Public Property QUESTNUM() As nullable (of int64)
            Get
                return _QUESTNUM
            End Get
            Set
                if not(value is nothing) then
                  _QUESTNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTDES")>  _
        Public Property QUESTDES() As String
            Get
                return _QUESTDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Category"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("QGROUPDES")>  _
        Public Property QGROUPDES() As String
            Get
                return _QGROUPDES
            End Get
            Set
                if not(value is nothing) then
                  _QGROUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Response"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(30),  _
         twodBarcode("ANSNUM")>  _
        Public Property ANSNUM() As nullable (of int64)
            Get
                return _ANSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Response", value, "^[0-9\-]+$") then Exit Property
                _IsSetANSNUM = True
                If loading Then
                  _ANSNUM = Value
                Else
                    if not _ANSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFADES")>  _
        Public Property QUESTFADES() As String
            Get
                return _QUESTFADES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFADES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(45),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,48}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response Type"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ATYPE")>  _
        Public Property ATYPE() As String
            Get
                return _ATYPE
            End Get
            Set
                if not(value is nothing) then
                  _ATYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Question?"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property QUESTLINESTEXT_SUBFORM() As QUERY_QUESTLINESTEXT
            Get
                return _QUESTLINESTEXT_SUBFORM
            End Get
            Set
                _QUESTLINESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANSNUM then
              if f then
                  jw.WriteRaw(", ""ANSNUM"": ")
              else
                  jw.WriteRaw("""ANSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ANSNUM)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", QUESTLINESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _QUESTLINESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTLINES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "QUESTNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANSNUM")
              .WriteAttributeString("value", me.ANSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.Value
                itm.toXML(xw,"QUESTLINESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With obj
                  _QUESTNUM = .QUESTNUM
                  _QUESTDES = .QUESTDES
                  _QGROUPDES = .QGROUPDES
                  _ANSNUM = .ANSNUM
                  _QUESTFADES = .QUESTFADES
                  _REMARK = .REMARK
                  _ATYPE = .ATYPE
                  _MANDATORY = .MANDATORY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNQUESTLINES
        
        QUESTLINESTEXT = 0
    End Enum
    
    <QueryTitle("Response (cont.)")>  _
    Public Class QUERY_QUESTLINESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of QUESTLINESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = nothing
            _Name = "QUESTLINESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = Parent
            _name = "QUESTLINESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of QUESTLINESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(QUESTLINESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _QUESTLINESTEXT As QUESTLINESTEXT In JsonConvert.DeserializeObject(Of QUERY_QUESTLINESTEXT)(stream.ReadToEnd).Value
              With _QUESTLINESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_QUESTLINESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, QUESTLINESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new QUESTLINESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _QUESTLINESTEXT as QUESTLINESTEXT in value
              If _QUESTLINESTEXT.Equals(trycast(obj,QUESTLINESTEXT)) Then
                  value.remove(_QUESTLINESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class QUESTLINESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "QUESTLINESTEXT"
                else
                    return "QUESTLINESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Rest of Response"),  _
         nType("Edm.String"),  _
         tab("Rest of Response"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rest of Response", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Rest of Response"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "QUESTLINESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Respondent's Remarks")>  _
    Public Class QUERY_CUSTNQUESTTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = nothing
            _Name = "CUSTNQUESTTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = Parent
            _name = "CUSTNQUESTTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTTEXT As CUSTNQUESTTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTTEXT)(stream.ReadToEnd).Value
              With _CUSTNQUESTTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTTEXT as CUSTNQUESTTEXT in value
              If _CUSTNQUESTTEXT.Equals(trycast(obj,CUSTNQUESTTEXT)) Then
                  value.remove(_CUSTNQUESTTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTTEXT"
                else
                    return "CUSTNQUESTTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Documents for Task")>  _
    Public Class QUERY_CUSTNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = nothing
            _Name = "CUSTNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = Parent
            _name = "CUSTNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTEEXTFILE As CUSTNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTEEXTFILE)(stream.ReadToEnd).Value
              With _CUSTNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .CUST = obj.CUST
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTEEXTFILE as CUSTNOTEEXTFILE in value
              If _CUSTNOTEEXTFILE.Equals(trycast(obj,CUSTNOTEEXTFILE)) Then
                  value.remove(_CUSTNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTEEXTFILE"
                else
                    return "CUSTNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0},EXTFILENUM={1}", _
                  string.format("{0}",CUST), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(32),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(45),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Modified"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Date Modified"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _CUST = .CUST
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Documents for Task")>  _
    Public Class QUERY_SUPNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SUPNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = nothing
            _Name = "SUPNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = Parent
            _name = "SUPNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SUPNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SUPNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SUPNOTEEXTFILE As SUPNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_SUPNOTEEXTFILE)(stream.ReadToEnd).Value
              With _SUPNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SUPNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SUPNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .SUP = obj.SUP
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SUPNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SUPNOTEEXTFILE as SUPNOTEEXTFILE in value
              If _SUPNOTEEXTFILE.Equals(trycast(obj,SUPNOTEEXTFILE)) Then
                  value.remove(_SUPNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SUPNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetSUP As Boolean = Boolean.FalseString
        
        Private _SUP As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SUPNOTEEXTFILE"
                else
                    return "SUPNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SUP={0},EXTFILENUM={1}", _
                  string.format("{0}",SUP), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(35),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Locked by"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("SUP")>  _
        Public Property SUP() As nullable (of int64)
            Get
                return _SUP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUP = True
                If loading Then
                  _SUP = Value
                Else
                    if not _SUP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetSUP then
              if f then
                  jw.WriteRaw(", ""SUP"": ")
              else
                  jw.WriteRaw("""SUP"": ")
                  f = true
              end if
              jw.WriteValue(me.SUP)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SUPNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", me.SUP)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _SUP = .SUP
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_SUPNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_CUSTNOTESIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = nothing
            _Name = "CUSTNOTESIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = Parent
            _name = "CUSTNOTESIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESIGN As CUSTNOTESIGN In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESIGN)(stream.ReadToEnd).Value
              With _CUSTNOTESIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESIGN)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESIGN as CUSTNOTESIGN in value
              If _CUSTNOTESIGN.Equals(trycast(obj,CUSTNOTESIGN)) Then
                  value.remove(_CUSTNOTESIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESIGN"
                else
                    return "CUSTNOTESIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Shipping Address")>  _
    Public Class QUERY_SHIPTO2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SHIPTO2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = nothing
            _Name = "SHIPTO2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = Parent
            _name = "SHIPTO2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SHIPTO2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SHIPTO2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SHIPTO2 As SHIPTO2 In JsonConvert.DeserializeObject(Of QUERY_SHIPTO2)(stream.ReadToEnd).Value
              With _SHIPTO2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SHIPTO2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SHIPTO2)
                  .CUSTDES = obj.CUSTDES
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .FAX = obj.FAX
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .CUSTDESA = obj.CUSTDESA
                  .NAMEA = obj.NAMEA
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .TAXCODE = obj.TAXCODE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SHIPTO2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SHIPTO2 as SHIPTO2 in value
              If _SHIPTO2.Equals(trycast(obj,SHIPTO2)) Then
                  value.remove(_SHIPTO2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SHIPTO2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetCUSTDESA As Boolean = Boolean.FalseString
        
        Private _CUSTDESA As String
        
        Private _IsSetNAMEA As Boolean = Boolean.FalseString
        
        Private _NAMEA As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SHIPTO2"
                else
                    return "SHIPTO2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(30),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(40),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,24}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(44),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(46),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(120),  _
         twodBarcode("CUSTDESA")>  _
        Public Property CUSTDESA() As String
            Get
                return _CUSTDESA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDESA = True
                If loading Then
                  _CUSTDESA = Value
                Else
                    if not _CUSTDESA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDESA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDESA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(130),  _
         twodBarcode("NAMEA")>  _
        Public Property NAMEA() As String
            Get
                return _NAMEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (Lang 2)", value, "^.{0,24}$") then Exit Property
                _IsSetNAMEA = True
                If loading Then
                  _NAMEA = Value
                Else
                    if not _NAMEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAMEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAMEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(160),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetCUSTDESA then
              if f then
                  jw.WriteRaw(", ""CUSTDESA"": ")
              else
                  jw.WriteRaw("""CUSTDESA"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDESA)
            end if
            if _IsSetNAMEA then
              if f then
                  jw.WriteRaw(", ""NAMEA"": ")
              else
                  jw.WriteRaw("""NAMEA"": ")
                  f = true
              end if
              jw.WriteValue(me.NAMEA)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SHIPTO2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetCUSTDESA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDESA")
              .WriteAttributeString("value", me.CUSTDESA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAMEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAMEA")
              .WriteAttributeString("value", me.NAMEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTDES = .CUSTDES
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _FAX = .FAX
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _CUSTDESA = .CUSTDESA
                  _NAMEA = .NAMEA
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                  _TAXCODE = .TAXCODE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Calendar (All Users)")>  _
    Public Class QUERY_FUTUREGENDIARY
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FUTUREGENDIARY)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FUTUREGENDIARY)
            _Parent = nothing
            _Name = "FUTUREGENDIARY"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Reminder of Appointment")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FUTUREGENDIARY)
            _Parent = Parent
            _name = "FUTUREGENDIARY_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Reminder of Appointment")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FUTUREGENDIARY)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FUTUREGENDIARY)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FUTUREGENDIARY As FUTUREGENDIARY In JsonConvert.DeserializeObject(Of QUERY_FUTUREGENDIARY)(stream.ReadToEnd).Value
              With _FUTUREGENDIARY
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FUTUREGENDIARY)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FUTUREGENDIARY = JsonConvert.DeserializeObject(Of FUTUREGENDIARY)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FUTUREGENDIARY)
                  .CURDATE = obj.CURDATE
                  .DAY = obj.DAY
                  .USERLOGIN = obj.USERLOGIN
                  .STIME = obj.STIME
                  .ETIME = obj.ETIME
                  .TEXT = obj.TEXT
                  .CUSTNOTE = obj.CUSTNOTE
                  .USER = obj.USER
                  .DIARY = obj.DIARY
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FUTUREGENDIARY(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FUTUREGENDIARY as FUTUREGENDIARY in value
              If _FUTUREGENDIARY.Equals(trycast(obj,FUTUREGENDIARY)) Then
                  value.remove(_FUTUREGENDIARY)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FUTUREGENDIARY
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DAY As String
        
        Private _USERLOGIN As String
        
        Private _STIME As String
        
        Private _ETIME As String
        
        Private _TEXT As String
        
        Private _CUSTNOTE As Long
        
        Private _USER As Long
        
        Private _DIARY As Long
        
        Private _KLINE As Long
        
        Private _DIARIESSIGNATURE_SUBFORM As QUERY_DIARIESSIGNATURE
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Reminder of Appointment"))
            _DIARIESSIGNATURE_SUBFORM = new QUERY_DIARIESSIGNATURE(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DIARIESSIGNATURE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Reminder of Appointment", _DIARIESSIGNATURE_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Reminder of Appointment"))
            _DIARIESSIGNATURE_SUBFORM = new QUERY_DIARIESSIGNATURE(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DIARIESSIGNATURE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Reminder of Appointment", _DIARIESSIGNATURE_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FUTUREGENDIARY"
                else
                    return "FUTUREGENDIARY_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURDATE={0},USER={1},KLINE={2}", _
                  string.format("{0}",CURDATE), _
                  string.format("{0}",USER), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Employee"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if not(value is nothing) then
                  _STIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if not(value is nothing) then
                  _ETIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Calendar Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Calendar Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DIARY")>  _
        Public Property DIARY() As nullable (of int64)
            Get
                return _DIARY
            End Get
            Set
                if not(value is nothing) then
                  _DIARY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Calendar Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DIARIESSIGNATURE_SUBFORM() As QUERY_DIARIESSIGNATURE
            Get
                return _DIARIESSIGNATURE_SUBFORM
            End Get
            Set
                _DIARIESSIGNATURE_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _DIARIESSIGNATURE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DIARIESSIGNATURE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DIARIESSIGNATURE in _DIARIESSIGNATURE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DIARIESSIGNATURE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FUTUREGENDIARY")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _DIARIESSIGNATURE_SUBFORM.value.count > 0 then
              for each itm as DIARIESSIGNATURE in _DIARIESSIGNATURE_SUBFORM.Value
                itm.toXML(xw,"DIARIESSIGNATURE_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FUTUREGENDIARY = JsonConvert.DeserializeObject(Of FUTUREGENDIARY)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DAY = .DAY
                  _USERLOGIN = .USERLOGIN
                  _STIME = .STIME
                  _ETIME = .ETIME
                  _TEXT = .TEXT
                  _CUSTNOTE = .CUSTNOTE
                  _USER = .USER
                  _DIARY = .DIARY
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_FUTUREGENDIARY
        
        DIARIESSIGNATURE = 0
    End Enum
    
    <QueryTitle("Reminder of Appointment")>  _
    Public Class QUERY_DIARIESSIGNATURE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DIARIESSIGNATURE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DIARIESSIGNATURE)
            _Parent = nothing
            _Name = "DIARIESSIGNATURE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DIARIESSIGNATURE)
            _Parent = Parent
            _name = "DIARIESSIGNATURE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DIARIESSIGNATURE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DIARIESSIGNATURE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DIARIESSIGNATURE As DIARIESSIGNATURE In JsonConvert.DeserializeObject(Of QUERY_DIARIESSIGNATURE)(stream.ReadToEnd).Value
              With _DIARIESSIGNATURE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DIARIESSIGNATURE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DIARIESSIGNATURE = JsonConvert.DeserializeObject(Of DIARIESSIGNATURE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DIARIESSIGNATURE)
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DIARY = obj.DIARY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DIARIESSIGNATURE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DIARIESSIGNATURE as DIARIESSIGNATURE in value
              If _DIARIESSIGNATURE.Equals(trycast(obj,DIARIESSIGNATURE)) Then
                  value.remove(_DIARIESSIGNATURE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DIARIESSIGNATURE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _REMINDFLAG As String
        
        Private _REMINDTIME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _DIARY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DIARIESSIGNATURE"
                else
                    return "DIARIESSIGNATURE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DIARY={0}", _
                  string.format("{0}",DIARY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Remind?"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if not(value is nothing) then
                  _REMINDFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Remind?"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if not(value is nothing) then
                  _REMINDTIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Remind?"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Remind?"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Calendar Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Remind?"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DIARY")>  _
        Public Property DIARY() As nullable (of int64)
            Get
                return _DIARY
            End Get
            Set
                if not(value is nothing) then
                  _DIARY = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DIARIESSIGNATURE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DIARY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DIARIESSIGNATURE = JsonConvert.DeserializeObject(Of DIARIESSIGNATURE)(e.StreamReader.ReadToEnd)
                With obj
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DIARY = .DIARY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Assemblies for the Order")>  _
    Public Class QUERY_ORDDOC_H
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDDOC_H)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDDOC_H)
            _Parent = nothing
            _Name = "ORDDOC_H"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDDOC_H)
            _Parent = Parent
            _name = "ORDDOC_H_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDDOC_H)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDDOC_H)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDDOC_H As ORDDOC_H In JsonConvert.DeserializeObject(Of QUERY_ORDDOC_H)(stream.ReadToEnd).Value
              With _ORDDOC_H
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDDOC_H)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDDOC_H = JsonConvert.DeserializeObject(Of ORDDOC_H)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDDOC_H)
                  .DOCNO = obj.DOCNO
                  .CURDATE = obj.CURDATE
                  .DETAILS = obj.DETAILS
                  .DOC = obj.DOC
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDDOC_H(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDDOC_H as ORDDOC_H in value
              If _ORDDOC_H.Equals(trycast(obj,ORDDOC_H)) Then
                  value.remove(_ORDDOC_H)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDDOC_H
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCNO As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _DOC As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDDOC_H"
                else
                    return "ORDDOC_H_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assembly Document"),  _
         nType("Edm.String"),  _
         tab("Assembly Document"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assembly Document"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assembly Document"),  _
         Pos(410),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Assembly Document"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Assembly Document"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDDOC_H")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDDOC_H = JsonConvert.DeserializeObject(Of ORDDOC_H)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _CURDATE = .CURDATE
                  _DETAILS = .DETAILS
                  _DOC = .DOC
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Order Status (Financial)")>  _
    Public Class QUERY_ORDFNCBAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDFNCBAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDFNCBAL)
            _Parent = nothing
            _Name = "ORDFNCBAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDFNCBAL)
            _Parent = Parent
            _name = "ORDFNCBAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDFNCBAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDFNCBAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDFNCBAL As ORDFNCBAL In JsonConvert.DeserializeObject(Of QUERY_ORDFNCBAL)(stream.ReadToEnd).Value
              With _ORDFNCBAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDFNCBAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDFNCBAL = JsonConvert.DeserializeObject(Of ORDFNCBAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDFNCBAL)
                  .BALDATE = obj.BALDATE
                  .DEBIT1 = obj.DEBIT1
                  .CREDIT1 = obj.CREDIT1
                  .SUM = obj.SUM
                  .BAL = obj.BAL
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .FNCNUM = obj.FNCNUM
                  .GLNAME = obj.GLNAME
                  .BOOKNUM = obj.BOOKNUM
                  .FNCDATE = obj.FNCDATE
                  .FRECONNUM = obj.FRECONNUM
                  .IACCNAME = obj.IACCNAME
                  .IACCDES = obj.IACCDES
                  .DEBIT3 = obj.DEBIT3
                  .CREDIT3 = obj.CREDIT3
                  .CODE = obj.CODE
                  .BUDCODE = obj.BUDCODE
                  .COSTCNAME = obj.COSTCNAME
                  .COSTCDES = obj.COSTCDES
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDFNCBAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDFNCBAL as ORDFNCBAL in value
              If _ORDFNCBAL.Equals(trycast(obj,ORDFNCBAL)) Then
                  value.remove(_ORDFNCBAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDFNCBAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _DEBIT1 As Decimal
        
        Private _CREDIT1 As Decimal
        
        Private _SUM As Decimal
        
        Private _BAL As Decimal
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _FNCNUM As String
        
        Private _GLNAME As String
        
        Private _BOOKNUM As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FRECONNUM As Long
        
        Private _IACCNAME As String
        
        Private _IACCDES As String
        
        Private _DEBIT3 As Decimal
        
        Private _CREDIT3 As Decimal
        
        Private _CODE As String
        
        Private _BUDCODE As String
        
        Private _COSTCNAME As String
        
        Private _COSTCDES As String
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDFNCBAL"
                else
                    return "ORDFNCBAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transact Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transact Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Transact Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DEBIT1")>  _
        Public Property DEBIT1() As nullable(of decimal)
            Get
                return _DEBIT1
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Transact Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT1")>  _
        Public Property CREDIT1() As nullable(of decimal)
            Get
                return _CREDIT1
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Transact Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("SUM")>  _
        Public Property SUM() As nullable(of decimal)
            Get
                return _SUM
            End Get
            Set
                if not(value is nothing) then
                  _SUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Transact Date"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("BAL")>  _
        Public Property BAL() As nullable(of decimal)
            Get
                return _BAL
            End Get
            Set
                if not(value is nothing) then
                  _BAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reference"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Journal Entry No."),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Fiscal Year"),  _
         nType("Edm.String"),  _
         tab("Journal Entry No."),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("GLNAME")>  _
        Public Property GLNAME() As String
            Get
                return _GLNAME
            End Get
            Set
                if not(value is nothing) then
                  _GLNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Journal Entry No."),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if not(value is nothing) then
                  _BOOKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Journal Entry No."),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Acct Reconcil. No."),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry No."),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("FRECONNUM")>  _
        Public Property FRECONNUM() As nullable (of int64)
            Get
                return _FRECONNUM
            End Get
            Set
                if not(value is nothing) then
                  _FRECONNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contra Account"),  _
         nType("Edm.String"),  _
         tab("Journal Entry No."),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("IACCNAME")>  _
        Public Property IACCNAME() As String
            Get
                return _IACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _IACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contra Acct Descrip"),  _
         nType("Edm.String"),  _
         tab("Journal Entry No."),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("IACCDES")>  _
        Public Property IACCDES() As String
            Get
                return _IACCDES
            End Get
            Set
                if not(value is nothing) then
                  _IACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit (Trans. Curr)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(12),  _
         tab("Journal Entry No."),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("DEBIT3")>  _
        Public Property DEBIT3() As nullable(of decimal)
            Get
                return _DEBIT3
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit (Trans. Curr)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(12),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT3")>  _
        Public Property CREDIT3() As nullable(of decimal)
            Get
                return _CREDIT3
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if not(value is nothing) then
                  _BUDCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre"),  _
         nType("Edm.String"),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if not(value is nothing) then
                  _COSTCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre Desc."),  _
         nType("Edm.String"),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES")>  _
        Public Property COSTCDES() As String
            Get
                return _COSTCDES
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Credit (Trans. Curr)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDFNCBAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDFNCBAL = JsonConvert.DeserializeObject(Of ORDFNCBAL)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _DEBIT1 = .DEBIT1
                  _CREDIT1 = .CREDIT1
                  _SUM = .SUM
                  _BAL = .BAL
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _FNCNUM = .FNCNUM
                  _GLNAME = .GLNAME
                  _BOOKNUM = .BOOKNUM
                  _FNCDATE = .FNCDATE
                  _FRECONNUM = .FRECONNUM
                  _IACCNAME = .IACCNAME
                  _IACCDES = .IACCDES
                  _DEBIT3 = .DEBIT3
                  _CREDIT3 = .CREDIT3
                  _CODE = .CODE
                  _BUDCODE = .BUDCODE
                  _COSTCNAME = .COSTCNAME
                  _COSTCDES = .COSTCDES
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoices and Receipts for Order")>  _
    Public Class QUERY_ORDINVOICES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDINVOICES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDINVOICES)
            _Parent = nothing
            _Name = "ORDINVOICES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Payments on Invoice")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDINVOICES)
            _Parent = Parent
            _name = "ORDINVOICES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Payments on Invoice")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDINVOICES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDINVOICES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDINVOICES As ORDINVOICES In JsonConvert.DeserializeObject(Of QUERY_ORDINVOICES)(stream.ReadToEnd).Value
              With _ORDINVOICES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDINVOICES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDINVOICES = JsonConvert.DeserializeObject(Of ORDINVOICES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDINVOICES)
                  .IVDATE = obj.IVDATE
                  .IVDES = obj.IVDES
                  .IVNUM = obj.IVNUM
                  .DEBIT = obj.DEBIT
                  .DETAILS = obj.DETAILS
                  .DISPRICE = obj.DISPRICE
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .IVTYPE = obj.IVTYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDINVOICES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDINVOICES as ORDINVOICES in value
              If _ORDINVOICES.Equals(trycast(obj,ORDINVOICES)) Then
                  value.remove(_ORDINVOICES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDINVOICES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVDES As String
        
        Private _IVNUM As String
        
        Private _DEBIT As String
        
        Private _DETAILS As String
        
        Private _DISPRICE As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _IVTYPE As String
        
        Private _IVCFNCITEMS_SUBFORM As QUERY_IVCFNCITEMS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Payments on Invoice"))
            _IVCFNCITEMS_SUBFORM = new QUERY_IVCFNCITEMS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_IVCFNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Payments on Invoice"))
            _IVCFNCITEMS_SUBFORM = new QUERY_IVCFNCITEMS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_IVCFNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDINVOICES"
                else
                    return "ORDINVOICES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},IVTYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",IVTYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(18),  _
         [ReadOnly](true),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Before Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount Owing"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IVTYPE")>  _
        Public Property IVTYPE() As String
            Get
                return _IVTYPE
            End Get
            Set
                if not(value is nothing) then
                  _IVTYPE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVCFNCITEMS_SUBFORM() As QUERY_IVCFNCITEMS
            Get
                return _IVCFNCITEMS_SUBFORM
            End Get
            Set
                _IVCFNCITEMS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IVCFNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVCFNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVCFNCITEMS in _IVCFNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVCFNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDINVOICES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVTYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IVCFNCITEMS_SUBFORM.value.count > 0 then
              for each itm as IVCFNCITEMS in _IVCFNCITEMS_SUBFORM.Value
                itm.toXML(xw,"IVCFNCITEMS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDINVOICES = JsonConvert.DeserializeObject(Of ORDINVOICES)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVDES = .IVDES
                  _IVNUM = .IVNUM
                  _DEBIT = .DEBIT
                  _DETAILS = .DETAILS
                  _DISPRICE = .DISPRICE
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _IVTYPE = .IVTYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_ORDINVOICES
        
        IVCFNCITEMS = 0
    End Enum
    
    <QueryTitle("Payments on Invoice")>  _
    Public Class QUERY_IVCFNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVCFNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVCFNCITEMS)
            _Parent = nothing
            _Name = "IVCFNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVCFNCITEMS)
            _Parent = Parent
            _name = "IVCFNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVCFNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVCFNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVCFNCITEMS As IVCFNCITEMS In JsonConvert.DeserializeObject(Of QUERY_IVCFNCITEMS)(stream.ReadToEnd).Value
              With _IVCFNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVCFNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVCFNCITEMS = JsonConvert.DeserializeObject(Of IVCFNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVCFNCITEMS)
                  .BALDATE = obj.BALDATE
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .DEBIT = obj.DEBIT
                  .CREDIT = obj.CREDIT
                  .CODE = obj.CODE
                  .FNCNUM = obj.FNCNUM
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVCFNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVCFNCITEMS as IVCFNCITEMS in value
              If _IVCFNCITEMS.Equals(trycast(obj,IVCFNCITEMS)) Then
                  value.remove(_IVCFNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVCFNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _DEBIT As Decimal
        
        Private _CREDIT As Decimal
        
        Private _CODE As String
        
        Private _FNCNUM As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVCFNCITEMS"
                else
                    return "IVCFNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transaction Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transaction Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Number"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Transaction Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As nullable(of decimal)
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Transaction Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Refer. 2"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Refer. 2"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Refer. 2"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Refer. 2"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVCFNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVCFNCITEMS = JsonConvert.DeserializeObject(Of IVCFNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _DEBIT = .DEBIT
                  _CREDIT = .CREDIT
                  _CODE = .CODE
                  _FNCNUM = .FNCNUM
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoice Items for Order")>  _
    Public Class QUERY_ORDINVOICEITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDINVOICEITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDINVOICEITEMS)
            _Parent = nothing
            _Name = "ORDINVOICEITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDINVOICEITEMS)
            _Parent = Parent
            _name = "ORDINVOICEITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDINVOICEITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDINVOICEITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDINVOICEITEMS As ORDINVOICEITEMS In JsonConvert.DeserializeObject(Of QUERY_ORDINVOICEITEMS)(stream.ReadToEnd).Value
              With _ORDINVOICEITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDINVOICEITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDINVOICEITEMS = JsonConvert.DeserializeObject(Of ORDINVOICEITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDINVOICEITEMS)
                  .IVDATE = obj.IVDATE
                  .IVDES = obj.IVDES
                  .IVNUM = obj.IVNUM
                  .LINE = obj.LINE
                  .DEBIT = obj.DEBIT
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDINVOICEITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDINVOICEITEMS as ORDINVOICEITEMS in value
              If _ORDINVOICEITEMS.Equals(trycast(obj,ORDINVOICEITEMS)) Then
                  value.remove(_ORDINVOICEITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDINVOICEITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVDES As String
        
        Private _IVNUM As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _DEBIT As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDINVOICEITEMS"
                else
                    return "ORDINVOICEITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total Price Incl Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDINVOICEITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDINVOICEITEMS = JsonConvert.DeserializeObject(Of ORDINVOICEITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVDES = .IVDES
                  _IVNUM = .IVNUM
                  _LINE = .LINE
                  _DEBIT = .DEBIT
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Active Price Quotations")>  _
    Public Class QUERY_ORDCPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDCPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDCPROF)
            _Parent = nothing
            _Name = "ORDCPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDCPROF)
            _Parent = Parent
            _name = "ORDCPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDCPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDCPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDCPROF As ORDCPROF In JsonConvert.DeserializeObject(Of QUERY_ORDCPROF)(stream.ReadToEnd).Value
              With _ORDCPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDCPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCPROF = JsonConvert.DeserializeObject(Of ORDCPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDCPROF)
                  .PDATE = obj.PDATE
                  .CPROFNUM = obj.CPROFNUM
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .COPYFLAG = obj.COPYFLAG
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .STATDES = obj.STATDES
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .PROF = obj.PROF
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDCPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDCPROF as ORDCPROF in value
              If _ORDCPROF.Equals(trycast(obj,ORDCPROF)) Then
                  value.remove(_ORDCPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDCPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PDATE As System.DateTimeOffset
        
        Private _CPROFNUM As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _COPYFLAG As String
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _STATDES As String
        
        Private _LCODE As String
        
        Private _LEXCH As Decimal
        
        Private _PROF As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDCPROF"
                else
                    return "ORDCPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CPROFNUM={0}", _
                  string.format("'{0}'",CPROFNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Quote Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Quote Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Quote Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if not(value is nothing) then
                  _CPROFNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Quote Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Copy All to Order?"),  _
         nType("Edm.String"),  _
         tab("Quote Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("COPYFLAG")>  _
        Public Property COPYFLAG() As String
            Get
                return _COPYFLAG
            End Get
            Set
                if not(value is nothing) then
                  _COPYFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Quote Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quote Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quote Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quote Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if not(value is nothing) then
                  _LCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if not(value is nothing) then
                  _LEXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PROF")>  _
        Public Property PROF() As nullable (of int64)
            Get
                return _PROF
            End Get
            Set
                if not(value is nothing) then
                  _PROF = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDCPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCPROF = JsonConvert.DeserializeObject(Of ORDCPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _PDATE = .PDATE
                  _CPROFNUM = .CPROFNUM
                  _EXPIRYDATE = .EXPIRYDATE
                  _COPYFLAG = .COPYFLAG
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _STATDES = .STATDES
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _PROF = .PROF
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Linkage Details")>  _
    Public Class QUERY_LINKING
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINKING)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINKING)
            _Parent = nothing
            _Name = "LINKING"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINKING)
            _Parent = Parent
            _name = "LINKING_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINKING)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINKING)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINKING As LINKING In JsonConvert.DeserializeObject(Of QUERY_LINKING)(stream.ReadToEnd).Value
              With _LINKING
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINKING)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKING = JsonConvert.DeserializeObject(Of LINKING)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINKING)
                  .CODE = obj.CODE
                  .SHARE = obj.SHARE
                  .BVALUE = obj.BVALUE
                  .BASEDATE = obj.BASEDATE
                  .SUPPLYAPPOINTTERM2 = obj.SUPPLYAPPOINTTERM2
                  .TERMFLAG = obj.TERMFLAG
                  .CURRENCY = obj.CURRENCY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINKING(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINKING as LINKING in value
              If _LINKING.Equals(trycast(obj,LINKING)) Then
                  value.remove(_LINKING)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINKING
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetSHARE As Boolean = Boolean.FalseString
        
        Private _SHARE As Decimal
        
        Private _IsSetBVALUE As Boolean = Boolean.FalseString
        
        Private _BVALUE As Decimal
        
        Private _IsSetBASEDATE As Boolean = Boolean.FalseString
        
        Private _BASEDATE As System.DateTimeOffset
        
        Private _IsSetSUPPLYAPPOINTTERM2 As Boolean = Boolean.FalseString
        
        Private _SUPPLYAPPOINTTERM2 As Long
        
        Private _IsSetTERMFLAG As Boolean = Boolean.FalseString
        
        Private _TERMFLAG As String
        
        Private _IsSetCURRENCY As Boolean = Boolean.FalseString
        
        Private _CURRENCY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINKING"
                else
                    return "LINKING_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURRENCY={0}", _
                  string.format("{0}",CURRENCY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(20),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Percent of Composite"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("SHARE")>  _
        Public Property SHARE() As nullable(of decimal)
            Get
                return _SHARE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent of Composite", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSHARE = True
                If loading Then
                  _SHARE = Value
                Else
                    if not _SHARE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHARE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHARE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("BVALUE")>  _
        Public Property BVALUE() As nullable(of decimal)
            Get
                return _BVALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetBVALUE = True
                If loading Then
                  _BVALUE = Value
                Else
                    if not _BVALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BVALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BVALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(50),  _
         twodBarcode("BASEDATE")>  _
        Public Property BASEDATE() As nullable (of DateTimeOffset)
            Get
                return _BASEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Date", value, "^.*$") then Exit Property
                _IsSetBASEDATE = True
                If loading Then
                  _BASEDATE = Value
                Else
                    if not _BASEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BASEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BASEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Latest Linkage-mnths"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(60),  _
         twodBarcode("SUPPLYAPPOINTTERM2")>  _
        Public Property SUPPLYAPPOINTTERM2() As nullable (of int64)
            Get
                return _SUPPLYAPPOINTTERM2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Latest Linkage-mnths", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUPPLYAPPOINTTERM2 = True
                If loading Then
                  _SUPPLYAPPOINTTERM2 = Value
                Else
                    if not _SUPPLYAPPOINTTERM2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPPLYAPPOINTTERM2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPPLYAPPOINTTERM2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Linkage from Header"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(70),  _
         twodBarcode("TERMFLAG")>  _
        Public Property TERMFLAG() As String
            Get
                return _TERMFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linkage from Header", value, "^.{0,1}$") then Exit Property
                _IsSetTERMFLAG = True
                If loading Then
                  _TERMFLAG = Value
                Else
                    if not _TERMFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TERMFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TERMFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Currency (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(70),  _
         Browsable(false),  _
         twodBarcode("CURRENCY")>  _
        Public Property CURRENCY() As nullable (of int64)
            Get
                return _CURRENCY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Currency (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCURRENCY = True
                If loading Then
                  _CURRENCY = Value
                Else
                    if not _CURRENCY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURRENCY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURRENCY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetSHARE then
              if f then
                  jw.WriteRaw(", ""SHARE"": ")
              else
                  jw.WriteRaw("""SHARE"": ")
                  f = true
              end if
              jw.WriteValue(me.SHARE)
            end if
            if _IsSetBVALUE then
              if f then
                  jw.WriteRaw(", ""BVALUE"": ")
              else
                  jw.WriteRaw("""BVALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.BVALUE)
            end if
            if _IsSetBASEDATE then
              if f then
                  jw.WriteRaw(", ""BASEDATE"": ")
              else
                  jw.WriteRaw("""BASEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.BASEDATE)
            end if
            if _IsSetSUPPLYAPPOINTTERM2 then
              if f then
                  jw.WriteRaw(", ""SUPPLYAPPOINTTERM2"": ")
              else
                  jw.WriteRaw("""SUPPLYAPPOINTTERM2"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPPLYAPPOINTTERM2)
            end if
            if _IsSetTERMFLAG then
              if f then
                  jw.WriteRaw(", ""TERMFLAG"": ")
              else
                  jw.WriteRaw("""TERMFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.TERMFLAG)
            end if
            if _IsSetCURRENCY then
              if f then
                  jw.WriteRaw(", ""CURRENCY"": ")
              else
                  jw.WriteRaw("""CURRENCY"": ")
                  f = true
              end if
              jw.WriteValue(me.CURRENCY)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINKING")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetSHARE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHARE")
              .WriteAttributeString("value", me.SHARE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetBVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BVALUE")
              .WriteAttributeString("value", me.BVALUE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetBASEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BASEDATE")
              .WriteAttributeString("value", me.BASEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetSUPPLYAPPOINTTERM2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPPLYAPPOINTTERM2")
              .WriteAttributeString("value", me.SUPPLYAPPOINTTERM2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTERMFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TERMFLAG")
              .WriteAttributeString("value", me.TERMFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCURRENCY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", me.CURRENCY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKING = JsonConvert.DeserializeObject(Of LINKING)(e.StreamReader.ReadToEnd)
                With obj
                  _CODE = .CODE
                  _SHARE = .SHARE
                  _BVALUE = .BVALUE
                  _BASEDATE = .BASEDATE
                  _SUPPLYAPPOINTTERM2 = .SUPPLYAPPOINTTERM2
                  _TERMFLAG = .TERMFLAG
                  _CURRENCY = .CURRENCY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Distribution List")>  _
    Public Class QUERY_ORDCUSTDISTR
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDCUSTDISTR)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDCUSTDISTR)
            _Parent = nothing
            _Name = "ORDCUSTDISTR"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDCUSTDISTR)
            _Parent = Parent
            _name = "ORDCUSTDISTR_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDCUSTDISTR)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDCUSTDISTR)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDCUSTDISTR As ORDCUSTDISTR In JsonConvert.DeserializeObject(Of QUERY_ORDCUSTDISTR)(stream.ReadToEnd).Value
              With _ORDCUSTDISTR
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDCUSTDISTR)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCUSTDISTR = JsonConvert.DeserializeObject(Of ORDCUSTDISTR)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDCUSTDISTR)
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DISTRTYPECODE = obj.DISTRTYPECODE
                  .DISTRTYPEDES = obj.DISTRTYPEDES
                  .CUST = obj.CUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDCUSTDISTR(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDCUSTDISTR as ORDCUSTDISTR in value
              If _ORDCUSTDISTR.Equals(trycast(obj,ORDCUSTDISTR)) Then
                  value.remove(_ORDCUSTDISTR)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDCUSTDISTR
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDISTRTYPECODE As Boolean = Boolean.FalseString
        
        Private _DISTRTYPECODE As String
        
        Private _DISTRTYPEDES As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDCUSTDISTR"
                else
                    return "ORDCUSTDISTR_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0}", _
                  string.format("{0}",CUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Distribution Type"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("DISTRTYPECODE")>  _
        Public Property DISTRTYPECODE() As String
            Get
                return _DISTRTYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distribution Type", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRTYPECODE = True
                If loading Then
                  _DISTRTYPECODE = Value
                Else
                    if not _DISTRTYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRTYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRTYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Type Desc."),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRTYPEDES")>  _
        Public Property DISTRTYPEDES() As String
            Get
                return _DISTRTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDISTRTYPECODE then
              if f then
                  jw.WriteRaw(", ""DISTRTYPECODE"": ")
              else
                  jw.WriteRaw("""DISTRTYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRTYPECODE)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDCUSTDISTR")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDISTRTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRTYPECODE")
              .WriteAttributeString("value", me.DISTRTYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCUSTDISTR = JsonConvert.DeserializeObject(Of ORDCUSTDISTR)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DISTRTYPECODE = .DISTRTYPECODE
                  _DISTRTYPEDES = .DISTRTYPEDES
                  _CUST = .CUST
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments")>  _
    Public Class QUERY_EXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = nothing
            _Name = "EXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = Parent
            _name = "EXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILES As EXTFILES In JsonConvert.DeserializeObject(Of QUERY_EXTFILES)(stream.ReadToEnd).Value
              With _EXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILES)
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .CURDATE = obj.CURDATE
                  .NOSEND = obj.NOSEND
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .EI_COND = obj.EI_COND
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILES as EXTFILES in value
              If _EXTFILES.Equals(trycast(obj,EXTFILES)) Then
                  value.remove(_EXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _IsSetEI_COND As Boolean = Boolean.FalseString
        
        Private _EI_COND As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILES"
                else
                    return "EXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0}", _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Creation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Creation Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(55),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Send by DataExchange"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(99),  _
         twodBarcode("EI_COND")>  _
        Public Property EI_COND() As String
            Get
                return _EI_COND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send by DataExchange", value, "^.{0,1}$") then Exit Property
                _IsSetEI_COND = True
                If loading Then
                  _EI_COND = Value
                Else
                    if not _EI_COND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EI_COND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EI_COND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Send by DataExchange"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetEI_COND then
              if f then
                  jw.WriteRaw(", ""EI_COND"": ")
              else
                  jw.WriteRaw("""EI_COND"": ")
                  f = true
              end if
              jw.WriteValue(me.EI_COND)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEI_COND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EI_COND")
              .WriteAttributeString("value", me.EI_COND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _CURDATE = .CURDATE
                  _NOSEND = .NOSEND
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _EI_COND = .EI_COND
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_EXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Rep Commission for Order")>  _
    Public Class QUERY_ORDCOMITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDCOMITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDCOMITEMS)
            _Parent = nothing
            _Name = "ORDCOMITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDCOMITEMS)
            _Parent = Parent
            _name = "ORDCOMITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDCOMITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDCOMITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDCOMITEMS As ORDCOMITEMS In JsonConvert.DeserializeObject(Of QUERY_ORDCOMITEMS)(stream.ReadToEnd).Value
              With _ORDCOMITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDCOMITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCOMITEMS = JsonConvert.DeserializeObject(Of ORDCOMITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDCOMITEMS)
                  .CURDATE = obj.CURDATE
                  .COMNUM = obj.COMNUM
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .COMMISSION = obj.COMMISSION
                  .CODE = obj.CODE
                  .DETAILS = obj.DETAILS
                  .COM = obj.COM
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDCOMITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDCOMITEMS as ORDCOMITEMS in value
              If _ORDCOMITEMS.Equals(trycast(obj,ORDCOMITEMS)) Then
                  value.remove(_ORDCOMITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDCOMITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _COMNUM As String
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _COMMISSION As Decimal
        
        Private _CODE As String
        
        Private _DETAILS As String
        
        Private _COM As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDCOMITEMS"
                else
                    return "ORDCOMITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "COM={0},KLINE={1}", _
                  string.format("{0}",COM), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Commission Doc. No."),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("COMNUM")>  _
        Public Property COMNUM() As String
            Get
                return _COMNUM
            End Get
            Set
                if not(value is nothing) then
                  _COMNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if not(value is nothing) then
                  _AGENTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount of Commission"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("COMMISSION")>  _
        Public Property COMMISSION() As nullable(of decimal)
            Get
                return _COMMISSION
            End Get
            Set
                if not(value is nothing) then
                  _COMMISSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Commission (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("COM")>  _
        Public Property COM() As nullable (of int64)
            Get
                return _COM
            End Get
            Set
                if not(value is nothing) then
                  _COM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDCOMITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "COM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCOMITEMS = JsonConvert.DeserializeObject(Of ORDCOMITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _COMNUM = .COMNUM
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _COMMISSION = .COMMISSION
                  _CODE = .CODE
                  _DETAILS = .DETAILS
                  _COM = .COM
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Order - Customer Details")>  _
    Public Class QUERY_ORDERSCONT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERSCONT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERSCONT)
            _Parent = nothing
            _Name = "ORDERSCONT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERSCONT)
            _Parent = Parent
            _name = "ORDERSCONT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERSCONT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERSCONT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERSCONT As ORDERSCONT In JsonConvert.DeserializeObject(Of QUERY_ORDERSCONT)(stream.ReadToEnd).Value
              With _ORDERSCONT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERSCONT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERSCONT = JsonConvert.DeserializeObject(Of ORDERSCONT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERSCONT)
                  .ADRS = obj.ADRS
                  .ADRS2 = obj.ADRS2
                  .ADRS3 = obj.ADRS3
                  .STATEA = obj.STATEA
                  .STATENAME = obj.STATENAME
                  .STATE = obj.STATE
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ZIP = obj.ZIP
                  .PHONE = obj.PHONE
                  .FAX = obj.FAX
                  .EMAIL = obj.EMAIL
                  .CASHNAME = obj.CASHNAME
                  .CASHDES = obj.CASHDES
                  .PAYCUSTNAME = obj.PAYCUSTNAME
                  .PAYCSTDES = obj.PAYCSTDES
                  .TAXCODE = obj.TAXCODE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .NSCUST = obj.NSCUST
                  .ORDNAME = obj.ORDNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERSCONT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERSCONT as ORDERSCONT in value
              If _ORDERSCONT.Equals(trycast(obj,ORDERSCONT)) Then
                  value.remove(_ORDERSCONT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERSCONT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetADRS As Boolean = Boolean.FalseString
        
        Private _ADRS As String
        
        Private _IsSetADRS2 As Boolean = Boolean.FalseString
        
        Private _ADRS2 As String
        
        Private _IsSetADRS3 As Boolean = Boolean.FalseString
        
        Private _ADRS3 As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetEMAIL As Boolean = Boolean.FalseString
        
        Private _EMAIL As String
        
        Private _IsSetCASHNAME As Boolean = Boolean.FalseString
        
        Private _CASHNAME As String
        
        Private _CASHDES As String
        
        Private _IsSetPAYCUSTNAME As Boolean = Boolean.FalseString
        
        Private _PAYCUSTNAME As String
        
        Private _PAYCSTDES As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetNSCUST As Boolean = Boolean.FalseString
        
        Private _NSCUST As Long
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERSCONT"
                else
                    return "ORDERSCONT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(10),  _
         twodBarcode("ADRS")>  _
        Public Property ADRS() As String
            Get
                return _ADRS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADRS = True
                If loading Then
                  _ADRS = Value
                Else
                    if not _ADRS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(11),  _
         twodBarcode("ADRS2")>  _
        Public Property ADRS2() As String
            Get
                return _ADRS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS2 = True
                If loading Then
                  _ADRS2 = Value
                Else
                    if not _ADRS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(12),  _
         twodBarcode("ADRS3")>  _
        Public Property ADRS3() As String
            Get
                return _ADRS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS3 = True
                If loading Then
                  _ADRS3 = Value
                Else
                    if not _ADRS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(22),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(24),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City/State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(25),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City/State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(26),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(30),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(40),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As String
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(50),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(60),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("E-mail Address", value, "^.{0,48}$") then Exit Property
                _IsSetEMAIL = True
                If loading Then
                  _EMAIL = Value
                Else
                    if not _EMAIL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMAIL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMAIL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bank Account Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(63),  _
         twodBarcode("CASHNAME")>  _
        Public Property CASHNAME() As String
            Get
                return _CASHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bank Account Code", value, "^.{0,20}$") then Exit Property
                _IsSetCASHNAME = True
                If loading Then
                  _CASHNAME = Value
                Else
                    if not _CASHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CASHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CASHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bank Account Descrip"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("CASHDES")>  _
        Public Property CASHDES() As String
            Get
                return _CASHDES
            End Get
            Set
                if not(value is nothing) then
                  _CASHDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billing Customer"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(90),  _
         twodBarcode("PAYCUSTNAME")>  _
        Public Property PAYCUSTNAME() As String
            Get
                return _PAYCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Customer", value, "^.{0,16}$") then Exit Property
                _IsSetPAYCUSTNAME = True
                If loading Then
                  _PAYCUSTNAME = Value
                Else
                    if not _PAYCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCSTDES")>  _
        Public Property PAYCSTDES() As String
            Get
                return _PAYCSTDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYCSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(115),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("NSCUST")>  _
        Public Property NSCUST() As nullable (of int64)
            Get
                return _NSCUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetNSCUST = True
                If loading Then
                  _NSCUST = Value
                Else
                    if not _NSCUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NSCUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NSCUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetADRS then
              if f then
                  jw.WriteRaw(", ""ADRS"": ")
              else
                  jw.WriteRaw("""ADRS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS)
            end if
            if _IsSetADRS2 then
              if f then
                  jw.WriteRaw(", ""ADRS2"": ")
              else
                  jw.WriteRaw("""ADRS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS2)
            end if
            if _IsSetADRS3 then
              if f then
                  jw.WriteRaw(", ""ADRS3"": ")
              else
                  jw.WriteRaw("""ADRS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS3)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetEMAIL then
              if f then
                  jw.WriteRaw(", ""EMAIL"": ")
              else
                  jw.WriteRaw("""EMAIL"": ")
                  f = true
              end if
              jw.WriteValue(me.EMAIL)
            end if
            if _IsSetCASHNAME then
              if f then
                  jw.WriteRaw(", ""CASHNAME"": ")
              else
                  jw.WriteRaw("""CASHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CASHNAME)
            end if
            if _IsSetPAYCUSTNAME then
              if f then
                  jw.WriteRaw(", ""PAYCUSTNAME"": ")
              else
                  jw.WriteRaw("""PAYCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCUSTNAME)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetNSCUST then
              if f then
                  jw.WriteRaw(", ""NSCUST"": ")
              else
                  jw.WriteRaw("""NSCUST"": ")
                  f = true
              end if
              jw.WriteValue(me.NSCUST)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERSCONT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetADRS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS")
              .WriteAttributeString("value", me.ADRS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS2")
              .WriteAttributeString("value", me.ADRS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS3")
              .WriteAttributeString("value", me.ADRS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetEMAIL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMAIL")
              .WriteAttributeString("value", me.EMAIL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetCASHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CASHNAME")
              .WriteAttributeString("value", me.CASHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPAYCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCUSTNAME")
              .WriteAttributeString("value", me.PAYCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetNSCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NSCUST")
              .WriteAttributeString("value", me.NSCUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERSCONT = JsonConvert.DeserializeObject(Of ORDERSCONT)(e.StreamReader.ReadToEnd)
                With obj
                  _ADRS = .ADRS
                  _ADRS2 = .ADRS2
                  _ADRS3 = .ADRS3
                  _STATEA = .STATEA
                  _STATENAME = .STATENAME
                  _STATE = .STATE
                  _COUNTRYNAME = .COUNTRYNAME
                  _ZIP = .ZIP
                  _PHONE = .PHONE
                  _FAX = .FAX
                  _EMAIL = .EMAIL
                  _CASHNAME = .CASHNAME
                  _CASHDES = .CASHDES
                  _PAYCUSTNAME = .PAYCUSTNAME
                  _PAYCSTDES = .PAYCSTDES
                  _TAXCODE = .TAXCODE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _NSCUST = .NSCUST
                  _ORDNAME = .ORDNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_ORD_CHANGES_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORD_CHANGES_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORD_CHANGES_LOG)
            _Parent = nothing
            _Name = "ORD_CHANGES_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORD_CHANGES_LOG)
            _Parent = Parent
            _name = "ORD_CHANGES_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORD_CHANGES_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORD_CHANGES_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORD_CHANGES_LOG As ORD_CHANGES_LOG In JsonConvert.DeserializeObject(Of QUERY_ORD_CHANGES_LOG)(stream.ReadToEnd).Value
              With _ORD_CHANGES_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORD_CHANGES_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORD_CHANGES_LOG = JsonConvert.DeserializeObject(Of ORD_CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORD_CHANGES_LOG)
                  .TITLE = obj.TITLE
                  .LINE = obj.LINE
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORD_CHANGES_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORD_CHANGES_LOG as ORD_CHANGES_LOG in value
              If _ORD_CHANGES_LOG.Equals(trycast(obj,ORD_CHANGES_LOG)) Then
                  value.remove(_ORD_CHANGES_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORD_CHANGES_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORD_CHANGES_LOG"
                else
                    return "ORD_CHANGES_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Form"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Form"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORD_CHANGES_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORD_CHANGES_LOG = JsonConvert.DeserializeObject(Of ORD_CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _LINE = .LINE
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Credit")>  _
    Public Class QUERY_CUSTOBLIGO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = nothing
            _Name = "CUSTOBLIGO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = Parent
            _name = "CUSTOBLIGO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGO As CUSTOBLIGO In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGO)(stream.ReadToEnd).Value
              With _CUSTOBLIGO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGO)
                  .ORD_DEBIT = obj.ORD_DEBIT
                  .DOC_DEBIT = obj.DOC_DEBIT
                  .PROJ_DEBIT = obj.PROJ_DEBIT
                  .IV_DEBIT = obj.IV_DEBIT
                  .ACC_DEBIT = obj.ACC_DEBIT
                  .CHEQUE_DEBIT = obj.CHEQUE_DEBIT
                  .CODE = obj.CODE
                  .OLD = obj.OLD
                  .UPTO90 = obj.UPTO90
                  .UPTO60 = obj.UPTO60
                  .UPTO30 = obj.UPTO30
                  .FUTURE = obj.FUTURE
                  .TOTOLD = obj.TOTOLD
                  .CREDIT = obj.CREDIT
                  .MAX_CREDIT = obj.MAX_CREDIT
                  .CREDIT_DIFF = obj.CREDIT_DIFF
                  .CRCODE = obj.CRCODE
                  .OBLIGO = obj.OBLIGO
                  .MAX_OBLIGO = obj.MAX_OBLIGO
                  .OBLIGO_DIFF = obj.OBLIGO_DIFF
                  .OBCODE = obj.OBCODE
                  .STATDES = obj.STATDES
                  .RESTRICTDATE = obj.RESTRICTDATE
                  .WAITING = obj.WAITING
                  .THISMONTH = obj.THISMONTH
                  .NEXTMONTH = obj.NEXTMONTH
                  .TWOMONTHS = obj.TWOMONTHS
                  .FUTURECHEQUES = obj.FUTURECHEQUES
                  .SECURECHECKS = obj.SECURECHECKS
                  .CREDITCARDS = obj.CREDITCARDS
                  .MAX_CREDIT_ENV = obj.MAX_CREDIT_ENV
                  .CREDIT_ENV = obj.CREDIT_ENV
                  .CREDIT_ENV_DIFF = obj.CREDIT_ENV_DIFF
                  .CR_CODE_ENV = obj.CR_CODE_ENV
                  .MAX_OBLIGO_ENV = obj.MAX_OBLIGO_ENV
                  .OBLIGO_ENV = obj.OBLIGO_ENV
                  .OBLIGO_ENV_DIFF = obj.OBLIGO_ENV_DIFF
                  .OB_CODE_ENV = obj.OB_CODE_ENV
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .CUST = obj.CUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGO as CUSTOBLIGO in value
              If _CUSTOBLIGO.Equals(trycast(obj,CUSTOBLIGO)) Then
                  value.remove(_CUSTOBLIGO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORD_DEBIT As Decimal
        
        Private _DOC_DEBIT As Decimal
        
        Private _PROJ_DEBIT As Decimal
        
        Private _IV_DEBIT As Decimal
        
        Private _ACC_DEBIT As Decimal
        
        Private _CHEQUE_DEBIT As Decimal
        
        Private _CODE As String
        
        Private _OLD As Decimal
        
        Private _UPTO90 As Decimal
        
        Private _UPTO60 As Decimal
        
        Private _UPTO30 As Decimal
        
        Private _FUTURE As Decimal
        
        Private _TOTOLD As Decimal
        
        Private _CREDIT As Decimal
        
        Private _MAX_CREDIT As Decimal
        
        Private _CREDIT_DIFF As Decimal
        
        Private _CRCODE As String
        
        Private _OBLIGO As Decimal
        
        Private _MAX_OBLIGO As Decimal
        
        Private _OBLIGO_DIFF As Decimal
        
        Private _OBCODE As String
        
        Private _STATDES As String
        
        Private _RESTRICTDATE As System.DateTimeOffset
        
        Private _WAITING As Decimal
        
        Private _THISMONTH As Decimal
        
        Private _NEXTMONTH As Decimal
        
        Private _TWOMONTHS As Decimal
        
        Private _FUTURECHEQUES As Decimal
        
        Private _SECURECHECKS As Decimal
        
        Private _CREDITCARDS As Decimal
        
        Private _MAX_CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV_DIFF As Decimal
        
        Private _CR_CODE_ENV As String
        
        Private _MAX_OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV_DIFF As Decimal
        
        Private _OB_CODE_ENV As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _CUST As Long
        
        Private _OBLIGO_ORDERS_SUBFORM As QUERY_OBLIGO_ORDERS
        
        Private _OBLIGO_TRANS_SUBFORM As QUERY_OBLIGO_TRANS
        
        Private _OBLIGO_PROJ_SUBFORM As QUERY_OBLIGO_PROJ
        
        Private _OBLIGO_IV_SUBFORM As QUERY_OBLIGO_IV
        
        Private _OBLIGO_FNCITEMS_SUBFORM As QUERY_OBLIGO_FNCITEMS
        
        Private _OBLIGO_CHECKS_SUBFORM As QUERY_OBLIGO_CHECKS
        
        Private _OBLIGO_CHECKS2_SUBFORM As QUERY_OBLIGO_CHECKS2
        
        Private _SECURE_CHECKS_SUBFORM As QUERY_SECURE_CHECKS
        
        Private _OBLIGO_FNCBAL5_SUBFORM As QUERY_OBLIGO_FNCBAL5
        
        Private _CUSTOBLIGOENV_SUBFORM As QUERY_CUSTOBLIGOENV
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGO"
                else
                    return "CUSTOBLIGO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0}", _
                  string.format("{0}",CUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORD_DEBIT")>  _
        Public Property ORD_DEBIT() As nullable(of decimal)
            Get
                return _ORD_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ORD_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Documents"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOC_DEBIT")>  _
        Public Property DOC_DEBIT() As nullable(of decimal)
            Get
                return _DOC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DOC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Project Hrs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PROJ_DEBIT")>  _
        Public Property PROJ_DEBIT() As nullable(of decimal)
            Get
                return _PROJ_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _PROJ_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Pending Sales Invs."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("IV_DEBIT")>  _
        Public Property IV_DEBIT() As nullable(of decimal)
            Get
                return _IV_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _IV_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unpaid Bills"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ACC_DEBIT")>  _
        Public Property ACC_DEBIT() As nullable(of decimal)
            Get
                return _ACC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ACC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CHEQUE_DEBIT")>  _
        Public Property CHEQUE_DEBIT() As nullable(of decimal)
            Get
                return _CHEQUE_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _CHEQUE_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Open Orders"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("> 90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLD")>  _
        Public Property OLD() As nullable(of decimal)
            Get
                return _OLD
            End Get
            Set
                if not(value is nothing) then
                  _OLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("61-90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO90")>  _
        Public Property UPTO90() As nullable(of decimal)
            Get
                return _UPTO90
            End Get
            Set
                if not(value is nothing) then
                  _UPTO90 = Value
                end if
            End Set
        End Property
        
        <DisplayName("31-60"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO60")>  _
        Public Property UPTO60() As nullable(of decimal)
            Get
                return _UPTO60
            End Get
            Set
                if not(value is nothing) then
                  _UPTO60 = Value
                end if
            End Set
        End Property
        
        <DisplayName("1-30"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO30")>  _
        Public Property UPTO30() As nullable(of decimal)
            Get
                return _UPTO30
            End Get
            Set
                if not(value is nothing) then
                  _UPTO30 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURE")>  _
        Public Property FUTURE() As nullable(of decimal)
            Get
                return _FUTURE
            End Get
            Set
                if not(value is nothing) then
                  _FUTURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total for Aging"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TOTOLD")>  _
        Public Property TOTOLD() As nullable(of decimal)
            Get
                return _TOTOLD
            End Get
            Set
                if not(value is nothing) then
                  _TOTOLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT")>  _
        Public Property MAX_CREDIT() As nullable(of decimal)
            Get
                return _MAX_CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("61-90"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_DIFF")>  _
        Public Property CREDIT_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(125),  _
         [ReadOnly](true),  _
         twodBarcode("CRCODE")>  _
        Public Property CRCODE() As String
            Get
                return _CRCODE
            End Get
            Set
                if not(value is nothing) then
                  _CRCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO")>  _
        Public Property MAX_OBLIGO() As nullable(of decimal)
            Get
                return _MAX_OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Credit Currency"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_DIFF")>  _
        Public Property OBLIGO_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liab. Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("OBCODE")>  _
        Public Property OBCODE() As String
            Get
                return _OBCODE
            End Get
            Set
                if not(value is nothing) then
                  _OBCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Status"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Restricted"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Credit Currency"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("RESTRICTDATE")>  _
        Public Property RESTRICTDATE() As nullable (of DateTimeOffset)
            Get
                return _RESTRICTDATE
            End Get
            Set
                if not(value is nothing) then
                  _RESTRICTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Awaiting Clearance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("WAITING")>  _
        Public Property WAITING() As nullable(of decimal)
            Get
                return _WAITING
            End Get
            Set
                if not(value is nothing) then
                  _WAITING = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated This Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("THISMONTH")>  _
        Public Property THISMONTH() As nullable(of decimal)
            Get
                return _THISMONTH
            End Get
            Set
                if not(value is nothing) then
                  _THISMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Next Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("NEXTMONTH")>  _
        Public Property NEXTMONTH() As nullable(of decimal)
            Get
                return _NEXTMONTH
            End Get
            Set
                if not(value is nothing) then
                  _NEXTMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2 Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("TWOMONTHS")>  _
        Public Property TWOMONTHS() As nullable(of decimal)
            Get
                return _TWOMONTHS
            End Get
            Set
                if not(value is nothing) then
                  _TWOMONTHS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2+ Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURECHEQUES")>  _
        Public Property FUTURECHEQUES() As nullable(of decimal)
            Get
                return _FUTURECHEQUES
            End Get
            Set
                if not(value is nothing) then
                  _FUTURECHEQUES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Secure Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(232),  _
         [ReadOnly](true),  _
         twodBarcode("SECURECHECKS")>  _
        Public Property SECURECHECKS() As nullable(of decimal)
            Get
                return _SECURECHECKS
            End Get
            Set
                if not(value is nothing) then
                  _SECURECHECKS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Cards"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(234),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITCARDS")>  _
        Public Property CREDITCARDS() As nullable(of decimal)
            Get
                return _CREDITCARDS
            End Get
            Set
                if not(value is nothing) then
                  _CREDITCARDS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Cred Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT_ENV")>  _
        Public Property MAX_CREDIT_ENV() As nullable(of decimal)
            Get
                return _MAX_CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV")>  _
        Public Property CREDIT_ENV() As nullable(of decimal)
            Get
                return _CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV_DIFF")>  _
        Public Property CREDIT_ENV_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CR_CODE_ENV")>  _
        Public Property CR_CODE_ENV() As String
            Get
                return _CR_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CR_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liab Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO_ENV")>  _
        Public Property MAX_OBLIGO_ENV() As nullable(of decimal)
            Get
                return _MAX_OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV")>  _
        Public Property OBLIGO_ENV() As nullable(of decimal)
            Get
                return _OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liabil Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV_DIFF")>  _
        Public Property OBLIGO_ENV_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("OB_CODE_ENV")>  _
        Public Property OB_CODE_ENV() As String
            Get
                return _OB_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OB_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (No.)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(315),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (Name)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_ORDERS_SUBFORM() As QUERY_OBLIGO_ORDERS
            Get
                return _OBLIGO_ORDERS_SUBFORM
            End Get
            Set
                _OBLIGO_ORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_TRANS_SUBFORM() As QUERY_OBLIGO_TRANS
            Get
                return _OBLIGO_TRANS_SUBFORM
            End Get
            Set
                _OBLIGO_TRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_PROJ_SUBFORM() As QUERY_OBLIGO_PROJ
            Get
                return _OBLIGO_PROJ_SUBFORM
            End Get
            Set
                _OBLIGO_PROJ_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_IV_SUBFORM() As QUERY_OBLIGO_IV
            Get
                return _OBLIGO_IV_SUBFORM
            End Get
            Set
                _OBLIGO_IV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCITEMS_SUBFORM() As QUERY_OBLIGO_FNCITEMS
            Get
                return _OBLIGO_FNCITEMS_SUBFORM
            End Get
            Set
                _OBLIGO_FNCITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS_SUBFORM() As QUERY_OBLIGO_CHECKS
            Get
                return _OBLIGO_CHECKS_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS2_SUBFORM() As QUERY_OBLIGO_CHECKS2
            Get
                return _OBLIGO_CHECKS2_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SECURE_CHECKS_SUBFORM() As QUERY_SECURE_CHECKS
            Get
                return _SECURE_CHECKS_SUBFORM
            End Get
            Set
                _SECURE_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCBAL5_SUBFORM() As QUERY_OBLIGO_FNCBAL5
            Get
                return _OBLIGO_FNCBAL5_SUBFORM
            End Get
            Set
                _OBLIGO_FNCBAL5_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGOENV_SUBFORM() As QUERY_CUSTOBLIGOENV
            Get
                return _CUSTOBLIGOENV_SUBFORM
            End Get
            Set
                _CUSTOBLIGOENV_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_ORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_ORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_TRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_TRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_PROJ_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_PROJ_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_IV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_IV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SECURE_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SECURE_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCBAL5_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCBAL5_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGOENV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGOENV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_ORDERS_SUBFORM")
              next
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_TRANS_SUBFORM")
              next
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_PROJ_SUBFORM")
              next
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_IV_SUBFORM")
              next
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCITEMS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS2_SUBFORM")
              next
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.Value
                itm.toXML(xw,"SECURE_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCBAL5_SUBFORM")
              next
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGOENV_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD_DEBIT = .ORD_DEBIT
                  _DOC_DEBIT = .DOC_DEBIT
                  _PROJ_DEBIT = .PROJ_DEBIT
                  _IV_DEBIT = .IV_DEBIT
                  _ACC_DEBIT = .ACC_DEBIT
                  _CHEQUE_DEBIT = .CHEQUE_DEBIT
                  _CODE = .CODE
                  _OLD = .OLD
                  _UPTO90 = .UPTO90
                  _UPTO60 = .UPTO60
                  _UPTO30 = .UPTO30
                  _FUTURE = .FUTURE
                  _TOTOLD = .TOTOLD
                  _CREDIT = .CREDIT
                  _MAX_CREDIT = .MAX_CREDIT
                  _CREDIT_DIFF = .CREDIT_DIFF
                  _CRCODE = .CRCODE
                  _OBLIGO = .OBLIGO
                  _MAX_OBLIGO = .MAX_OBLIGO
                  _OBLIGO_DIFF = .OBLIGO_DIFF
                  _OBCODE = .OBCODE
                  _STATDES = .STATDES
                  _RESTRICTDATE = .RESTRICTDATE
                  _WAITING = .WAITING
                  _THISMONTH = .THISMONTH
                  _NEXTMONTH = .NEXTMONTH
                  _TWOMONTHS = .TWOMONTHS
                  _FUTURECHEQUES = .FUTURECHEQUES
                  _SECURECHECKS = .SECURECHECKS
                  _CREDITCARDS = .CREDITCARDS
                  _MAX_CREDIT_ENV = .MAX_CREDIT_ENV
                  _CREDIT_ENV = .CREDIT_ENV
                  _CREDIT_ENV_DIFF = .CREDIT_ENV_DIFF
                  _CR_CODE_ENV = .CR_CODE_ENV
                  _MAX_OBLIGO_ENV = .MAX_OBLIGO_ENV
                  _OBLIGO_ENV = .OBLIGO_ENV
                  _OBLIGO_ENV_DIFF = .OBLIGO_ENV_DIFF
                  _OB_CODE_ENV = .OB_CODE_ENV
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _CUST = .CUST
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTOBLIGO
        
        OBLIGO_ORDERS = 0
        
        OBLIGO_TRANS = 1
        
        OBLIGO_PROJ = 2
        
        OBLIGO_IV = 3
        
        OBLIGO_FNCITEMS = 4
        
        OBLIGO_CHECKS = 5
        
        OBLIGO_CHECKS2 = 6
        
        SECURE_CHECKS = 7
        
        OBLIGO_FNCBAL5 = 8
        
        CUSTOBLIGOENV = 9
    End Enum
    
    <QueryTitle("Open Orders")>  _
    Public Class QUERY_OBLIGO_ORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_ORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = nothing
            _Name = "OBLIGO_ORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = Parent
            _name = "OBLIGO_ORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_ORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_ORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_ORDERS As OBLIGO_ORDERS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_ORDERS)(stream.ReadToEnd).Value
              With _OBLIGO_ORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_ORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_ORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TBALANCE = obj.TBALANCE
                  .UNITNAME = obj.UNITNAME
                  .PRICEBAL1 = obj.PRICEBAL1
                  .CODE = obj.CODE
                  .PRICEBAL2 = obj.PRICEBAL2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .ORD2 = obj.ORD2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_ORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_ORDERS as OBLIGO_ORDERS in value
              If _OBLIGO_ORDERS.Equals(trycast(obj,OBLIGO_ORDERS)) Then
                  value.remove(_OBLIGO_ORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_ORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICEBAL1 As Decimal
        
        Private _CODE As String
        
        Private _PRICEBAL2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _ORD2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_ORDERS"
                else
                    return "OBLIGO_ORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL1")>  _
        Public Property PRICEBAL1() As nullable(of decimal)
            Get
                return _PRICEBAL1
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Value"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL2")>  _
        Public Property PRICEBAL2() As nullable(of decimal)
            Get
                return _PRICEBAL2
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Value"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD2")>  _
        Public Property ORD2() As nullable (of int64)
            Get
                return _ORD2
            End Get
            Set
                if not(value is nothing) then
                  _ORD2 = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_ORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TBALANCE = .TBALANCE
                  _UNITNAME = .UNITNAME
                  _PRICEBAL1 = .PRICEBAL1
                  _CODE = .CODE
                  _PRICEBAL2 = .PRICEBAL2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _ORD2 = .ORD2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Documents")>  _
    Public Class QUERY_OBLIGO_TRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_TRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = nothing
            _Name = "OBLIGO_TRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = Parent
            _name = "OBLIGO_TRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_TRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_TRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_TRANS As OBLIGO_TRANS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_TRANS)(stream.ReadToEnd).Value
              With _OBLIGO_TRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_TRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_TRANS)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .DOCCODE = obj.DOCCODE
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_TRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_TRANS as OBLIGO_TRANS in value
              If _OBLIGO_TRANS.Equals(trycast(obj,OBLIGO_TRANS)) Then
                  value.remove(_OBLIGO_TRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_TRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _DOCCODE As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TRANS As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_TRANS"
                else
                    return "OBLIGO_TRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if not(value is nothing) then
                  _DOCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Amount"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_TRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _DOCCODE = .DOCCODE
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Project Hours")>  _
    Public Class QUERY_OBLIGO_PROJ
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_PROJ)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = nothing
            _Name = "OBLIGO_PROJ"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = Parent
            _name = "OBLIGO_PROJ_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_PROJ)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_PROJ)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_PROJ As OBLIGO_PROJ In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_PROJ)(stream.ReadToEnd).Value
              With _OBLIGO_PROJ
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_PROJ)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_PROJ)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .USERLOGIN = obj.USERLOGIN
                  .TRANS = obj.TRANS
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_PROJ(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_PROJ as OBLIGO_PROJ in value
              If _OBLIGO_PROJ.Equals(trycast(obj,OBLIGO_PROJ)) Then
                  value.remove(_OBLIGO_PROJ)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_PROJ
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _USERLOGIN As String
        
        Private _TRANS As Long
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_PROJ"
                else
                    return "OBLIGO_PROJ_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reported by"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Report No."),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_PROJ")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _USERLOGIN = .USERLOGIN
                  _TRANS = .TRANS
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pending Sales Invoices")>  _
    Public Class QUERY_OBLIGO_IV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_IV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = nothing
            _Name = "OBLIGO_IV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = Parent
            _name = "OBLIGO_IV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_IV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_IV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_IV As OBLIGO_IV In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_IV)(stream.ReadToEnd).Value
              With _OBLIGO_IV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_IV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_IV)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .DEBIT = obj.DEBIT
                  .IV = obj.IV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_IV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_IV as OBLIGO_IV in value
              If _OBLIGO_IV.Equals(trycast(obj,OBLIGO_IV)) Then
                  value.remove(_OBLIGO_IV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_IV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _DEBIT As String
        
        Private _IV As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_IV"
                else
                    return "OBLIGO_IV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},TYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_IV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _DEBIT = .DEBIT
                  _IV = .IV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unpaid Bills")>  _
    Public Class QUERY_OBLIGO_FNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = nothing
            _Name = "OBLIGO_FNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = Parent
            _name = "OBLIGO_FNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCITEMS As OBLIGO_FNCITEMS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCITEMS)(stream.ReadToEnd).Value
              With _OBLIGO_FNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCITEMS)
                  .BALDATE = obj.BALDATE
                  .FNCNUM = obj.FNCNUM
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .SUM1 = obj.SUM1
                  .CODE = obj.CODE
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCIREF1 = obj.FNCIREF1
                  .FNCIREF2 = obj.FNCIREF2
                  .ORDNAME = obj.ORDNAME
                  .FNCICODE = obj.FNCICODE
                  .ACCNAME = obj.ACCNAME
                  .SUM5 = obj.SUM5
                  .CODE5 = obj.CODE5
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCITEMS as OBLIGO_FNCITEMS in value
              If _OBLIGO_FNCITEMS.Equals(trycast(obj,OBLIGO_FNCITEMS)) Then
                  value.remove(_OBLIGO_FNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _FNCNUM As String
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _SUM1 As Decimal
        
        Private _CODE As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCIREF1 As String
        
        Private _FNCIREF2 As String
        
        Private _ORDNAME As String
        
        Private _FNCICODE As String
        
        Private _ACCNAME As String
        
        Private _SUM5 As Decimal
        
        Private _CODE5 As String
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCITEMS"
                else
                    return "OBLIGO_FNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transact Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transact Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reference"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(20),  _
         tab("Transact Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUM1")>  _
        Public Property SUM1() As nullable(of decimal)
            Get
                return _SUM1
            End Get
            Set
                if not(value is nothing) then
                  _SUM1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Due Date"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 1 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF1")>  _
        Public Property FNCIREF1() As String
            Get
                return _FNCIREF1
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 2 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(78),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF2")>  _
        Public Property FNCIREF2() As String
            Get
                return _FNCIREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Item Group"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("FNCICODE")>  _
        Public Property FNCICODE() As String
            Get
                return _FNCICODE
            End Get
            Set
                if not(value is nothing) then
                  _FNCICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Due Date"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("SUM5")>  _
        Public Property SUM5() As nullable(of decimal)
            Get
                return _SUM5
            End Get
            Set
                if not(value is nothing) then
                  _SUM5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _FNCNUM = .FNCNUM
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _SUM1 = .SUM1
                  _CODE = .CODE
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCIREF1 = .FNCIREF1
                  _FNCIREF2 = .FNCIREF2
                  _ORDNAME = .ORDNAME
                  _FNCICODE = .FNCICODE
                  _ACCNAME = .ACCNAME
                  _SUM5 = .SUM5
                  _CODE5 = .CODE5
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Post-dated Cheques")>  _
    Public Class QUERY_OBLIGO_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = Parent
            _name = "OBLIGO_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS As OBLIGO_CHECKS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS as OBLIGO_CHECKS in value
              If _OBLIGO_CHECKS.Equals(trycast(obj,OBLIGO_CHECKS)) Then
                  value.remove(_OBLIGO_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS"
                else
                    return "OBLIGO_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Cheques Past Due Date")>  _
    Public Class QUERY_OBLIGO_CHECKS2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = Parent
            _name = "OBLIGO_CHECKS2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS2 As OBLIGO_CHECKS2 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS2)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS2)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENTA = obj.PAYMENTA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS2 as OBLIGO_CHECKS2 in value
              If _OBLIGO_CHECKS2.Equals(trycast(obj,OBLIGO_CHECKS2)) Then
                  value.remove(_OBLIGO_CHECKS2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENTA As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS2"
                else
                    return "OBLIGO_CHECKS2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENTA")>  _
        Public Property PAYMENTA() As nullable (of int64)
            Get
                return _PAYMENTA
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTA = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENTA = .PAYMENTA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Secure Post-dated Cheques")>  _
    Public Class QUERY_SECURE_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SECURE_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = nothing
            _Name = "SECURE_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = Parent
            _name = "SECURE_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SECURE_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SECURE_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SECURE_CHECKS As SECURE_CHECKS In JsonConvert.DeserializeObject(Of QUERY_SECURE_CHECKS)(stream.ReadToEnd).Value
              With _SECURE_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SECURE_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SECURE_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SECURE_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SECURE_CHECKS as SECURE_CHECKS in value
              If _SECURE_CHECKS.Equals(trycast(obj,SECURE_CHECKS)) Then
                  value.remove(_SECURE_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SECURE_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SECURE_CHECKS"
                else
                    return "SECURE_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date of Receipt"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SECURE_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Balances in Transaction Currency")>  _
    Public Class QUERY_OBLIGO_FNCBAL5
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCBAL5)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = nothing
            _Name = "OBLIGO_FNCBAL5"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = Parent
            _name = "OBLIGO_FNCBAL5_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCBAL5)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCBAL5)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCBAL5 As OBLIGO_FNCBAL5 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCBAL5)(stream.ReadToEnd).Value
              With _OBLIGO_FNCBAL5
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCBAL5)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCBAL5)
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .BALANCE5 = obj.BALANCE5
                  .CODE5 = obj.CODE5
                  .BALANCE3 = obj.BALANCE3
                  .BAL3 = obj.BAL3
                  .CODE3 = obj.CODE3
                  .ACCOUNT = obj.ACCOUNT
                  .CURRENCY5 = obj.CURRENCY5
                  .UCUST = obj.UCUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCBAL5(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCBAL5 as OBLIGO_FNCBAL5 in value
              If _OBLIGO_FNCBAL5.Equals(trycast(obj,OBLIGO_FNCBAL5)) Then
                  value.remove(_OBLIGO_FNCBAL5)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCBAL5
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _BALANCE5 As Decimal
        
        Private _CODE5 As String
        
        Private _BALANCE3 As Decimal
        
        Private _BAL3 As Decimal
        
        Private _CODE3 As String
        
        Private _ACCOUNT As Long
        
        Private _CURRENCY5 As Long
        
        Private _UCUST As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCBAL5"
                else
                    return "OBLIGO_FNCBAL5_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACCOUNT={0},CURRENCY5={1},UCUST={2}", _
                  string.format("{0}",ACCOUNT), _
                  string.format("{0}",CURRENCY5), _
                  string.format("{0}",UCUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE5")>  _
        Public Property BALANCE5() As nullable(of decimal)
            Get
                return _BALANCE5
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Acct Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE3")>  _
        Public Property BALANCE3() As nullable(of decimal)
            Get
                return _BALANCE3
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BAL3")>  _
        Public Property BAL3() As nullable(of decimal)
            Get
                return _BAL3
            End Get
            Set
                if not(value is nothing) then
                  _BAL3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE3")>  _
        Public Property CODE3() As String
            Get
                return _CODE3
            End Get
            Set
                if not(value is nothing) then
                  _CODE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Account No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACCOUNT")>  _
        Public Property ACCOUNT() As nullable (of int64)
            Get
                return _ACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _ACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transact. Curr (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY5")>  _
        Public Property CURRENCY5() As nullable (of int64)
            Get
                return _CURRENCY5
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("UCUST")>  _
        Public Property UCUST() As nullable (of int64)
            Get
                return _UCUST
            End Get
            Set
                if not(value is nothing) then
                  _UCUST = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCBAL5")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACCOUNT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY5")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "UCUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With obj
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _BALANCE5 = .BALANCE5
                  _CODE5 = .CODE5
                  _BALANCE3 = .BALANCE3
                  _BAL3 = .BAL3
                  _CODE3 = .CODE3
                  _ACCOUNT = .ACCOUNT
                  _CURRENCY5 = .CURRENCY5
                  _UCUST = .UCUST
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit per Company")>  _
    Public Class QUERY_CUSTOBLIGOENV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGOENV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = nothing
            _Name = "CUSTOBLIGOENV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = Parent
            _name = "CUSTOBLIGOENV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGOENV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGOENV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGOENV As CUSTOBLIGOENV In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGOENV)(stream.ReadToEnd).Value
              With _CUSTOBLIGOENV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGOENV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGOENV)
                  .TITLE = obj.TITLE
                  .CREDIT = obj.CREDIT
                  .OBLIGO = obj.OBLIGO
                  .CODE = obj.CODE
                  .DNAME = obj.DNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGOENV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGOENV as CUSTOBLIGOENV in value
              If _CUSTOBLIGOENV.Equals(trycast(obj,CUSTOBLIGOENV)) Then
                  value.remove(_CUSTOBLIGOENV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGOENV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _CREDIT As Decimal
        
        Private _OBLIGO As Decimal
        
        Private _CODE As String
        
        Private _DNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGOENV"
                else
                    return "CUSTOBLIGOENV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DNAME={0}", _
                  string.format("'{0}'",DNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Company Name"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Company"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DNAME")>  _
        Public Property DNAME() As String
            Get
                return _DNAME
            End Get
            Set
                if not(value is nothing) then
                  _DNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGOENV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _CREDIT = .CREDIT
                  _OBLIGO = .OBLIGO
                  _CODE = .CODE
                  _DNAME = .DNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit Card to Charge")>  _
    Public Class QUERY_PAYMENTDEF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PAYMENTDEF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PAYMENTDEF)
            _Parent = nothing
            _Name = "PAYMENTDEF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "History of Changes")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PAYMENTDEF)
            _Parent = Parent
            _name = "PAYMENTDEF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "History of Changes")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PAYMENTDEF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PAYMENTDEF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PAYMENTDEF As PAYMENTDEF In JsonConvert.DeserializeObject(Of QUERY_PAYMENTDEF)(stream.ReadToEnd).Value
              With _PAYMENTDEF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PAYMENTDEF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PAYMENTDEF = JsonConvert.DeserializeObject(Of PAYMENTDEF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PAYMENTDEF)
                  .PAYMENTCODE = obj.PAYMENTCODE
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .VALIDMONTH = obj.VALIDMONTH
                  .BANKCODE = obj.BANKCODE
                  .BANKNAME = obj.BANKNAME
                  .BRANCH = obj.BRANCH
                  .IDNUM = obj.IDNUM
                  .CUSTDES = obj.CUSTDES
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .BIC = obj.BIC
                  .SHVA_TERMINALNAME = obj.SHVA_TERMINALNAME
                  .CCUID = obj.CCUID
                  .SHVAFLAG = obj.SHVAFLAG
                  .CONFNUM = obj.CONFNUM
                  .UNVALIDFLAG = obj.UNVALIDFLAG
                  .CONFDATE = obj.CONFDATE
                  .SEPADIRDEBNUM = obj.SEPADIRDEBNUM
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .EEAFLAG = obj.EEAFLAG
                  .IBAN = obj.IBAN
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PAYMENTDEF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PAYMENTDEF as PAYMENTDEF in value
              If _PAYMENTDEF.Equals(trycast(obj,PAYMENTDEF)) Then
                  value.remove(_PAYMENTDEF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PAYMENTDEF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPAYMENTCODE As Boolean = Boolean.FalseString
        
        Private _PAYMENTCODE As String
        
        Private _PAYMENTNAME As String
        
        Private _IsSetPAYACCOUNT As Boolean = Boolean.FalseString
        
        Private _PAYACCOUNT As String
        
        Private _IsSetVALIDMONTH As Boolean = Boolean.FalseString
        
        Private _VALIDMONTH As String
        
        Private _IsSetBANKCODE As Boolean = Boolean.FalseString
        
        Private _BANKCODE As String
        
        Private _BANKNAME As String
        
        Private _IsSetBRANCH As Boolean = Boolean.FalseString
        
        Private _BRANCH As String
        
        Private _IsSetIDNUM As Boolean = Boolean.FalseString
        
        Private _IDNUM As String
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetPAYCODE As Boolean = Boolean.FalseString
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _IsSetBIC As Boolean = Boolean.FalseString
        
        Private _BIC As String
        
        Private _IsSetSHVA_TERMINALNAME As Boolean = Boolean.FalseString
        
        Private _SHVA_TERMINALNAME As String
        
        Private _IsSetCCUID As Boolean = Boolean.FalseString
        
        Private _CCUID As String
        
        Private _SHVAFLAG As String
        
        Private _IsSetCONFNUM As Boolean = Boolean.FalseString
        
        Private _CONFNUM As String
        
        Private _IsSetUNVALIDFLAG As Boolean = Boolean.FalseString
        
        Private _UNVALIDFLAG As String
        
        Private _CONFDATE As System.DateTimeOffset
        
        Private _SEPADIRDEBNUM As Long
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetEEAFLAG As Boolean = Boolean.FalseString
        
        Private _EEAFLAG As String
        
        Private _IsSetIBAN As Boolean = Boolean.FalseString
        
        Private _IBAN As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _CHANGES_LOG_SUBFORM As QUERY_CHANGES_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("History of Changes"))
            _CHANGES_LOG_SUBFORM = new QUERY_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("History of Changes"))
            _CHANGES_LOG_SUBFORM = new QUERY_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PAYMENTDEF"
                else
                    return "PAYMENTDEF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Code"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("PAYMENTCODE")>  _
        Public Property PAYMENTCODE() As String
            Get
                return _PAYMENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYMENTCODE = True
                If loading Then
                  _PAYMENTCODE = Value
                Else
                    if not _PAYMENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYMENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYMENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Card Number"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(30),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Credit Card Number", value, "^.{0,34}$") then Exit Property
                _IsSetPAYACCOUNT = True
                If loading Then
                  _PAYACCOUNT = Value
                Else
                    if not _PAYACCOUNT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYACCOUNT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYACCOUNT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Card's Expir. Date"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(35),  _
         twodBarcode("VALIDMONTH")>  _
        Public Property VALIDMONTH() As String
            Get
                return _VALIDMONTH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Card's Expir. Date", value, "^.{0,5}$") then Exit Property
                _IsSetVALIDMONTH = True
                If loading Then
                  _VALIDMONTH = Value
                Else
                    if not _VALIDMONTH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VALIDMONTH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VALIDMONTH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(40),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bank Code", value, "^.{0,8}$") then Exit Property
                _IsSetBANKCODE = True
                If loading Then
                  _BANKCODE = Value
                Else
                    if not _BANKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BANKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BANKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bank Name"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BANKNAME")>  _
        Public Property BANKNAME() As String
            Get
                return _BANKNAME
            End Get
            Set
                if not(value is nothing) then
                  _BANKNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(60),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Routing Number", value, "^.{0,20}$") then Exit Property
                _IsSetBRANCH = True
                If loading Then
                  _BRANCH = Value
                Else
                    if not _BRANCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("ID/VAT Number"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(70),  _
         twodBarcode("IDNUM")>  _
        Public Property IDNUM() As String
            Get
                return _IDNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("ID/VAT Number", value, "^.{0,12}$") then Exit Property
                _IsSetIDNUM = True
                If loading Then
                  _IDNUM = Value
                Else
                    if not _IDNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IDNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IDNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cardholder Name"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(90),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cardholder Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(100),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Terms Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYCODE = True
                If loading Then
                  _PAYCODE = Value
                Else
                    if not _PAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("BIC - Bank ID Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(120),  _
         twodBarcode("BIC")>  _
        Public Property BIC() As String
            Get
                return _BIC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("BIC - Bank ID Code", value, "^.{0,12}$") then Exit Property
                _IsSetBIC = True
                If loading Then
                  _BIC = Value
                Else
                    if not _BIC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BIC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BIC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Installation Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(130),  _
         twodBarcode("SHVA_TERMINALNAME")>  _
        Public Property SHVA_TERMINALNAME() As String
            Get
                return _SHVA_TERMINALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Installation Code", value, "^.{0,3}$") then Exit Property
                _IsSetSHVA_TERMINALNAME = True
                If loading Then
                  _SHVA_TERMINALNAME = Value
                Else
                    if not _SHVA_TERMINALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHVA_TERMINALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHVA_TERMINALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Token ID"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(155),  _
         twodBarcode("CCUID")>  _
        Public Property CCUID() As String
            Get
                return _CCUID
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Token ID", value, "^.{0,40}$") then Exit Property
                _IsSetCCUID = True
                If loading Then
                  _CCUID = Value
                Else
                    if not _CCUID = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CCUID", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CCUID = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Approved"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("SHVAFLAG")>  _
        Public Property SHVAFLAG() As String
            Get
                return _SHVAFLAG
            End Get
            Set
                if not(value is nothing) then
                  _SHVAFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorization Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(170),  _
         twodBarcode("CONFNUM")>  _
        Public Property CONFNUM() As String
            Get
                return _CONFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Authorization Code", value, "^.{0,7}$") then Exit Property
                _IsSetCONFNUM = True
                If loading Then
                  _CONFNUM = Value
                Else
                    if not _CONFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CONFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CONFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Expired?"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(180),  _
         twodBarcode("UNVALIDFLAG")>  _
        Public Property UNVALIDFLAG() As String
            Get
                return _UNVALIDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Expired?", value, "^.{0,1}$") then Exit Property
                _IsSetUNVALIDFLAG = True
                If loading Then
                  _UNVALIDFLAG = Value
                Else
                    if not _UNVALIDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UNVALIDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UNVALIDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Mandate Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expired?"),  _
         Pos(191),  _
         [ReadOnly](true),  _
         twodBarcode("CONFDATE")>  _
        Public Property CONFDATE() As nullable (of DateTimeOffset)
            Get
                return _CONFDATE
            End Get
            Set
                if not(value is nothing) then
                  _CONFDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("SDD Mandate Number"),  _
         nType("Edm.Int64"),  _
         tab("Expired?"),  _
         Pos(192),  _
         [ReadOnly](true),  _
         twodBarcode("SEPADIRDEBNUM")>  _
        Public Property SEPADIRDEBNUM() As nullable (of int64)
            Get
                return _SEPADIRDEBNUM
            End Get
            Set
                if not(value is nothing) then
                  _SEPADIRDEBNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(193),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("EEA"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(194),  _
         twodBarcode("EEAFLAG")>  _
        Public Property EEAFLAG() As String
            Get
                return _EEAFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("EEA", value, "^.{0,1}$") then Exit Property
                _IsSetEEAFLAG = True
                If loading Then
                  _EEAFLAG = Value
                Else
                    if not _EEAFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EEAFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EEAFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("IBAN"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(195),  _
         twodBarcode("IBAN")>  _
        Public Property IBAN() As String
            Get
                return _IBAN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("IBAN", value, "^.{0,34}$") then Exit Property
                _IsSetIBAN = True
                If loading Then
                  _IBAN = Value
                Else
                    if not _IBAN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IBAN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IBAN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expired?"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CHANGES_LOG_SUBFORM() As QUERY_CHANGES_LOG
            Get
                return _CHANGES_LOG_SUBFORM
            End Get
            Set
                _CHANGES_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPAYMENTCODE then
              if f then
                  jw.WriteRaw(", ""PAYMENTCODE"": ")
              else
                  jw.WriteRaw("""PAYMENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYMENTCODE)
            end if
            if _IsSetPAYACCOUNT then
              if f then
                  jw.WriteRaw(", ""PAYACCOUNT"": ")
              else
                  jw.WriteRaw("""PAYACCOUNT"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYACCOUNT)
            end if
            if _IsSetVALIDMONTH then
              if f then
                  jw.WriteRaw(", ""VALIDMONTH"": ")
              else
                  jw.WriteRaw("""VALIDMONTH"": ")
                  f = true
              end if
              jw.WriteValue(me.VALIDMONTH)
            end if
            if _IsSetBANKCODE then
              if f then
                  jw.WriteRaw(", ""BANKCODE"": ")
              else
                  jw.WriteRaw("""BANKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BANKCODE)
            end if
            if _IsSetBRANCH then
              if f then
                  jw.WriteRaw(", ""BRANCH"": ")
              else
                  jw.WriteRaw("""BRANCH"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCH)
            end if
            if _IsSetIDNUM then
              if f then
                  jw.WriteRaw(", ""IDNUM"": ")
              else
                  jw.WriteRaw("""IDNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.IDNUM)
            end if
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetPAYCODE then
              if f then
                  jw.WriteRaw(", ""PAYCODE"": ")
              else
                  jw.WriteRaw("""PAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCODE)
            end if
            if _IsSetBIC then
              if f then
                  jw.WriteRaw(", ""BIC"": ")
              else
                  jw.WriteRaw("""BIC"": ")
                  f = true
              end if
              jw.WriteValue(me.BIC)
            end if
            if _IsSetSHVA_TERMINALNAME then
              if f then
                  jw.WriteRaw(", ""SHVA_TERMINALNAME"": ")
              else
                  jw.WriteRaw("""SHVA_TERMINALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SHVA_TERMINALNAME)
            end if
            if _IsSetCCUID then
              if f then
                  jw.WriteRaw(", ""CCUID"": ")
              else
                  jw.WriteRaw("""CCUID"": ")
                  f = true
              end if
              jw.WriteValue(me.CCUID)
            end if
            if _IsSetCONFNUM then
              if f then
                  jw.WriteRaw(", ""CONFNUM"": ")
              else
                  jw.WriteRaw("""CONFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CONFNUM)
            end if
            if _IsSetUNVALIDFLAG then
              if f then
                  jw.WriteRaw(", ""UNVALIDFLAG"": ")
              else
                  jw.WriteRaw("""UNVALIDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.UNVALIDFLAG)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetEEAFLAG then
              if f then
                  jw.WriteRaw(", ""EEAFLAG"": ")
              else
                  jw.WriteRaw("""EEAFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.EEAFLAG)
            end if
            if _IsSetIBAN then
              if f then
                  jw.WriteRaw(", ""IBAN"": ")
              else
                  jw.WriteRaw("""IBAN"": ")
                  f = true
              end if
              jw.WriteValue(me.IBAN)
            end if
            if _CHANGES_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CHANGES_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CHANGES_LOG in _CHANGES_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CHANGES_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PAYMENTDEF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetPAYMENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYMENTCODE")
              .WriteAttributeString("value", me.PAYMENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPAYACCOUNT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYACCOUNT")
              .WriteAttributeString("value", me.PAYACCOUNT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "34")
              .WriteEndElement
            end if
            if _IsSetVALIDMONTH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VALIDMONTH")
              .WriteAttributeString("value", me.VALIDMONTH)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetBANKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BANKCODE")
              .WriteAttributeString("value", me.BANKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetBRANCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCH")
              .WriteAttributeString("value", me.BRANCH)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetIDNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IDNUM")
              .WriteAttributeString("value", me.IDNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCODE")
              .WriteAttributeString("value", me.PAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBIC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BIC")
              .WriteAttributeString("value", me.BIC)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetSHVA_TERMINALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHVA_TERMINALNAME")
              .WriteAttributeString("value", me.SHVA_TERMINALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCCUID then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CCUID")
              .WriteAttributeString("value", me.CCUID)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCONFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CONFNUM")
              .WriteAttributeString("value", me.CONFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "7")
              .WriteEndElement
            end if
            if _IsSetUNVALIDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UNVALIDFLAG")
              .WriteAttributeString("value", me.UNVALIDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetEEAFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EEAFLAG")
              .WriteAttributeString("value", me.EEAFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIBAN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IBAN")
              .WriteAttributeString("value", me.IBAN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "34")
              .WriteEndElement
            end if
            if _CHANGES_LOG_SUBFORM.value.count > 0 then
              for each itm as CHANGES_LOG in _CHANGES_LOG_SUBFORM.Value
                itm.toXML(xw,"CHANGES_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PAYMENTDEF = JsonConvert.DeserializeObject(Of PAYMENTDEF)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYMENTCODE = .PAYMENTCODE
                  _PAYMENTNAME = .PAYMENTNAME
                  _PAYACCOUNT = .PAYACCOUNT
                  _VALIDMONTH = .VALIDMONTH
                  _BANKCODE = .BANKCODE
                  _BANKNAME = .BANKNAME
                  _BRANCH = .BRANCH
                  _IDNUM = .IDNUM
                  _CUSTDES = .CUSTDES
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _BIC = .BIC
                  _SHVA_TERMINALNAME = .SHVA_TERMINALNAME
                  _CCUID = .CCUID
                  _SHVAFLAG = .SHVAFLAG
                  _CONFNUM = .CONFNUM
                  _UNVALIDFLAG = .UNVALIDFLAG
                  _CONFDATE = .CONFDATE
                  _SEPADIRDEBNUM = .SEPADIRDEBNUM
                  _COUNTRYNAME = .COUNTRYNAME
                  _EEAFLAG = .EEAFLAG
                  _IBAN = .IBAN
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PAYMENTDEF
        
        CHANGES_LOG = 0
    End Enum
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_CHANGES_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CHANGES_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CHANGES_LOG)
            _Parent = nothing
            _Name = "CHANGES_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CHANGES_LOG)
            _Parent = Parent
            _name = "CHANGES_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CHANGES_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CHANGES_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CHANGES_LOG As CHANGES_LOG In JsonConvert.DeserializeObject(Of QUERY_CHANGES_LOG)(stream.ReadToEnd).Value
              With _CHANGES_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CHANGES_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGES_LOG = JsonConvert.DeserializeObject(Of CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CHANGES_LOG)
                  .TITLE = obj.TITLE
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CHANGES_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CHANGES_LOG as CHANGES_LOG in value
              If _CHANGES_LOG.Equals(trycast(obj,CHANGES_LOG)) Then
                  value.remove(_CHANGES_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CHANGES_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CHANGES_LOG"
                else
                    return "CHANGES_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Form"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Form"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Log (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CHANGES_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGES_LOG = JsonConvert.DeserializeObject(Of CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pick and DCH Tasks")>  _
    Public Class QUERY_ORDWTASKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDWTASKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDWTASKS)
            _Parent = nothing
            _Name = "ORDWTASKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDWTASKS)
            _Parent = Parent
            _name = "ORDWTASKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDWTASKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDWTASKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDWTASKS As ORDWTASKS In JsonConvert.DeserializeObject(Of QUERY_ORDWTASKS)(stream.ReadToEnd).Value
              With _ORDWTASKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDWTASKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDWTASKS = JsonConvert.DeserializeObject(Of ORDWTASKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDWTASKS)
                  .LINE = obj.LINE
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .WTASKNUM = obj.WTASKNUM
                  .STATDES = obj.STATDES
                  .WTASKTYPECODE = obj.WTASKTYPECODE
                  .WTASKTYPEDES = obj.WTASKTYPEDES
                  .USERLOGIN = obj.USERLOGIN
                  .STZONECODE = obj.STZONECODE
                  .STZONEDES = obj.STZONEDES
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .PTQUANT = obj.PTQUANT
                  .TQUANT = obj.TQUANT
                  .WTASK = obj.WTASK
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDWTASKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDWTASKS as ORDWTASKS in value
              If _ORDWTASKS.Equals(trycast(obj,ORDWTASKS)) Then
                  value.remove(_ORDWTASKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDWTASKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _WTASKNUM As String
        
        Private _STATDES As String
        
        Private _WTASKTYPECODE As String
        
        Private _WTASKTYPEDES As String
        
        Private _USERLOGIN As String
        
        Private _STZONECODE As String
        
        Private _STZONEDES As String
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _PTQUANT As Decimal
        
        Private _TQUANT As Decimal
        
        Private _WTASK As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDWTASKS"
                else
                    return "ORDWTASKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "WTASKNUM={0}", _
                  string.format("'{0}'",WTASKNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("LINE"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task No."),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKNUM")>  _
        Public Property WTASKNUM() As String
            Get
                return _WTASKNUM
            End Get
            Set
                if not(value is nothing) then
                  _WTASKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task Type"),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPECODE")>  _
        Public Property WTASKTYPECODE() As String
            Get
                return _WTASKTYPECODE
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type Desc."),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(54),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPEDES")>  _
        Public Property WTASKTYPEDES() As String
            Get
                return _WTASKTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("LINE"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Storage Zone"),  _
         nType("Edm.String"),  _
         tab("Storage Zone"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("STZONECODE")>  _
        Public Property STZONECODE() As String
            Get
                return _STZONECODE
            End Get
            Set
                if not(value is nothing) then
                  _STZONECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Zone Description"),  _
         nType("Edm.String"),  _
         tab("Storage Zone"),  _
         Pos(64),  _
         [ReadOnly](true),  _
         twodBarcode("STZONEDES")>  _
        Public Property STZONEDES() As String
            Get
                return _STZONEDES
            End Get
            Set
                if not(value is nothing) then
                  _STZONEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("From Warehouse"),  _
         nType("Edm.String"),  _
         tab("Storage Zone"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Storage Zone"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planned Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Storage Zone"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PTQUANT")>  _
        Public Property PTQUANT() As nullable(of decimal)
            Get
                return _PTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _PTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Storage Zone"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Storage Zone"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WTASK")>  _
        Public Property WTASK() As nullable (of int64)
            Get
                return _WTASK
            End Get
            Set
                if not(value is nothing) then
                  _WTASK = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDWTASKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "WTASKNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDWTASKS = JsonConvert.DeserializeObject(Of ORDWTASKS)(e.StreamReader.ReadToEnd)
                With obj
                  _LINE = .LINE
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _WTASKNUM = .WTASKNUM
                  _STATDES = .STATDES
                  _WTASKTYPECODE = .WTASKTYPECODE
                  _WTASKTYPEDES = .WTASKTYPEDES
                  _USERLOGIN = .USERLOGIN
                  _STZONECODE = .STZONECODE
                  _STZONEDES = .STZONEDES
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _PTQUANT = .PTQUANT
                  _TQUANT = .TQUANT
                  _WTASK = .WTASK
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Split Among Profit/Cost Centers")>  _
    Public Class QUERY_SPLITCOSTCENTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SPLITCOSTCENTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SPLITCOSTCENTERS)
            _Parent = nothing
            _Name = "SPLITCOSTCENTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SPLITCOSTCENTERS)
            _Parent = Parent
            _name = "SPLITCOSTCENTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SPLITCOSTCENTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SPLITCOSTCENTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SPLITCOSTCENTERS As SPLITCOSTCENTERS In JsonConvert.DeserializeObject(Of QUERY_SPLITCOSTCENTERS)(stream.ReadToEnd).Value
              With _SPLITCOSTCENTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SPLITCOSTCENTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SPLITCOSTCENTERS = JsonConvert.DeserializeObject(Of SPLITCOSTCENTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SPLITCOSTCENTERS)
                  .COSTCNAME = obj.COSTCNAME
                  .COSTCDES = obj.COSTCDES
                  .COSTCNAME2 = obj.COSTCNAME2
                  .COSTCDES2 = obj.COSTCDES2
                  .COSTCNAME3 = obj.COSTCNAME3
                  .COSTCDES3 = obj.COSTCDES3
                  .COSTCNAME4 = obj.COSTCNAME4
                  .COSTCDES4 = obj.COSTCDES4
                  .COSTCNAME5 = obj.COSTCNAME5
                  .COSTCDES5 = obj.COSTCDES5
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .AMOUNT = obj.AMOUNT
                  .KLINE2 = obj.KLINE2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SPLITCOSTCENTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SPLITCOSTCENTERS as SPLITCOSTCENTERS in value
              If _SPLITCOSTCENTERS.Equals(trycast(obj,SPLITCOSTCENTERS)) Then
                  value.remove(_SPLITCOSTCENTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SPLITCOSTCENTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _COSTCDES As String
        
        Private _IsSetCOSTCNAME2 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME2 As String
        
        Private _COSTCDES2 As String
        
        Private _IsSetCOSTCNAME3 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME3 As String
        
        Private _COSTCDES3 As String
        
        Private _IsSetCOSTCNAME4 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME4 As String
        
        Private _COSTCDES4 As String
        
        Private _IsSetCOSTCNAME5 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME5 As String
        
        Private _COSTCDES5 As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetAMOUNT As Boolean = Boolean.FalseString
        
        Private _AMOUNT As Decimal
        
        Private _IsSetKLINE2 As Boolean = Boolean.FalseString
        
        Private _KLINE2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SPLITCOSTCENTERS"
                else
                    return "SPLITCOSTCENTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE2={0}", _
                  string.format("{0}",KLINE2) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(10),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES")>  _
        Public Property COSTCDES() As String
            Get
                return _COSTCDES
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 2"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(30),  _
         twodBarcode("COSTCNAME2")>  _
        Public Property COSTCNAME2() As String
            Get
                return _COSTCNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 2", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME2 = True
                If loading Then
                  _COSTCNAME2 = Value
                Else
                    if not _COSTCNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost2)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES2")>  _
        Public Property COSTCDES2() As String
            Get
                return _COSTCDES2
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 3"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(50),  _
         twodBarcode("COSTCNAME3")>  _
        Public Property COSTCNAME3() As String
            Get
                return _COSTCNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 3", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME3 = True
                If loading Then
                  _COSTCNAME3 = Value
                Else
                    if not _COSTCNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost3)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES3")>  _
        Public Property COSTCDES3() As String
            Get
                return _COSTCDES3
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 4"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(70),  _
         twodBarcode("COSTCNAME4")>  _
        Public Property COSTCNAME4() As String
            Get
                return _COSTCNAME4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 4", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME4 = True
                If loading Then
                  _COSTCNAME4 = Value
                Else
                    if not _COSTCNAME4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost4)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES4")>  _
        Public Property COSTCDES4() As String
            Get
                return _COSTCDES4
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 5"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(90),  _
         twodBarcode("COSTCNAME5")>  _
        Public Property COSTCNAME5() As String
            Get
                return _COSTCNAME5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 5", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME5 = True
                If loading Then
                  _COSTCNAME5 = Value
                Else
                    if not _COSTCNAME5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost5)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES5")>  _
        Public Property COSTCDES5() As String
            Get
                return _COSTCDES5
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(110),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Profit/Cost Center 5"),  _
         Pos(130),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Weight", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetAMOUNT = True
                If loading Then
                  _AMOUNT = Value
                Else
                    if not _AMOUNT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AMOUNT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AMOUNT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line 2"),  _
         nType("Edm.Int64"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE2")>  _
        Public Property KLINE2() As nullable (of int64)
            Get
                return _KLINE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line 2", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE2 = True
                If loading Then
                  _KLINE2 = Value
                Else
                    if not _KLINE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetCOSTCNAME2 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME2"": ")
              else
                  jw.WriteRaw("""COSTCNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME2)
            end if
            if _IsSetCOSTCNAME3 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME3"": ")
              else
                  jw.WriteRaw("""COSTCNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME3)
            end if
            if _IsSetCOSTCNAME4 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME4"": ")
              else
                  jw.WriteRaw("""COSTCNAME4"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME4)
            end if
            if _IsSetCOSTCNAME5 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME5"": ")
              else
                  jw.WriteRaw("""COSTCNAME5"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME5)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetAMOUNT then
              if f then
                  jw.WriteRaw(", ""AMOUNT"": ")
              else
                  jw.WriteRaw("""AMOUNT"": ")
                  f = true
              end if
              jw.WriteValue(me.AMOUNT)
            end if
            if _IsSetKLINE2 then
              if f then
                  jw.WriteRaw(", ""KLINE2"": ")
              else
                  jw.WriteRaw("""KLINE2"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE2)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SPLITCOSTCENTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME2")
              .WriteAttributeString("value", me.COSTCNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME3")
              .WriteAttributeString("value", me.COSTCNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME4")
              .WriteAttributeString("value", me.COSTCNAME4)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME5")
              .WriteAttributeString("value", me.COSTCNAME5)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetAMOUNT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AMOUNT")
              .WriteAttributeString("value", me.AMOUNT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", me.KLINE2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SPLITCOSTCENTERS = JsonConvert.DeserializeObject(Of SPLITCOSTCENTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _COSTCNAME = .COSTCNAME
                  _COSTCDES = .COSTCDES
                  _COSTCNAME2 = .COSTCNAME2
                  _COSTCDES2 = .COSTCDES2
                  _COSTCNAME3 = .COSTCNAME3
                  _COSTCDES3 = .COSTCDES3
                  _COSTCNAME4 = .COSTCNAME4
                  _COSTCDES4 = .COSTCDES4
                  _COSTCNAME5 = .COSTCNAME5
                  _COSTCDES5 = .COSTCDES5
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _AMOUNT = .AMOUNT
                  _KLINE2 = .KLINE2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Orders - Remarks")>  _
    Public Class QUERY_ORDERSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDERSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDERSTEXT)
            _Parent = nothing
            _Name = "ORDERSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDERSTEXT)
            _Parent = Parent
            _name = "ORDERSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDERSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDERSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDERSTEXT As ORDERSTEXT In JsonConvert.DeserializeObject(Of QUERY_ORDERSTEXT)(stream.ReadToEnd).Value
              With _ORDERSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDERSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERSTEXT = JsonConvert.DeserializeObject(Of ORDERSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDERSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDERSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDERSTEXT as ORDERSTEXT in value
              If _ORDERSTEXT.Equals(trycast(obj,ORDERSTEXT)) Then
                  value.remove(_ORDERSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDERSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDERSTEXT"
                else
                    return "ORDERSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(30),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDERSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDERSTEXT = JsonConvert.DeserializeObject(Of ORDERSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Dialogue")>  _
    Public Class QUERY_INTERNALDIALOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INTERNALDIALOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = nothing
            _Name = "INTERNALDIALOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = Parent
            _name = "INTERNALDIALOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INTERNALDIALOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INTERNALDIALOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INTERNALDIALOGTEXT As INTERNALDIALOGTEXT In JsonConvert.DeserializeObject(Of QUERY_INTERNALDIALOGTEXT)(stream.ReadToEnd).Value
              With _INTERNALDIALOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INTERNALDIALOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INTERNALDIALOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INTERNALDIALOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INTERNALDIALOGTEXT as INTERNALDIALOGTEXT in value
              If _INTERNALDIALOGTEXT.Equals(trycast(obj,INTERNALDIALOGTEXT)) Then
                  value.remove(_INTERNALDIALOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INTERNALDIALOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INTERNALDIALOGTEXT"
                else
                    return "INTERNALDIALOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Comment"),  _
         nType("Edm.String"),  _
         tab("Comment"),  _
         Pos(30),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Comment", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Comment"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INTERNALDIALOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
End Namespace
